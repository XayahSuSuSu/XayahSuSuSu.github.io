<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://acmezone.top/atom.xml" rel="self"/>
  
  <link href="https://acmezone.top/"/>
  <updated>2024-03-23T15:29:59.892Z</updated>
  <id>https://acmezone.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>STM32F103VBT6: 闪烁一盏LED灯</title>
    <link href="https://acmezone.top/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/"/>
    <id>https://acmezone.top/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/</id>
    <published>2022-11-23T11:03:23.000Z</published>
    <updated>2024-03-23T15:29:59.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>前面我们学习了很多<strong>单片机</strong>的知识，接下来我们即将进入到<strong>ARM</strong>的世界~<br>本篇博文将<strong>从零开始</strong>实现一块基于<strong>STM32F103VBT6</strong>芯片的开发板上的<strong>LED灯</strong>的闪烁。</p><h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><h2 id="MCUISP"><a href="#MCUISP" class="headerlink" title="MCUISP"></a>MCUISP</h2><p>如何使用它下载到<strong>STM32板</strong>上呢？<br>首先将开发板上的<strong>COM口</strong>接入<strong>PC</strong>，在软件中<code>搜索串口</code>并且选择<code>CH 340</code>串口，波特率选择<code>115200</code>即可。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/0.png" class="" title="Image"><p>然后选择<strong>HEX文件</strong>并按照如下选项进行勾选</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/1.png" class="" title="Image"><p>准备就绪后，点击<strong>开始编程</strong>按钮，在开发板上<strong>按顺序快速按下REST和ISP按键</strong>即可下载。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/2.png" class="" title="Image"><h2 id="Keil-uVision5"><a href="#Keil-uVision5" class="headerlink" title="Keil uVision5"></a>Keil uVision5</h2><p>该程序安装完成后记得安装本开发板的<strong>支持包</strong><code>Keil.STM32F1xx_DFP.xxx</code>（双击即可安装）</p><h2 id="J-Link"><a href="#J-Link" class="headerlink" title="J-Link"></a>J-Link</h2><p>可在此处<strong>下载</strong>并<strong>安装</strong>最新的<a class="link" href="https://www.segger.com/downloads/jlink/">J-Link<i class="fas fa-external-link-alt"></i></a></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/3.png" class="" title="Image"><h2 id="STM32CubeMX"><a href="#STM32CubeMX" class="headerlink" title="STM32CubeMX"></a>STM32CubeMX</h2><p>可在此处<strong>下载</strong>并<strong>安装</strong>最新的<a class="link" href="https://www.st.com/en/development-tools/stm32cubemx.html#get-software">STM32CubeMX<i class="fas fa-external-link-alt"></i></a>（<strong>需要注册并登录</strong>）</p><p><strong>安装完成</strong>后首次打开该应用，首先打开<code>Embedded Software Packages Manager</code></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/4.png" class="" title="Image"><p>选择<strong>STM32F1</strong>并下载<strong>最新的软件包</strong></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/5.png" class="" title="Image"><h1 id="三、使用STM32CubeMX生成模板代码"><a href="#三、使用STM32CubeMX生成模板代码" class="headerlink" title="三、使用STM32CubeMX生成模板代码"></a>三、使用STM32CubeMX生成模板代码</h1><h2 id="1-创建工程"><a href="#1-创建工程" class="headerlink" title="1. 创建工程"></a>1. 创建工程</h2><p>打开<strong>STM32CubeMX</strong>，选择<code>ACCESS TO MCU SELECTOR</code></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/6.png" class="" title="Image"><p>搜素<code>STM32F103VBT6</code>，双击右侧对应的<code>STM32F103VBT6</code>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/7.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/8.png" class="" title="Image"><h2 id="2-分配LED灯相关引脚"><a href="#2-分配LED灯相关引脚" class="headerlink" title="2. 分配LED灯相关引脚"></a>2. 分配LED灯相关引脚</h2><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/9.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/10.png" class="" title="Image"><p>从<strong>原理图</strong>可以看出，<strong>LED灯</strong>的<strong>A - E</strong>分别对应应引脚<strong>PE8 - PE15</strong>，而<strong>LED_SEL</strong>对应<strong>PB3</strong>。<br>因此我们将其设置为<strong>推挽</strong>，即<strong>Output Push Pull</strong>，当然还可以为其<strong>添加标签</strong>，更便于<strong>标识</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/11.png" class="" title="Image"><h2 id="3-模式配置"><a href="#3-模式配置" class="headerlink" title="3. 模式配置"></a>3. 模式配置</h2><p>将这<strong>9个引脚</strong>设置完毕后，我们接下来设置其<strong>调试模式</strong>。<br>进入<strong>System Core - SYS</strong>，在<strong>Debug</strong>处选择<strong>Serial Wire</strong>，防止开发板<strong>被上锁</strong>导致<strong>只能下载一次</strong>的问题。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/12.png" class="" title="Image"><h2 id="4-时钟配置"><a href="#4-时钟配置" class="headerlink" title="4. 时钟配置"></a>4. 时钟配置</h2><p>这里我们使用<strong>时间中断</strong>来<strong>闪烁LED灯</strong>，因此我们需要<strong>配置时钟</strong>。<br>进入<strong>Clock Configuration</strong>，观察到<strong>默认频率</strong>为<strong>8MHz</strong>（实际上可以根据自己的需求进行调整，或使用<strong>外部时钟</strong>等等，这里我们使用<strong>系统内部</strong>的时钟即可）</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/13.png" class="" title="Image"><p>返回<strong>Pinout &amp; Configuration</strong>界面，进入<strong>Timers - TIM1</strong><br>首先设置<strong>时钟源(Clock Source)<strong>为</strong>系统时钟(Internal Clock)<strong>，然后在</strong>Parameter Settings</strong>中设置<strong>分频系数(Prescaler)<strong>、</strong>计数周期(Counter Period)<strong>以及</strong>自动重载(auto-reload preload)</strong></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/14.png" class="" title="Image"><p>假设<strong>分频系数(Prescaler)<strong>为</strong>A</strong>，<strong>计数周期(Counter Period)<strong>为</strong>B</strong>，<strong>时钟频率</strong>为<strong>C</strong>，则这里<strong>时间溢出公式</strong>为<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.326ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10751.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(981.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2037.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2426.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(3398.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4399,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4899,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5510.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(6232.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6621.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(7602.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8602.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9102.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9491.9,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(9991.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container><br>我们将<strong>A</strong>设置为<strong>8000-1</strong>，<strong>B</strong>设置为<strong>1000-1</strong>，<strong>C</strong>为<strong>8Mhz</strong>，因此<strong>T = 1s</strong>，即我们的<strong>时间回调函数调用周期为1s</strong>。</p><p>接下来我们开启<strong>时间中断</strong></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/15.png" class="" title="Image"><h2 id="5-工程配置"><a href="#5-工程配置" class="headerlink" title="5. 工程配置"></a>5. 工程配置</h2><p>在<strong>Project Manager</strong>中设置<strong>工程名称</strong>、<strong>路径</strong>、<strong>工具链</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/16.png" class="" title="Image"><p>在左侧选择<strong>Code Generator</strong>，勾选<code>Generate peripheral initialization as a pair of '.c/.h' files per peripheral</code>，即<strong>针对每个外设生成独立的.c和.h文件</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/17.png" class="" title="Image"><h2 id="6-生成模板代码"><a href="#6-生成模板代码" class="headerlink" title="6. 生成模板代码"></a>6. 生成模板代码</h2><p><strong>配置完成</strong>后，点击右上角<strong>GENERATE CODE</strong>按钮即可生成<strong>模板代码</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/18.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/19.png" class="" title="Image"><p>在<strong>工程目录</strong>下，<code>LED.ioc</code>即为<strong>STM32CubeMX</strong>的<strong>工程文件</strong>，而<code>MDK-ARM</code>下的<code>LED.uvprojx</code>即为<strong>Keil工程文件</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/20.png" class="" title="Image"><h1 id="四、使用模板代码实现LED闪烁效果。"><a href="#四、使用模板代码实现LED闪烁效果。" class="headerlink" title="四、使用模板代码实现LED闪烁效果。"></a>四、使用模板代码实现LED闪烁效果。</h1><p>使用<strong>Keil</strong>或其它工具打开该工程，我们可以发现<strong>STM32CubeMX</strong>已为我们生成了规范的<strong>目录结构</strong>。</p><h2 id="1-开启LED灯。"><a href="#1-开启LED灯。" class="headerlink" title="1. 开启LED灯。"></a>1. 开启LED灯。</h2><p>在<code>gpio.c</code>中我们可以找到<strong>IO口初始化</strong>的相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void MX_GPIO_Init(void)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = {0};</span><br><span class="line"></span><br><span class="line">  /* GPIO Ports Clock Enable */</span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  /*Configure GPIO pin Output Level */</span><br><span class="line">  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11</span><br><span class="line">                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  /*Configure GPIO pin Output Level */</span><br><span class="line">  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  /*Configure GPIO pins : PE8 PE9 PE10 PE11</span><br><span class="line">                           PE12 PE13 PE14 PE15 */</span><br><span class="line">  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11</span><br><span class="line">                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  /*Configure GPIO pin : PB3 */</span><br><span class="line">  GPIO_InitStruct.Pin = GPIO_PIN_3;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>因此我们可以<strong>依葫芦画瓢</strong>在<code>main.c</code>中为<strong>LED_SEL口使能</strong>，让其<strong>LED灯正常工作</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">{</span><br><span class="line">  HAL_Init();</span><br><span class="line">  SystemClock_Config();</span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_TIM1_Init();</span><br><span class="line"></span><br><span class="line">  // 允许LED输出</span><br><span class="line">  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  while (1) {}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>其中<code>GPIO_PIN_SET</code>实为<strong>1</strong>，即<strong>高电平</strong>；同理<code>GPIO_PIN_RESET</code>为<strong>0</strong>，即<strong>低电平</strong>。</p><h2 id="2-实现时间中断函数"><a href="#2-实现时间中断函数" class="headerlink" title="2. 实现时间中断函数"></a>2. 实现时间中断函数</h2><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/22.png" class="" title="Image"><p>在<code>tim.c</code>中我们可以发现它有一个<strong>全局实例</strong>，<strong>时钟通过该实例进行区分</strong>。<br>欲<strong>开启该时钟</strong>，我们需要将其<strong>初始化</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main(void)</span><br><span class="line">{</span><br><span class="line">  HAL_Init();</span><br><span class="line">  SystemClock_Config();</span><br><span class="line">  MX_GPIO_Init();</span><br><span class="line">  MX_TIM1_Init();</span><br><span class="line"></span><br><span class="line">  // 允许LED输出</span><br><span class="line">  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  // 使能TIM1</span><br><span class="line">  HAL_TIM_Base_Start_IT(&amp;htim1);</span><br><span class="line">  while (1) {}</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>然后编写<strong>时间中断函数</strong>即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)</span><br><span class="line">{</span><br><span class="line">  if (htim-&gt;Instance == TIM1) {</span><br><span class="line">    // TIM1中断, 1s</span><br><span class="line">    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>这里我选择将<strong>LED灯A每1s进行一次翻转</strong>，从而实现<strong>闪烁效果</strong>。</p><h1 id="五、下载验证"><a href="#五、下载验证" class="headerlink" title="五、下载验证"></a>五、下载验证</h1><p>代码编写好后，如果正确安装了<strong>J-Link驱动</strong>，将开发板上的<strong>SWD口接入PC</strong>，则可在<strong>设备管理器</strong>中找到如下条目</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/23.png" class="" title="Image"><p>然后打开<strong>Keil</strong>，如下图配置<strong>J-Link调试</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/24.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/25.png" class="" title="Image"><p>进入<strong>J-Link设置</strong>，按如下<strong>配置端口和频率</strong></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/25.1.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/25.2.png" class="" title="Image"><p>然后<strong>编译</strong></p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/26.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/27.png" class="" title="Image"><p>至此，我们将其<strong>下载</strong>到开发板上，按下<strong>REST键</strong>即可<strong>验证</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/28.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/29.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/30.jpg" class="" title="Image"><h1 id="六、调试"><a href="#六、调试" class="headerlink" title="六、调试"></a>六、调试</h1><p><strong>设置断点</strong>后，即可进入<strong>调试模式</strong>。</p><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/31.png" class="" title="Image"><img lazyload="" alt="image" data-src="/2022/11/23/STM32F103VBT6-%E9%97%AA%E7%83%81%E4%B8%80%E7%9B%8FLED%E7%81%AF/32.png" class="" title="Image">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;前面我们学习了很多&lt;strong&gt;单片机&lt;/strong&gt;的知识，接下来我们即将进入到&lt;strong&gt;ARM&lt;/strong</summary>
      
    
    
    
    
    <category term="ARM" scheme="https://acmezone.top/tags/ARM/"/>
    
    <category term="嵌入式" scheme="https://acmezone.top/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>用Photoshop实现IOS/MacOS的模糊效果</title>
    <link href="https://acmezone.top/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/"/>
    <id>https://acmezone.top/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/</id>
    <published>2022-07-28T05:44:57.000Z</published>
    <updated>2024-03-23T15:30:00.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>IOS/MacOS对于模糊的理解已然是登峰造极，但我们平常使用普通的高斯模糊却做不出这种效果，这是为什么呢？如何用Photoshop做出类似于IOS/MacOS那样好看的模糊呢？</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-准备一张素材图片"><a href="#1-准备一张素材图片" class="headerlink" title="1. 准备一张素材图片"></a>1. 准备一张素材图片</h2><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E7%B4%A0%E6%9D%90.png"                        class="" title="素材"                 ><h2 id="2-导入PS"><a href="#2-导入PS" class="headerlink" title="2. 导入PS"></a>2. 导入PS</h2><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E5%AF%BC%E5%85%A5PS.png"                        class="" title="导入PS"                 ><h2 id="3-拷贝图层-Ctrl-J"><a href="#3-拷贝图层-Ctrl-J" class="headerlink" title="3. 拷贝图层(Ctrl + J)"></a>3. 拷贝图层(Ctrl + J)</h2><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E6%8B%B7%E8%B4%9D%E5%9B%BE%E5%B1%82.png"                        class="" title="拷贝图层"                 ><h2 id="4-添加模糊滤镜"><a href="#4-添加模糊滤镜" class="headerlink" title="4. 添加模糊滤镜"></a>4. 添加模糊滤镜</h2><p>选中拷贝的图层，选择滤镜 - 模糊 - 高斯模糊，半径根据需要可调30-50，或者其他适合的半径</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A.png"                        class="" title="高斯模糊"                 ><h2 id="5-绘制遮罩"><a href="#5-绘制遮罩" class="headerlink" title="5. 绘制遮罩"></a>5. 绘制遮罩</h2><p>以一个圆角矩形为例，我们只需要其形状，因此该矩形的颜色或描边不需要管它。</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E7%BB%98%E5%88%B6%E5%9C%86%E8%A7%92%E7%9F%A9%E5%BD%A2.png"                        class="" title="绘制圆角矩形"                 ><p>然后右键矩形图层 - 栅格化图层，并用魔棒工具选中该矩形形状</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E6%A0%85%E6%A0%BC%E5%8C%96%E5%B9%B6%E9%80%89%E4%B8%AD.png"                        class="" title="栅格化并选中"                 ><p>然后选中模糊的图层，点击下方的添加图层蒙版按钮</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E6%B7%BB%E5%8A%A0%E8%92%99%E7%89%88.png"                        class="" title="添加蒙版"                 ><p>删除矩形图层，即可得到模糊遮罩</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E6%A8%A1%E7%B3%8A%E9%81%AE%E7%BD%A9%E5%88%9D%E7%89%88.png"                        class="" title="模糊遮罩初版"                 ><p>但是效果看起来不太行！我们解锁模糊图层和蒙版，选中模糊图层，使用快捷键(Ctrl + u)打开色相窗口，将饱和度和明度进行适当调整。</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E8%89%B2%E7%9B%B825.png"                        class="" title="色相25"                 ><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E8%89%B2%E7%9B%B880.png"                        class="" title="色相80"                 ><p>这下看起来好很多了，我们选中遮罩层，调整一下遮罩的位置和大小。</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E5%AE%8C%E6%88%90.png"                        class="" title="完成"                 ><p>针布戳</p><img                         lazyload                       alt="image"                       data-src="/2022/07/28/%E7%94%A8Photoshop%E5%AE%9E%E7%8E%B0IOS-MacOS%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C/%E6%A8%A1%E7%B3%8A%E6%88%90%E5%93%810.png"                        class="" title="模糊成品0"                 >]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;IOS/MacOS对于模糊的理解已然是登峰造极，但我们平常使用普通的高斯模糊却做不出这种效果，这是为什么呢？如何用Photo</summary>
      
    
    
    
    
    <category term="Photoshop" scheme="https://acmezone.top/tags/Photoshop/"/>
    
    <category term="高斯模糊" scheme="https://acmezone.top/tags/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A/"/>
    
  </entry>
  
  <entry>
    <title>从绘板到跑路: 基于IAP15F2K61S2芯片的单片机折腾笔记</title>
    <link href="https://acmezone.top/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</id>
    <published>2022-07-14T07:05:55.000Z</published>
    <updated>2024-03-23T15:29:59.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>最近有个项目需要一块专用单片机用于实现PWM调频、电量测量（实际上是电压测量）、光照测量、485以及串口通信，并且项目代码基于学校老师封装的BSP，由于其是为基于IAP15F2K61S2芯片设计的开发板，因此打算基于同款芯片重新设计一块。</p><h1 id="二、工具"><a href="#二、工具" class="headerlink" title="二、工具"></a>二、工具</h1><p>工欲善其事，必先利其器。</p><ol><li>PCB设计工具。这里采用老师推荐的<a class="link" href="https://lceda.cn/">嘉立创EDA<i class="fas fa-external-link-alt"></i></a>。</li><li>Money。</li></ol><h1 id="三、绘制原理图"><a href="#三、绘制原理图" class="headerlink" title="三、绘制原理图"></a>三、绘制原理图</h1><p>原理图是设计流程中的基础，它是最终单片机上的一个个模块电路。由于是基于学校的开发板，因此可以借鉴其部分原理图。</p><h2 id="1-芯片"><a href="#1-芯片" class="headerlink" title="1. 芯片"></a>1. 芯片</h2><h3 id="a-查看原版原理图"><a href="#a-查看原版原理图" class="headerlink" title="a) 查看原版原理图"></a>a) 查看原版原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E8%8A%AF%E7%89%871.png" class="" title="芯片1"><h3 id="b-添加元件"><a href="#b-添加元件" class="headerlink" title="b) 添加元件"></a>b) 添加元件</h3><p>打开嘉立创EDA，新建好工程后创建第一张原理图，然后打开元件库</p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E5%85%83%E4%BB%B6%E5%BA%93.png" class="" title="元件库"><p>搜索<code>IAP15F2K61S2 LQFP44</code></p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E6%90%9C%E7%B4%A2%E8%8A%AF%E7%89%87.png" class="" title="搜索芯片"><p>在添加元件时，最好选择立创商城的元件，这样在购买的时候比较方便。</p><h3 id="c-绘制原理图"><a href="#c-绘制原理图" class="headerlink" title="c) 绘制原理图"></a>c) 绘制原理图</h3><p>将其放置在原理图上，根据实际需求修改引脚：</p><ul><li>PWM调频需要用到PCA模块，因此引出4、5号引脚</li><li>电量测量以及光照测量需要用到模数转换器（ADC），因此引出7、8、9号引脚</li><li>485通信需要接收/发送数据以及使能信号，因此分别引出38、6、25号引脚</li><li>串口通信需要接收/发送数据，因此分别引出18、19号引脚<img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E8%8A%AF%E7%89%872.png" class="" title="芯片2">这里芯片的<code>VCC</code>引脚和<code>GND</code>引脚之间连接了一个<code>104</code>的电容，而<code>104</code>指的是<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="10.105ex" height="2.456ex" role="img" focusable="false" viewBox="0 -891.7 4466.6 1085.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1778,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mi" transform="translate(3214.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(3717.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container><br>即<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.05ex" xmlns="http://www.w3.org/2000/svg" width="6.446ex" height="1.588ex" role="img" focusable="false" viewBox="0 -680 2849 702"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2100,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g></g></svg></mjx-container><br>它的作用实际上是过滤电路中的高频噪声。</li></ul><h2 id="2-USB"><a href="#2-USB" class="headerlink" title="2. USB"></a>2. USB</h2><h3 id="a-查看原版原理图-1"><a href="#a-查看原版原理图-1" class="headerlink" title="a) 查看原版原理图"></a>a) 查看原版原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/USB1.png" class="" title="USB1"><p>右上角是FM收音机模块的一部分，而这里不需要用到它。</p><h3 id="b-绘制原理图"><a href="#b-绘制原理图" class="headerlink" title="b) 绘制原理图"></a>b) 绘制原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/USB2.png" class="" title="USB2"><p>添加好元件后就可以绘制原理图了，这里把接口换成了Type-C（使用倒是方便，但非常难焊）。</p><h2 id="3-485"><a href="#3-485" class="headerlink" title="3. 485"></a>3. 485</h2><h3 id="a-查看原版原理图-2"><a href="#a-查看原版原理图-2" class="headerlink" title="a) 查看原版原理图"></a>a) 查看原版原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/485_1.png" class="" title="485_1"><h3 id="b-绘制原理图-1"><a href="#b-绘制原理图-1" class="headerlink" title="b) 绘制原理图"></a>b) 绘制原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/485_2.png" class="" title="485_2"><h2 id="4-PWM"><a href="#4-PWM" class="headerlink" title="4. PWM"></a>4. PWM</h2><h3 id="a-绘制原理图"><a href="#a-绘制原理图" class="headerlink" title="a) 绘制原理图"></a>a) 绘制原理图</h3><p>下图存在部分错误，会在后文中指出。</p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/PWM.png" class="" title="PWM"><p>由于可以通过芯片在软件层实现PCA调频，因此可以借助MOS管导通特性，从而将输入的12V进行调频。<br>将P1.0/P1.1口接入NMOS管的栅极，12V外部输入接入PMOS管的源极，当P1.0/P1.1输入高电平时NMOS管源极和漏极导通，PMOS管栅极相当于接地，其源极和漏极导通，从而使12V输出到漏极，通过对导通时间与周期的比例（即占空比）的控制，即可控制输出电压。<br>其中二极管接地的作用是稳压和保护，防止反向击穿；电感通直流，阻交流；电容接地则是滤波。</p><h2 id="5-电量（电压）测量"><a href="#5-电量（电压）测量" class="headerlink" title="5. 电量（电压）测量"></a>5. 电量（电压）测量</h2><h3 id="a-绘制原理图-1"><a href="#a-绘制原理图-1" class="headerlink" title="a) 绘制原理图"></a>a) 绘制原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E7%94%B5%E5%8E%8B.png" class="" title="电压"><p>V_Voltage0/V_Voltage1得到的值是2k电阻的电压，因此将值除以2乘以20即为所测电压。</p><h2 id="6-光照测量"><a href="#6-光照测量" class="headerlink" title="6. 光照测量"></a>6. 光照测量</h2><h3 id="a-查看原版原理图-3"><a href="#a-查看原版原理图-3" class="headerlink" title="a) 查看原版原理图"></a>a) 查看原版原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/ROP1.png" class="" title="ROP1"><h3 id="b-绘制原理图-2"><a href="#b-绘制原理图-2" class="headerlink" title="b) 绘制原理图"></a>b) 绘制原理图</h3><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/ROP2.png" class="" title="ROP2"><p>这里没有直接接入光敏电阻，而是改成用连接器外接。</p><h1 id="四、绘制PCB"><a href="#四、绘制PCB" class="headerlink" title="四、绘制PCB"></a>四、绘制PCB</h1><p>PCB设计是设计流程中的重要环节，它决定了最终成品板的模样。</p><h2 id="1-原理图转PCB"><a href="#1-原理图转PCB" class="headerlink" title="1. 原理图转PCB"></a>1. 原理图转PCB</h2><p>将所有原理图绘制完成后，可以打开左侧工具栏中的设计管理器，检查是否还有未连接网络。</p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E8%AE%BE%E8%AE%A1%E7%AE%A1%E7%90%86%E5%99%A8.png" class="" title="设计管理器"><p>检查完成之后，单击设计 - 原理图转PCB或者快捷工具栏对应的图标，将原理图转为PCB。<br>后续如果原理图有更改，则可以选择更新PCB。</p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E8%BD%ACPCB.png" class="" title="转PCB"><h2 id="2-绘制"><a href="#2-绘制" class="headerlink" title="2. 绘制"></a>2. 绘制</h2><p>首先根据实际情况填写参数，新建PCB。</p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E6%96%B0%E5%BB%BAPCB.png" class="" title="新建PCB"><p>新建好后，就可以对PCB进行设计了。</p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E5%88%9D%E5%A7%8BPCB.png" class="" title="初始PCB"><p>每个人的设计风格和理念都不同，但仍需要遵守一定的准则，以保证开发板的稳定性。</p><h3 id="a-绘制步骤"><a href="#a-绘制步骤" class="headerlink" title="a) 绘制步骤"></a>a) 绘制步骤</h3><p>根据原理图进行大致布局 → 微调元件位置 → 根据需要可选择放置焊盘 → 连线 → 微调元件位号位置，适当添加引脚标识（如GND等） → 添加泪滴（增强连线稳定性） → 铺铜（增强散热、屏蔽、保证PCB工艺电镀效果等）</p><h3 id="b-注意事项"><a href="#b-注意事项" class="headerlink" title="b) 注意事项"></a>b) 注意事项</h3><ul><li>尽量保证每个模块电路中的元件靠近，使得传输距离更短，更稳定，并且连线时更简单。</li><li>连线时切忌直角转弯，应更平滑。<br>错误：<img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E7%9B%B4%E8%A7%92%E8%BD%AC%E5%BC%AF.png" class="" title="直角转弯">正确：<img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E9%9D%9E%E7%9B%B4%E8%A7%92%E8%BD%AC%E5%BC%AF.png" class="" title="非直角转弯"></li><li>在条件允许的情况下尽量增大导线的线宽。</li><li>布局时应考虑部分元件对电路的影响，例如考虑晶振对电路的辐射作用，将其布局在开发板边缘位置更好。</li><li>正面无法继续连线时，可放置过孔在背面继续连线。应注意立创EDA默认的过孔直径不满足DRC检查，可适当调整。</li><li>铺铜不是必要的，但一般的电路板中铺铜更好。可对某部分特殊网络进行铺铜，例如本开发板背面对GND，正面对VUSB、VCC、+12V铺铜。此外铺铜间距不应太小，因为PCB工艺可能会有偏差。<img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E9%93%BA%E9%93%9C.png" class="" title="铺铜"></li></ul><h3 id="c-查看成品"><a href="#c-查看成品" class="headerlink" title="c) 查看成品"></a>c) 查看成品</h3><p>绘制完成后，可以查看成品的各种样图。</p><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/%E6%88%90%E5%93%81PCB.png" class="" title="成品PCB"><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/2D%E5%9B%BE.png" class="" title="2D图"><img lazyload="" alt="image" data-src="/2022/07/14/%E4%BB%8E%E7%BB%98%E6%9D%BF%E5%88%B0%E8%B7%91%E8%B7%AF-%E5%9F%BA%E4%BA%8EIAP15F2K61S2%E8%8A%AF%E7%89%87%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/3D%E5%9B%BE.png" class="" title="3D图">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;最近有个项目需要一块专用单片机用于实现PWM调频、电量测量（实际上是电压测量）、光照测量、485以及串口通信，并且项目代码基</summary>
      
    
    
    
    
    <category term="单片机" scheme="https://acmezone.top/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Vue + Electron 搭建跨端桌面应用</title>
    <link href="https://acmezone.top/2022/07/02/Vue-Electron-%E6%90%AD%E5%BB%BA%E8%B7%A8%E7%AB%AF%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>https://acmezone.top/2022/07/02/Vue-Electron-%E6%90%AD%E5%BB%BA%E8%B7%A8%E7%AB%AF%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/</id>
    <published>2022-07-02T09:34:37.000Z</published>
    <updated>2024-03-23T15:29:59.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><strong>跨端应用开发</strong>一直都是<strong>热门需求</strong>，目前已经有很多<strong>方案</strong>可以实现<strong>跨端开发</strong>，然而 <strong><a class="link"   href="https://flutter.dev/" >Flutter<i class="fas fa-external-link-alt"></i></a></strong> 对于目前热门的<strong>高刷屏适配摆烂</strong>， <strong><a class="link"   href="https://developer.android.com/jetpack/compose" >JetPack Compose<i class="fas fa-external-link-alt"></i></a></strong> 仍在<strong>发育</strong>之中， <strong><a class="link"   href="https://www.electronjs.org/" >Electron<i class="fas fa-external-link-alt"></i></a></strong> 优势在于<strong>前端技术栈</strong>却亦<strong>受限于此</strong>，但如果我们熟悉<strong>前端开发</strong>，<strong>Electron</strong>仍是一个不错的选择。</p><p>本文以 <strong><a class="link"   href="https://cn.vuejs.org/" >Vue2<i class="fas fa-external-link-alt"></i></a></strong> 热门框架 <strong><a class="link"   href="https://quasar.dev/" >Quasar<i class="fas fa-external-link-alt"></i></a></strong> 为例，记录其<strong>Windows桌面程序搭建流程</strong>。</p><h1 id="二、流程"><a href="#二、流程" class="headerlink" title="二、流程"></a>二、流程</h1><h2 id="1-安装NodeJS"><a href="#1-安装NodeJS" class="headerlink" title="1. 安装NodeJS"></a>1. 安装NodeJS</h2><p><strong><a class="link"   href="https://github.com/nvm-sh/nvm" >NVM<i class="fas fa-external-link-alt"></i></a></strong> 对于<strong>Node版本管理</strong>非常方便，请参考其<strong>安装文档</strong>安装 <strong><a class="link"   href="https://nodejs.org/en/" >NodeJS<i class="fas fa-external-link-alt"></i></a></strong> 。</p><h2 id="2-安装Yarn"><a href="#2-安装Yarn" class="headerlink" title="2. 安装Yarn"></a>2. 安装Yarn</h2><p>相比于<strong>NPM</strong>，我更青睐 <strong><a class="link"   href="https://github.com/yarnpkg/yarn" >Yarn<i class="fas fa-external-link-alt"></i></a></strong> 。<br>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure><h2 id="3-安装Quasar-CLI"><a href="#3-安装Quasar-CLI" class="headerlink" title="3. 安装Quasar CLI"></a>3. 安装Quasar CLI</h2><p><strong>Quasar脚手架</strong>可以方便地为我们<strong>创建Quasar工程</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @quasar/cli</span><br></pre></td></tr></table></figure><h2 id="4-创建工程"><a href="#4-创建工程" class="headerlink" title="4. 创建工程"></a>4. 创建工程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create quasar</span><br></pre></td></tr></table></figure><p>根据<strong>提示</strong>选择<strong>相关配置</strong>来<strong>创建Quasar工程</strong>。</p><h2 id="5-设置Yarn-Electron淘宝源"><a href="#5-设置Yarn-Electron淘宝源" class="headerlink" title="5. 设置Yarn Electron淘宝源"></a>5. 设置Yarn Electron淘宝源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set electron_mirror https://cdn.npm.taobao.org/dist/electron/</span><br></pre></td></tr></table></figure><h2 id="5-添加Quasar-Electron模式"><a href="#5-添加Quasar-Electron模式" class="headerlink" title="5. 添加Quasar Electron模式"></a>5. 添加Quasar Electron模式</h2><p>先进入<strong>工程目录</strong>，再添加<strong>Electron模式</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quasar mode add electron</span><br></pre></td></tr></table></figure><h2 id="6-调试"><a href="#6-调试" class="headerlink" title="6. 调试"></a>6. 调试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quasar dev -m electron</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/07/02/Vue-Electron-%E6%90%AD%E5%BB%BA%E8%B7%A8%E7%AB%AF%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/%E8%B0%83%E8%AF%95.png"                        class="" title="调试"                 >]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;跨端应用开发&lt;/strong&gt;一直都是&lt;strong&gt;热门需求&lt;/strong&gt;，目前已经有很多&lt;stron</summary>
      
    
    
    
    
    <category term="Vue" scheme="https://acmezone.top/tags/Vue/"/>
    
    <category term="Electron" scheme="https://acmezone.top/tags/Electron/"/>
    
    <category term="跨端" scheme="https://acmezone.top/tags/%E8%B7%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch + OpenVINO™ 深度学习笔记</title>
    <link href="https://acmezone.top/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-22T07:36:13.000Z</published>
    <updated>2024-03-23T15:29:59.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><strong>PyTorch</strong>是<strong>开源</strong>的<strong>深度学习框架</strong>，目的是<strong>加速从研究原型到产品开发的过程</strong>。其<strong>SDK</strong>主要基于<strong>Python</strong>。而其<strong>模型训练</strong>支持<strong>CPU</strong>与<strong>GPU</strong>、支持<strong>分布式训练</strong>、<strong>云部署</strong>，针对<strong>深度学习特定领域</strong>有不同的丰富的<strong>扩展库</strong>。</p><p><strong>深度学习项目</strong>的开发大致可以分为<strong>两个阶段</strong>：</p><ul><li>第一个阶段是<strong>训练阶段</strong>。这个阶段最重要的事情就是<strong>数据采集</strong>、<strong>模型设计</strong>、<strong>训练参数调试</strong>，<strong>找到合适的模型</strong>并努力训练到<strong>满足</strong>或者<strong>超过</strong>项目实际需要的<strong>精度</strong>。</li><li>第二个阶段是<strong>部署阶段</strong>。这个阶段最重要的事情就是把模型<strong>移植部署</strong>到<strong>各种不同的计算设备</strong>上，尽可能地实现模型规模的<strong>小型化</strong>、<strong>推理预测过程</strong>的<strong>加速</strong>。</li></ul><p>相比于<strong>PyTorch</strong>、<strong>TensorFlow</strong>等为开发者所熟知的<strong>训练框架</strong>，<strong>推理部署</strong>的框架却显得有些<strong>默默无闻</strong>，但是它在<strong>深度学习模型落地过程</strong>中发挥着<strong>不可替代</strong>的作用。正是在这样的背景之下，<strong>英特尔</strong>在<strong>2018年</strong>发布了专门针对<strong>CPU</strong>、<strong>iGPU(集成显卡)<strong>、</strong>FPGA</strong>、<strong>ARM</strong>等<strong>硬件单元加速</strong>的<strong>模型部署</strong>与<strong>加速推理</strong>框架<strong>OpenVINO™</strong>。</p><p><strong>OpenVINO™</strong>是<strong>英特尔</strong>发布的一套支持<strong>快速开发视觉</strong>、<strong>语音识别</strong>、<strong>自然语言处理应用</strong>的框架，受益于<strong>人工智能技术</strong>的快速发展，框架采用了最新的<strong>人工智能神经网络</strong>包括<strong>卷积神经网络</strong>、<strong>循环神经网络</strong>、<strong>注意力机制网络</strong>等模型。实现<strong>视觉</strong>与<strong>非视觉</strong>任务的<strong>底层硬件加速</strong>、达到<strong>最佳性能</strong>，支持人工智能应用从<strong>云端</strong>到<strong>边缘</strong>的<strong>部署</strong>与<strong>推理</strong>全链路技术。</p><h1 id="二、PyTorch"><a href="#二、PyTorch" class="headerlink" title="二、PyTorch"></a>二、PyTorch</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>建议使用 <strong>Conda</strong> 安装 <strong><a class="link" href="https://pytorch.org/get-started/locally/">PyTorch<i class="fas fa-external-link-alt"></i></a></strong> ，本篇笔记也将以<strong>Conda安装方式</strong>为例。笔者的环境是<strong>Windows11</strong> + <strong><a class="link" href="https://www.anaconda.com/">Anaconda<i class="fas fa-external-link-alt"></i></a></strong> + <strong>CUDA11.6</strong>，而<strong>Linux</strong>或<strong>Mac</strong>平台的<strong>环境配置</strong>大同小异，这里就不过多赘述。</p><h3 id="1-CUDA版本"><a href="#1-CUDA版本" class="headerlink" title="1) CUDA版本"></a>1) CUDA版本</h3><p>以<strong>CUDA11+<strong>为例，首先需要安装</strong><a class="link" href="https://developer.nvidia.com/cuda-downloads">CUDA驱动<i class="fas fa-external-link-alt"></i></a></strong><br>安装<strong>完成</strong>后，<strong>检测安装版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/CUDA11.6.png" class="" title="CUDA11.6"><ul><li>安装<strong>CUDA版本</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-CPU版本"><a href="#2-CPU版本" class="headerlink" title="2) CPU版本"></a>2) CPU版本</h3><p>若没有NVIDIA系显卡或其不支持CUDA加速，则可选择安装仅CPU版本。</p><ul><li>安装<strong>仅CPU版本</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-检验"><a href="#2-检验" class="headerlink" title="2. 检验"></a>2. 检验</h2><p>在<strong>终端</strong>进入<strong>Python3控制台</strong>（笔者<code>python</code>命令<strong>默认链接</strong>到<strong>Python3</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>导入<strong>PyTorch</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br></pre></td></tr></table></figure><p>测试<code>torch.rand()</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.rand(5, 3)</span><br></pre></td></tr></table></figure><p>若<strong>安装成功</strong>，则会出现类似于以下的<strong>输出</strong></p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A3%80%E9%AA%8C%E5%AE%89%E8%A3%85.png" class="" title="检验安装"><p>测试是否支持<strong>CUDA</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%B5%8B%E8%AF%95CUDA.png" class="" title="测试CUDA"><h2 id="3-概念"><a href="#3-概念" class="headerlink" title="3. 概念"></a>3. 概念</h2><p>很多人学习<strong>深度学习框架</strong>面临的<strong>第一个问题</strong>就是<strong>其专业术语跟基本的编程概念</strong>与<strong>传统面向对象编程</strong>不同，这是<strong>初学者</strong>面临的<strong>第一个学习障碍</strong>。</p><p>在<strong>主流</strong>的<strong>面向对象编程语言</strong>中，<strong>结构化代码</strong>最常见的<strong>关键字</strong>是<code>if</code>、<code>else</code>、<code>while</code>、<code>for</code>等<strong>关键字</strong>，而在<strong>深度学习框架</strong>中<strong>编程模式</strong>主要是基于<strong>计算图</strong>、<strong>张量数据</strong>、<strong>自动微分</strong>、<strong>优化器</strong>等组件构成。</p><p><strong>面向对象编程</strong>运行的<strong>结果</strong>是<strong>交互式可视化</strong>的，而<strong>深度学习</strong>通过<strong>训练模型</strong>生成<strong>模型文件</strong>，然后再使用<strong>模型预测</strong>、<strong>本质数据流图</strong>的方式工作。所以学习<strong>深度学习框架</strong>首先必须理清<strong>深度学习编程</strong>中<strong>计算图</strong>、<strong>张量数据</strong>、<strong>自动微分</strong>、<strong>优化器</strong>这些<strong>基本术语概念</strong>，下面分别<strong>解释</strong>如下：</p><h3 id="1-张量"><a href="#1-张量" class="headerlink" title="1) 张量"></a>1) 张量</h3><p><strong>张量(Tensor)<strong>是</strong>深度学习框架</strong>中需要<strong>理解</strong>的<strong>最重要</strong>的一个<strong>概念</strong>，<strong>张量</strong>的本质是<strong>数据</strong>，在<strong>深度学习框架</strong>中一切的<strong>数据</strong>都可以看成<strong>张量</strong>。</p><p><strong>深度学习</strong>中的<strong>计算图</strong>是以<strong>张量数据</strong>为<strong>输入</strong>，通过<strong>算子运算</strong>，实现对整个<strong>计算图参数</strong>的<strong>评估优化</strong>。但是到底什么是<strong>张量</strong>？可以看下面这张图：</p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%BC%A0%E9%87%8F.png" class="" title="张量"><p>上图中<strong>标量</strong>、<strong>向量</strong>、<strong>数组</strong>、<strong>3D</strong>、<strong>4D</strong>、<strong>5D</strong>数据矩阵在<strong>深度学习框架</strong>中都被称为<strong>张量</strong>。可见在<strong>深度学习框架</strong>中所有的<strong>数据</strong>都是<strong>张量形式</strong>存在，<strong>张量</strong>是<strong>深度学习数据</strong>组织与存在一种<strong>数据类型</strong>。</p><h3 id="2-算子-操作数"><a href="#2-算子-操作数" class="headerlink" title="2) 算子/操作数"></a>2) 算子/操作数</h3><p><strong>深度学习</strong>主要是针对<strong>张量</strong>的<strong>数据操作</strong>。这些<strong>数据操作</strong>从<strong>简单</strong>到<strong>复杂</strong>，多数都是以<strong>矩阵计算</strong>的形式存在。最常见的<strong>矩阵操作</strong>就是<strong>加减乘除</strong>，此外<strong>卷积</strong>、<strong>池化</strong>、<strong>激活</strong>也是<strong>模型构建</strong>中非常有用的<strong>算子/操作数</strong>。<strong>Pytorch</strong>支持<strong>自定义算子操作</strong>，可以通过<strong>自定义算子</strong>实现复杂的<strong>网络结构</strong>，构建一些特殊的<strong>网络模型</strong>。<strong>张量</strong>跟<strong>算子/操作数</strong>一起构成了<strong>计算图</strong>，它们是也是<strong>计算图</strong>的<strong>基本组成要素</strong>。</p><h3 id="3-计算图"><a href="#3-计算图" class="headerlink" title="3) 计算图"></a>3) 计算图</h3><p><strong>深度学习</strong>基于<strong>计算图</strong>完成<strong>模型构建</strong>，实现<strong>数据</strong>在各个<strong>计算图节点</strong>之间流动，最终输出。因此<strong>计算图</strong>又被称为<strong>数据流图</strong>。</p><p>根据构建<strong>计算图</strong>的方式不同还可以分为<strong>静态图</strong>与<strong>动态图</strong>。<strong>Pytorch</strong>默认是基于<strong>动态图</strong>的方式构建<strong>计算图</strong>。</p><p><strong>动态图</strong>采用类似<strong>Python语法</strong>，可以<strong>随时运行</strong>，<strong>灵活修改调整</strong>。</p><p>而<strong>静态图</strong>则是<strong>效率优先</strong>，但是在图<strong>构建完成</strong>之前无法<strong>直接运行</strong>。</p><p>可以看出<strong>动态图</strong>更加趋向于开发者平时接触的<strong>面向对象</strong>的编程方式，也更容易被开发者理解与接受。</p><p>下图是一个简单的<strong>计算图</strong>示例：</p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E5%9B%BE.png" class="" title="计算图"><p>图中最底层三个<strong>节点</strong>表示<strong>计算图</strong>的<strong>输入张量数据节点（a、b、c）</strong>，剩下<strong>节点</strong>表示<strong>操作</strong>，带<strong>箭头</strong>的线段表示<strong>数据的流向</strong>。</p><h3 id="4-自动微分"><a href="#4-自动微分" class="headerlink" title="4) 自动微分"></a>4) 自动微分</h3><p>使用<strong>Pytorch</strong>构建<strong>神经网络（计算图）模型</strong>之后，一般都是通过<strong>反向传播</strong>进行<strong>训练</strong>，<strong>反向传播算法</strong>使用<strong>损失函数功能</strong>对<strong>神经网络</strong>中每个<strong>参数</strong>根据<strong>梯度</strong>进行<strong>参数值</strong>的<strong>调整</strong>。</p><p>为了计算这些<strong>梯度</strong>完成<strong>参数调整</strong>，<strong>深度学习框架</strong>中都会自带一个叫做<strong>自动微分</strong>的<strong>内置模块</strong>，来<strong>自动计算神经网络模型训练</strong>时的各个<strong>参数梯度值</strong>并完成<strong>参数值更新</strong>，这种技术就是<strong>深度学习框架</strong>中的<strong>自动微分</strong>。</p><h2 id="4-PyTorch基础操作"><a href="#4-PyTorch基础操作" class="headerlink" title="4. PyTorch基础操作"></a>4. PyTorch基础操作</h2><h3 id="1-张量的定义与声明"><a href="#1-张量的定义与声明" class="headerlink" title="1) 张量的定义与声明"></a>1) 张量的定义与声明</h3><p><strong>张量</strong>在<strong>PyTorch深度学习框架</strong>中表示<strong>数据</strong>，有几种不同的方式来<strong>创建</strong>与<strong>声明张量数据</strong>。</p><h4 id="a-常量声明"><a href="#a-常量声明" class="headerlink" title="a. 常量声明"></a>a. 常量声明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.tensor([[2., 3.], [4., 5.]])</span><br><span class="line">print(a, a.dtype)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[2., 3.],</span><br><span class="line">        [4., 5.]]) torch.float32</span><br></pre></td></tr></table></figure><p>其中<code>torch.tensor()</code>默认的<strong>数据类型</strong>是<strong>flaot32</strong>，这点从<code>a.dtype</code>的<strong>打印结果</strong>上也得了<strong>印证</strong>。</p><h4 id="b-转换声明"><a href="#b-转换声明" class="headerlink" title="b. 转换声明"></a>b. 转换声明</h4><p><code>torch.tensor</code>函数支持从<strong>NumPy数组</strong>直接转换为<strong>张量数据</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.tensor(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]))</span><br><span class="line">print(a, a.dtype)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1, 2],</span><br><span class="line">        [3, 4],</span><br><span class="line">        [5, 6],</span><br><span class="line">        [7, 8]], dtype=torch.int32) torch.int32</span><br></pre></td></tr></table></figure><p>函数返回的<strong>数据类型</strong>将会根据<strong>NumPy数组</strong>自动识别。</p><h4 id="c-初始化声明"><a href="#c-初始化声明" class="headerlink" title="c. 初始化声明"></a>c. 初始化声明</h4><p><strong>PyTorch框架</strong>支持类似<strong>MATLAB</strong>的<strong>数组初始化方式</strong>，可以定义数组的<strong>维度</strong>，然后<strong>初始化为零</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.zeros([2, 4], dtype=torch.float32)</span><br><span class="line">print(a, a.dtype)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[0., 0., 0., 0.],</span><br><span class="line">        [0., 0., 0., 0.]]) torch.float32</span><br></pre></td></tr></table></figure><p>可使用<code>torch.ones()</code>函数<strong>初始化为1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.ones([2, 4], dtype=torch.float32)</span><br><span class="line">print(a, a.dtype)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([[1., 1., 1., 1.],</span><br><span class="line">        [1., 1., 1., 1.]]) torch.float32</span><br></pre></td></tr></table></figure><h4 id="d-随机初始化声明"><a href="#d-随机初始化声明" class="headerlink" title="d. 随机初始化声明"></a>d. 随机初始化声明</h4><p>在<strong>实际的开发</strong>中，经常需要<strong>随机初始化</strong>一些<strong>张量</strong>，可通过<code>torch.rand()</code>等函数实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">v1 = torch.rand((2, 3))  # 数组大小: 2x3</span><br><span class="line">print("v1: ", v1)</span><br><span class="line"></span><br><span class="line">torch.initial_seed()  # 随机初始化种子</span><br><span class="line">v2 = torch.rand((2, 3))  # 数组大小: 2x3</span><br><span class="line">print("v2: ", v2)</span><br><span class="line"></span><br><span class="line">v3 = torch.randint(0, 255, (4, 4))  # 随机范围: 0~255, 数组大小: 4x4</span><br><span class="line">print("v3: ", v3)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v1:  tensor([[0.6751, 0.0717, 0.4391],</span><br><span class="line">        [0.8088, 0.1570, 0.1111]])</span><br><span class="line">v2:  tensor([[0.4927, 0.1516, 0.3794],</span><br><span class="line">        [0.9748, 0.6124, 0.1192]])</span><br><span class="line">v3:  tensor([[ 60,  88,  33,  53],</span><br><span class="line">        [193, 155,  76, 148],</span><br><span class="line">        [ 86,  47, 177, 192],</span><br><span class="line">        [ 65, 247, 252, 145]])</span><br></pre></td></tr></table></figure><h3 id="2-张量的操作"><a href="#2-张量的操作" class="headerlink" title="2) 张量的操作"></a>2) 张量的操作</h3><h4 id="a-计算图操作"><a href="#a-计算图操作" class="headerlink" title="a. 计算图操作"></a>a. 计算图操作</h4><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E5%9B%BE.png" class="" title="计算图"><p><strong>以上图为例</strong>，用<strong>代码</strong>将它<strong>实现</strong>出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.tensor([[2., 3.], [4., 5.]])</span><br><span class="line">b = torch.tensor([[10, 20], [30, 40]])</span><br><span class="line">c = torch.tensor([[0.1], [0.2]])</span><br><span class="line">x = a + b</span><br><span class="line">y = torch.matmul(x, c)</span><br><span class="line">print("y: ", y)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y:  tensor([[ 5.8000],</span><br><span class="line">        [12.4000]])</span><br></pre></td></tr></table></figure><h4 id="b-数据类型转换"><a href="#b-数据类型转换" class="headerlink" title="b. 数据类型转换"></a>b. 数据类型转换</h4><p>可用如下<strong>代码</strong>进行<strong>常见的数据类型转换</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">m = torch.tensor([1., 2., 3., 4., 5., 6], dtype=torch.float32)</span><br><span class="line">print(m, m.dtype)  # 原类型为float32</span><br><span class="line">print(m.double(), m.double().dtype)  # 转换为float64</span><br><span class="line">print(m.int(), m.int().dtype)  # 转换为int32</span><br><span class="line">print(m.long(), m.long().dtype)  # 转换为int64</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor([1., 2., 3., 4., 5., 6.]) torch.float32</span><br><span class="line">tensor([1., 2., 3., 4., 5., 6.], dtype=torch.float64) torch.float64</span><br><span class="line">tensor([1, 2, 3, 4, 5, 6], dtype=torch.int32) torch.int32</span><br><span class="line">tensor([1, 2, 3, 4, 5, 6]) torch.int64</span><br></pre></td></tr></table></figure><h4 id="c-维度转换"><a href="#c-维度转换" class="headerlink" title="c. 维度转换"></a>c. 维度转换</h4><p>可用如下<strong>代码</strong>进行<strong>常见的维度转换</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.arange(12.)  # 创建一个(0)~(12-1)区间顺序增长的一维张量</span><br><span class="line">print("a: ", a)</span><br><span class="line">b = torch.reshape(a, (3, 4))  # 转换为3x4</span><br><span class="line">print("b: ", b)</span><br><span class="line">c = torch.reshape(a, (-1, 6))  # 转换为?x6, ?从列数6推理得到</span><br><span class="line">print("c: ", c)</span><br><span class="line">d = torch.reshape(a, (-1,))  # 转换为1行</span><br><span class="line">print("d: ", d)</span><br><span class="line">e = torch.reshape(a, (1, 1, 3, 4))  # 转换为1x1x3x4</span><br><span class="line">print("e: ", e)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a:  tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])</span><br><span class="line">b:  tensor([[ 0.,  1.,  2.,  3.],</span><br><span class="line">        [ 4.,  5.,  6.,  7.],</span><br><span class="line">        [ 8.,  9., 10., 11.]])</span><br><span class="line">c:  tensor([[ 0.,  1.,  2.,  3.,  4.,  5.],</span><br><span class="line">        [ 6.,  7.,  8.,  9., 10., 11.]])</span><br><span class="line">d:  tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])</span><br><span class="line">e:  tensor([[[[ 0.,  1.,  2.,  3.],</span><br><span class="line">          [ 4.,  5.,  6.,  7.],</span><br><span class="line">          [ 8.,  9., 10., 11.]]]])</span><br></pre></td></tr></table></figure><p>除此之外，还可以使用基于<code>tensor</code>的<strong>维度转换</strong>函数<code>tensor.view()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">a = torch.arange(12.)  # 创建一个(0)~(12-1)区间顺序增长的一维张量</span><br><span class="line">print("a: ", a)</span><br><span class="line">b = a.view(3, 4)  # 转换为3x4</span><br><span class="line">print("b: ", b)</span><br><span class="line">c = a.view(-1, 6)  # 转换为?x6, ?从列数6推理得到</span><br><span class="line">print("c: ", c)</span><br><span class="line">d = a.view(-1, )  # 转换为1行</span><br><span class="line">print("d: ", d)</span><br><span class="line">e = a.view(1, 1, 3, 4)  # 转换为1x1x3x4</span><br><span class="line">print("e: ", e)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a:  tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])</span><br><span class="line">b:  tensor([[ 0.,  1.,  2.,  3.],</span><br><span class="line">        [ 4.,  5.,  6.,  7.],</span><br><span class="line">        [ 8.,  9., 10., 11.]])</span><br><span class="line">c:  tensor([[ 0.,  1.,  2.,  3.,  4.,  5.],</span><br><span class="line">        [ 6.,  7.,  8.,  9., 10., 11.]])</span><br><span class="line">d:  tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])</span><br><span class="line">e:  tensor([[[[ 0.,  1.,  2.,  3.],</span><br><span class="line">          [ 4.,  5.,  6.,  7.],</span><br><span class="line">          [ 8.,  9., 10., 11.]]]])</span><br></pre></td></tr></table></figure><h4 id="d-通道交换"><a href="#d-通道交换" class="headerlink" title="d. 通道交换"></a>d. 通道交换</h4><p><strong>通道交换</strong>是<strong>PyTorch</strong>中<strong>处理张量数据</strong>常用操作之一。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">x = torch.randn(3, 4, 5)  # 随机生成3x4x5的张量</span><br><span class="line">print("x: ", x)</span><br><span class="line">print("Size of x: ", x.size())</span><br><span class="line">y = x.transpose(0, 1)  # 对x的0维和1维进行交换(类似于转置)</span><br><span class="line">print("y: ", y)</span><br><span class="line">print("Size of y: ", y.size())</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">x:  tensor([[[-0.9932, -2.1915, -0.8266, -1.8298,  0.5624],</span><br><span class="line">         [ 0.2394, -0.3014,  0.3355,  0.9116,  1.1046],</span><br><span class="line">         [-0.2292, -0.2218, -0.8415, -1.7220, -0.5911],</span><br><span class="line">         [-0.0927, -0.2388,  0.3639, -2.3732, -0.7759]],</span><br><span class="line"></span><br><span class="line">        [[ 0.0079, -0.1990, -0.9282,  1.2543, -0.7065],</span><br><span class="line">         [-0.5910,  0.5737, -1.9680,  0.8392,  0.4500],</span><br><span class="line">         [ 0.8449,  1.4641, -0.4619, -0.3084,  0.0082],</span><br><span class="line">         [ 0.2436,  0.1285, -0.1126,  1.7058,  0.5177]],</span><br><span class="line"></span><br><span class="line">        [[-1.4615, -1.5110,  0.3243,  0.5885,  0.2760],</span><br><span class="line">         [-0.4879, -1.6806, -0.3202, -2.1921,  1.8557],</span><br><span class="line">         [-1.3212, -0.0511, -0.8245,  1.1485, -0.6952],</span><br><span class="line">         [-0.0165, -0.2692,  0.3099, -0.1915, -0.3242]]])</span><br><span class="line">Size of x:  torch.Size([3, 4, 5])</span><br><span class="line">y:  tensor([[[-0.9932, -2.1915, -0.8266, -1.8298,  0.5624],</span><br><span class="line">         [ 0.0079, -0.1990, -0.9282,  1.2543, -0.7065],</span><br><span class="line">         [-1.4615, -1.5110,  0.3243,  0.5885,  0.2760]],</span><br><span class="line"></span><br><span class="line">        [[ 0.2394, -0.3014,  0.3355,  0.9116,  1.1046],</span><br><span class="line">         [-0.5910,  0.5737, -1.9680,  0.8392,  0.4500],</span><br><span class="line">         [-0.4879, -1.6806, -0.3202, -2.1921,  1.8557]],</span><br><span class="line"></span><br><span class="line">        [[-0.2292, -0.2218, -0.8415, -1.7220, -0.5911],</span><br><span class="line">         [ 0.8449,  1.4641, -0.4619, -0.3084,  0.0082],</span><br><span class="line">         [-1.3212, -0.0511, -0.8245,  1.1485, -0.6952]],</span><br><span class="line"></span><br><span class="line">        [[-0.0927, -0.2388,  0.3639, -2.3732, -0.7759],</span><br><span class="line">         [ 0.2436,  0.1285, -0.1126,  1.7058,  0.5177],</span><br><span class="line">         [-0.0165, -0.2692,  0.3099, -0.1915, -0.3242]]])</span><br><span class="line">Size of y:  torch.Size([4, 3, 5])</span><br></pre></td></tr></table></figure><h4 id="e-寻找最大值"><a href="#e-寻找最大值" class="headerlink" title="e. 寻找最大值"></a>e. 寻找最大值</h4><p><strong>寻找最大值</strong>是<strong>PyTorch</strong>中<strong>处理张量数据</strong>常用操作之一。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">x = torch.tensor([2., 3., 4., 12., 3., 5., 8., 1.])</span><br><span class="line">print("x: ", x)</span><br><span class="line">print("Max of x: ", torch.argmax(x))  # 求x的最大值索引</span><br><span class="line"></span><br><span class="line">y = x.view(-1, 2)</span><br><span class="line">print("y: ", y)</span><br><span class="line">print("Max of y: ", torch.argmax(y))  # 求x的最大值索引(展开为1维)</span><br><span class="line">print("Max of y: ", torch.argmax(y, 0))  # 求x的0维最大值索引</span><br><span class="line">print("Max of y: ", torch.argmax(y, 1))  # 求x的1维最大值索引</span><br><span class="line">print("Max of y: ", y.argmax())  # 求x的最大值索引(展开为1维)</span><br><span class="line">print("Max of y: ", y.argmax(0))  # 求x的0维最大值索引</span><br><span class="line">print("Max of y: ", y.argmax(1))  # 求x的1维最大值索引</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x:  tensor([ 2.,  3.,  4., 12.,  3.,  5.,  8.,  1.])</span><br><span class="line">Max of x:  tensor(3)</span><br><span class="line">y:  tensor([[ 2.,  3.],</span><br><span class="line">        [ 4., 12.],</span><br><span class="line">        [ 3.,  5.],</span><br><span class="line">        [ 8.,  1.]])</span><br><span class="line">Max of y:  tensor(3)</span><br><span class="line">Max of y:  tensor([3, 1])</span><br><span class="line">Max of y:  tensor([1, 1, 1, 0])</span><br><span class="line">Max of y:  tensor(3)</span><br><span class="line">Max of y:  tensor([3, 1])</span><br><span class="line">Max of y:  tensor([1, 1, 1, 0])</span><br></pre></td></tr></table></figure><h4 id="f-CPU与GPU运算支持"><a href="#f-CPU与GPU运算支持" class="headerlink" title="f. CPU与GPU运算支持"></a>f. CPU与GPU运算支持</h4><p><strong>PyTorch</strong>支持<strong>CPU</strong>与<strong>GPU</strong>计算，默认创建的<strong>tensor</strong>是<strong>CPU</strong>版本的，要想使用<strong>GPU</strong>版本，首先需要检测<strong>GPU</strong>支持，然后转换为<strong>GPU</strong>数据，或者直接创建为<strong>GPU</strong>版本数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line">gpu = torch.cuda.is_available()</span><br><span class="line">for i in range(torch.cuda.device_count()):</span><br><span class="line">    print("name: ", torch.cuda.get_device_name(i))</span><br><span class="line">    x = torch.randn(2, 3)</span><br><span class="line">    if gpu:</span><br><span class="line">        print("x: ", x)</span><br><span class="line">        print("x.device: ", x.device)</span><br><span class="line">        print("x.cuda(): ", x.cuda())</span><br><span class="line">        print("x.cuda().device: ", x.cuda().device)</span><br><span class="line">    y = torch.tensor([1, 2, 3, 4], device="cuda:0")</span><br><span class="line">    print("y: ", y)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name:  NVIDIA GeForce RTX 2060</span><br><span class="line">x:  tensor([[-0.1489, -1.4650,  0.3720],</span><br><span class="line">        [ 0.8687,  0.0330, -0.4909]])</span><br><span class="line">x.device:  cpu</span><br><span class="line">x.cuda():  tensor([[-0.1489, -1.4650,  0.3720],</span><br><span class="line">        [ 0.8687,  0.0330, -0.4909]], device='cuda:0')</span><br><span class="line">x.cuda().device:  cuda:0</span><br><span class="line">y:  tensor([1, 2, 3, 4], device='cuda:0')</span><br></pre></td></tr></table></figure><h2 id="5-线性回归预测"><a href="#5-线性回归预测" class="headerlink" title="5. 线性回归预测"></a>5. 线性回归预测</h2><p><strong>线性回归</strong>的本质就是根据给出<strong>二维数据集</strong>来<strong>拟合生成一条直线</strong>，如下图：</p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.png" class="" title="线性回归"><p><strong>左图</strong>是一组<strong>圆点</strong>表示的<strong>二维坐标点数据集</strong>，<strong>直线</strong>是根据<strong>线性回归算法</strong>生成的。<br><strong>右图</strong>则是根据<strong>坐标点数据集</strong>生成的一个<strong>非线性回归</strong>例子。<br>现在我们已经可以很<strong>直观地</strong>了解什么是<strong>线性回归</strong>了，但<strong>线性回归</strong>是怎么找到这条<strong>直线</strong>的？<br>我们可以通过<strong>PyTorch</strong>构建一个简单的<strong>计算图</strong>来<strong>不断学习</strong>，最终得到一个<strong>足够逼近真实直线</strong>的<strong>参数方程</strong>，这个过程被称为<strong>线性回归</strong>的<strong>学习/训练</strong>过程。</p><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1) 原理"></a>1) 原理</h3><p>最常见的<strong>直线方程</strong>如下：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="10.335ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4568 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1823.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(2344.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3138.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4139,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container></p><p>假设有一组<strong>二维坐标点数据集</strong>：</p><table><thead><tr><th align="center"></th><th align="center">一</th><th align="center">二</th><th align="center">三</th><th align="center">四</th><th align="center">五</th><th align="center">六</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">1</td><td align="center">2</td><td align="center">0.5</td><td align="center">2.5</td><td align="center">2.6</td><td align="center">3.1</td></tr><tr><td align="center">y</td><td align="center">3.7</td><td align="center">4.6</td><td align="center">1.65</td><td align="center">5.68</td><td align="center">5.98</td><td align="center">6.95</td></tr></tbody></table><p><strong>随机赋值</strong>初始<strong>k</strong>、<strong>b</strong>两个<strong>参数</strong>，根据<strong>直线方程</strong>，通过<strong>x</strong>可以得到对应的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.6ex" height="2.568ex" role="img" focusable="false" viewBox="0 -930.1 707.1 1135.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP" transform="translate(108.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,555.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2322" d="M55 141Q55 149 72 174T125 234T209 303T329 360T478 388H526Q649 383 765 319Q814 291 858 250T923 179T944 141Q944 133 938 128T924 122Q914 124 912 125T902 139Q766 328 500 328Q415 328 342 308T225 258T150 199T102 148T84 124Q81 122 75 122Q55 127 55 141Z"></path></g></g></g></g></g></svg></mjx-container>，它跟 <strong>真实值y</strong> 之间的<strong>差值</strong>称为<strong>损失</strong>，最常见的损失是<strong>均值平方损失（MSE）</strong>，表示如下：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="22.802ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 10078.3 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(1051,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(1696,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(2737.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3793.6,0)"><g data-mml-node="mn" transform="translate(270,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="800" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5000.2,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="mo" transform="translate(6444.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6833.2,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7545.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mover" transform="translate(8545.7,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="OP" transform="translate(108.6,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,555.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2322" d="M55 141Q55 149 72 174T125 234T209 303T329 360T478 388H526Q649 383 765 319Q814 291 858 250T923 179T944 141Q944 133 938 128T924 122Q914 124 912 125T902 139Q766 328 500 328Q415 328 342 308T225 258T150 199T102 148T84 124Q81 122 75 122Q55 127 55 141Z"></path></g></g></g><g data-mml-node="msup" transform="translate(9252.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container><br>假设<strong>当前参数</strong>为<strong>A(k, b)<strong>，</strong>新参数</strong>为<strong>B(k, b)<strong>，我们可以通过下面的</strong>公式</strong>来<strong>更新k</strong>、<strong>b</strong>两个参数：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="29.647ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 13103.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1139,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1660,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2104.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(2533.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3200.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4256.2,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(5015.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5404.2,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(5925.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6369.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(6798.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7410.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8410.3,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9129.6,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(9851.8,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(10328.8,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10779.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(11308.8,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(11828.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12217.8,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12714.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><br>其中<strong>η</strong>称为<strong>学习率</strong>，<strong>grad(η)<strong>是对应的</strong>参数梯度</strong>，可根据<strong>深度学习框架</strong>的<strong>自动微分机制</strong>得到。这样就实现了<strong>线性回归模型</strong>的<strong>构建</strong>与<strong>训练</strong>过程，最终可根据输入的<strong>迭代次数</strong>运行并输出<strong>回归直线</strong>的两个参数，从而完成<strong>线性回归</strong>的求解。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2) 实现"></a>2) 实现</h3><p><strong>PyTorch</strong>提供了丰富的函数，可以帮助我们快速搭建<strong>线性回归模型</strong>并完成<strong>训练预测</strong>。</p><h4 id="a-构建数据集"><a href="#a-构建数据集" class="headerlink" title="a. 构建数据集"></a>a. 构建数据集</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.array([1, 2, 0.5, 2.5, 2.6, 3.1], dtype=np.float32).reshape((-1, 1))</span><br><span class="line">y = np.array([3.7, 4.6, 1.65, 5.68, 5.98, 6.95], dtype=np.float32).reshape(-1, 1)</span><br></pre></td></tr></table></figure><h4 id="b-构建线性回归模型"><a href="#b-构建线性回归模型" class="headerlink" title="b. 构建线性回归模型"></a>b. 构建线性回归模型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 继承torch.nn.Module</span><br><span class="line">class LinearRegressionModel(torch.nn.Module):</span><br><span class="line">    def __init__(self, input_dim, output_dim):</span><br><span class="line">        super(LinearRegressionModel, self).__init__()</span><br><span class="line">        self.linear = torch.nn.Linear(input_dim, output_dim)  # 对应直线方程y = kx + b</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return self.linear(x)  # 重载forward(), 根据模型计算并返回预测结果</span><br></pre></td></tr></table></figure><h4 id="c-创建损失功能与优化器"><a href="#c-创建损失功能与优化器" class="headerlink" title="c. 创建损失功能与优化器"></a>c. 创建损失功能与优化器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data_input_dim = 1  # 输入维度为1</span><br><span class="line">data_output_dim = 1  # 输出维度为1</span><br><span class="line">model = LinearRegressionModel(data_input_dim, data_output_dim)  # 实例化</span><br><span class="line">criterion = torch.nn.MSELoss()  # 均值平方损失</span><br><span class="line">learning_rate = 0.01  # 学习率</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)  # 优化器, 求解参数梯度</span><br></pre></td></tr></table></figure><h4 id="d-迭代训练"><a href="#d-迭代训练" class="headerlink" title="d. 迭代训练"></a>d. 迭代训练</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 迭代训练</span><br><span class="line">for index in range(100):</span><br><span class="line">    # 将NumPy数组转为torch变量</span><br><span class="line">    input_x = torch.from_numpy(data_x).requires_grad_()  # 需要为其计算梯度</span><br><span class="line">    input_y = torch.from_numpy(data_y)</span><br><span class="line">    optimizer.zero_grad()  # 梯度置零</span><br><span class="line">    output_y = model(input_x)  # 得到输出</span><br><span class="line">    loss = criterion(output_y, input_y)  # 计算损失</span><br><span class="line">    loss.backward()  # 计算梯度，反向传播</span><br><span class="line">    optimizer.step()  # 更新参数</span><br><span class="line">    print('迭代索引: {}, 损失: {}'.format(index, loss.item()))</span><br></pre></td></tr></table></figure><h4 id="e-绘制结果"><a href="#e-绘制结果" class="headerlink" title="e. 绘制结果"></a>e. 绘制结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">predicted_y = model(torch.from_numpy(data_x).requires_grad_()).data.numpy()  # 得到预测结果</span><br><span class="line">plt.plot(data_x, data_y, 'go', label='True data', alpha=0.5)  # 绘制数据集</span><br><span class="line">plt.plot(data_x, predicted_y, '--', label='Predictions', alpha=0.5)  # 绘制回归直线</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>最终<strong>完整代码</strong>为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import torch</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line"></span><br><span class="line">data_x = np.array([1, 2, 0.5, 2.5, 2.6, 3.1], dtype=np.float32).reshape((-1, 1))</span><br><span class="line">data_y = np.array([3.7, 4.6, 1.65, 5.68, 5.98, 6.95], dtype=np.float32).reshape(-1, 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 继承torch.nn.Module</span><br><span class="line">class LinearRegressionModel(torch.nn.Module):</span><br><span class="line">    def __init__(self, input_dim, output_dim):</span><br><span class="line">        super(LinearRegressionModel, self).__init__()</span><br><span class="line">        self.linear = torch.nn.Linear(input_dim, output_dim)  # 对应直线方程y = kx + b</span><br><span class="line"></span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return self.linear(x)  # 重载forward(), 根据模型计算并返回预测结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_input_dim = 1  # 输入维度为1</span><br><span class="line">data_output_dim = 1  # 输出维度为1</span><br><span class="line">model = LinearRegressionModel(data_input_dim, data_output_dim)  # 实例化</span><br><span class="line">criterion = torch.nn.MSELoss()  # 均值平方损失</span><br><span class="line">learning_rate = 0.01  # 学习率</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)  # 优化器, 求解参数梯度</span><br><span class="line"></span><br><span class="line"># 迭代训练</span><br><span class="line">for index in range(100):</span><br><span class="line">    # 将NumPy数组转为torch变量</span><br><span class="line">    input_x = torch.from_numpy(data_x).requires_grad_()  # 需要为其计算梯度</span><br><span class="line">    input_y = torch.from_numpy(data_y)</span><br><span class="line">    optimizer.zero_grad()  # 梯度置零</span><br><span class="line">    output_y = model(input_x)  # 得到输出</span><br><span class="line">    loss = criterion(output_y, input_y)  # 计算损失</span><br><span class="line">    loss.backward()  # 计算梯度，反向传播</span><br><span class="line">    optimizer.step()  # 更新参数</span><br><span class="line">    print('迭代索引: {}, 损失: {}'.format(index, loss.item()))</span><br><span class="line"></span><br><span class="line">predicted_y = model(torch.from_numpy(data_x).requires_grad_()).data.numpy()  # 得到预测结果</span><br><span class="line">plt.plot(data_x, data_y, 'go', label='True data', alpha=0.5)  # 绘制数据集</span><br><span class="line">plt.plot(data_x, predicted_y, '--', label='Predictions', alpha=0.5)  # 绘制回归直线</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>最终<strong>得到</strong>：</p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%BB%93%E6%9E%9C.png" class="" title="结果"><h1 id="三、OpenVINO™"><a href="#三、OpenVINO™" class="headerlink" title="三、OpenVINO™"></a>三、OpenVINO™</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p><strong>OpenVINO™ ToolKit</strong>主要功能包含：</p><ol><li>支持<strong>边缘卷积神经网络</strong>的<strong>推理加速</strong></li><li>支持在<strong>英特尔CPU</strong>、<strong>HD卡</strong>、<strong>NCS2</strong>、<strong>FPGA</strong>等设备上的<strong>混合执行/异构计算</strong>执行</li><li>通过大量的<strong>预训练模型库</strong>做到<strong>加速</strong>从<strong>产品原型</strong>到<strong>市场化</strong>的过程</li><li>支持传统的<strong>计算机视觉标准库</strong>，包括<strong>OpenCV</strong>、<strong>OpenCL</strong>等</li></ol><p><strong>人工智能应用/模型</strong>的开发在<strong>第二阶段模型部署</strong>中，可以借助<strong>OpenVINO™ ToolKit</strong>的<strong>压缩量化</strong>、<strong>推理加速能力</strong>达到<strong>模型推理</strong>时的<strong>最佳性能</strong>（速度与精度）。相比<strong>第一阶段</strong>，<strong>第二阶段</strong>更为<strong>重要</strong>，它决定模型最终是否可以实现<strong>商业目标</strong>，带来<strong>商业价值</strong>。<strong>英特尔</strong>发布的<strong>开源版本OpenVINO™ ToolKit</strong>支持从<strong>云端</strong>到<strong>边缘</strong>的<strong>模型部署</strong>，通过自身人工智能技术<strong>优势</strong>着力解决人工智能<strong>落地环节</strong>的<strong>商业痛点</strong>。</p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/openvino.png" class="" title="openvino"><p>上图中<strong>矩形框内</strong>的部分是<strong>OpenVINO™的核心功能</strong>。<strong>矩形框外</strong>表示<strong>第三方提供的模型与上层应用</strong>。</p><h2 id="2-功能与组件"><a href="#2-功能与组件" class="headerlink" title="2. 功能与组件"></a>2. 功能与组件</h2><h3 id="深度学习模型优化器（Deep-Learning-Model-Optimizer）"><a href="#深度学习模型优化器（Deep-Learning-Model-Optimizer）" class="headerlink" title="深度学习模型优化器（Deep Learning Model Optimizer）"></a>深度学习模型优化器（Deep Learning Model Optimizer）</h3><p><strong>跨平台</strong>的<strong>命令行工具包</strong>，支持导入来自<strong>主流</strong>的<strong>深度学习框架</strong>的<strong>模型</strong>，<strong>模型文件</strong>可能由<strong>TensorFlow</strong>、<strong>PyTorch</strong>、<strong>Caffe</strong>、<strong>MXNet</strong>、<strong>ONNX</strong>等<strong>深度学习框架</strong>与<strong>工具</strong>生成。<strong>模型优化器</strong>支持对<strong>导入模型</strong>的<strong>转换</strong>、<strong>优化</strong>、<strong>导出</strong>。</p><h3 id="深度学习推理引擎（Deep-Learning-Inference-Engine）"><a href="#深度学习推理引擎（Deep-Learning-Inference-Engine）" class="headerlink" title="深度学习推理引擎（Deep Learning Inference Engine）"></a>深度学习推理引擎（Deep Learning Inference Engine）</h3><p>一个统一的<strong>API接口层</strong>，支持对<strong>深度学习模型</strong>的<strong>高效推理</strong>，支持<strong>跨操作系统</strong>、<strong>多种底层硬件</strong>的<strong>异构模式推理计算</strong>，这些硬件包括<strong>Intel CPU</strong>、<strong>Intel集成显卡</strong>、<strong>NCS2计算棒</strong>、<strong>VPU</strong>、<strong>FPGA</strong>等。</p><h3 id="推理引擎样例（Inference-Engine-Sample）"><a href="#推理引擎样例（Inference-Engine-Sample）" class="headerlink" title="推理引擎样例（Inference Engine Sample）"></a>推理引擎样例（Inference Engine Sample）</h3><p>一系列的<strong>示例代码文件</strong>，通过<strong>控制台</strong>运行演示如何在<strong>第三方应用</strong>中<strong>集成推理引擎</strong>开发。</p><h3 id="深度学习工作台（Deep-Learning-Workbench）"><a href="#深度学习工作台（Deep-Learning-Workbench）" class="headerlink" title="深度学习工作台（Deep Learning Workbench）"></a>深度学习工作台（Deep Learning Workbench）</h3><p>一个基于<strong>WEB端</strong>的<strong>智能化图形交互界面</strong>，允许你<strong>更加灵活</strong>地尝试<strong>OpenVINO™</strong>提供各种<strong>组件功能</strong>。</p><h3 id="后训练优化工具（Post-Training-Optimization-Tool）"><a href="#后训练优化工具（Post-Training-Optimization-Tool）" class="headerlink" title="后训练优化工具（Post-Training Optimization Tool）"></a>后训练优化工具（Post-Training Optimization Tool）</h3><p>一个<strong>验证</strong>与<strong>执行量化INT8精度</strong>的工具，此功能包含在<strong>模型优化器</strong>命令行文件夹下面。</p><h3 id="开放的模型库（Open-Model-Zoo）"><a href="#开放的模型库（Open-Model-Zoo）" class="headerlink" title="开放的模型库（Open Model Zoo）"></a>开放的模型库（Open Model Zoo）</h3><p><strong><a class="link" href="https://github.com/openvinotoolkit/open_model_zoo">OMZ<i class="fas fa-external-link-alt"></i></a><strong>主要有</strong>两个部分</strong>。<br><strong>第一部分</strong>是<strong>Demos教程</strong>，主要包括<strong>Python</strong>与<strong>C++<strong>的</strong>SDK</strong>教程，教程主要涉及<strong>计算机视觉</strong>与<strong>语音识别</strong>相关的内容。<br><strong>第二部分</strong>是<strong>模型</strong>，包含<strong>Intel提供</strong>与<strong>其它公开支持OpenVINO™部署推理</strong>的<strong>模型</strong>，<strong>总数超过240+<strong>，对于很多</strong>常见的视觉任务</strong>都<strong>无需再训练模型</strong>，<strong>直接使用模型</strong>再<strong>通过推理引擎部署</strong>即可。<br>需要注意的是<code>public</code><strong>（非Intel提供）</strong>部分的模型，需要开发者自己<strong>转换</strong>为<strong>IR格式中间文件</strong>，才能通过<strong>推理引擎部署调用</strong>。</p><h3 id="OpenCV组件"><a href="#OpenCV组件" class="headerlink" title="OpenCV组件"></a>OpenCV组件</h3><p><strong>OpenVINO™ ToolKit</strong>在支持<strong>深度学习模型部署</strong>的同时，还把<strong>OpenCV</strong>作为<strong>支持传统视觉算法处理</strong>的组件，<strong>集成</strong>到了<strong>OpenVINO™ ToolKit</strong>中，因而可以<strong>自动获取OpenCV框架</strong>的支持，这对<strong>熟悉OpenCV框架</strong>的开发者来说是一个<strong>大大的福利</strong>！并且<strong>OpenVINO™</strong>提供的<strong>官方教程</strong>中，<strong>图像预处理</strong>与<strong>推理引擎</strong>输出的<strong>后处理</strong>，<strong>图像与图形绘制</strong>等均采用了<strong>OpenCV</strong>相关<strong>函数</strong>完成，对大多数<strong>OpenCV</strong>开发者来说看这些代码<strong>毫无违和感</strong>。</p><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h2><p>打开<a class="link" href="https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html">Intel® Distribution of OpenVINO™ Toolkit<i class="fas fa-external-link-alt"></i></a></p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%89%E8%A3%85.png" class="" title="安装"><p>如上图，由于后续基本上采用Python开发，所以我们选择PIP的方式安装</p><img lazyload="" alt="image" data-src="/2022/03/22/PyTorch-OpenVINO%E2%84%A2-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AE%89%E8%A3%852.png" class="" title="安装2"><p>选择PyTorch框架，得到如下安装代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openvino-dev[pytorch]==2022.1.0</span><br></pre></td></tr></table></figure><p>未完待续…</p><h1 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h1><ul><li><a class="link" href="https://mp.weixin.qq.com/s/qWPYYXl50cYgkCO6nOg_gQ">PyTorch + OpenVINO™ 开发实战系列教程 第一篇<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://mp.weixin.qq.com/s/NaUijeZ0mDho49vXvDzCjQ">PyTorch + OpenVINO™ 开发实战系列教程 第二篇<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;PyTorch&lt;/strong&gt;是&lt;strong&gt;开源&lt;/strong&gt;的&lt;strong&gt;深度学习框架&lt;/s</summary>
      
    
    
    
    
    <category term="PyTorch" scheme="https://acmezone.top/tags/PyTorch/"/>
    
    <category term="OpenVINO" scheme="https://acmezone.top/tags/OpenVINO/"/>
    
    <category term="深度学习" scheme="https://acmezone.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉：OpenCV学习笔记</title>
    <link href="https://acmezone.top/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-10T05:54:59.000Z</published>
    <updated>2024-03-23T15:30:00.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><strong>OpenCV</strong>是<strong>计算机视觉</strong>领域一款热门的<strong>框架</strong>，<strong>人脸识别</strong>、<strong>二维码处理</strong>、<strong>深度学习</strong>中都能见到它的身影~</p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="1-C-版安装"><a href="#1-C-版安装" class="headerlink" title="1. C++版安装"></a>1. C++版安装</h2><blockquote><p>在<a class="link" href="https://opencv.org/releases/">官网<i class="fas fa-external-link-alt"></i></a>中下载<strong>OpenCV</strong>源码，本文以<strong>OpenCV – 4.5.5</strong>为例。</p></blockquote><p><strong>安装</strong>相关<strong>依赖</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgtk2.0-dev</span><br></pre></td></tr></table></figure><p><strong>解压</strong>至任意目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip opencv-4.5.5.zip</span><br></pre></td></tr></table></figure><p>进入解压后的文件夹，创建<code>build</code>文件夹并进入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd opencv-4.5.5</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br></pre></td></tr></table></figure><p><strong>CMake</strong>生成<strong>Makefile</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local/ ..</span><br></pre></td></tr></table></figure><p>编译<strong>OpenCV</strong>（<code>-j</code>为线程数，视<strong>实际情况</strong>更改，太大可能会<strong>爆内存</strong>，实在不行就<strong>单线程</strong>吧hhh）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><strong>验证</strong>（运行源码<strong>根目录下<code>samples/cpp/example_cmake</code><strong>后弹出<code>Hello OpenCV</code>即为</strong>成功</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ../samples/cpp/example_cmake</span><br><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">./opencv_example</span><br></pre></td></tr></table></figure><img lazyload="" alt="image" data-src="/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Hello_OpenCV.png" class="" title="Hello_OpenCV"><h2 id="2-Python版安装"><a href="#2-Python版安装" class="headerlink" title="2. Python版安装"></a>2. Python版安装</h2><p>通过<code>pip</code>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install opencv-python -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h1 id="三、基础用法"><a href="#三、基础用法" class="headerlink" title="三、基础用法"></a>三、基础用法</h1><blockquote><p>本文主要记录基于<strong>Python</strong>的<strong>OpenCV</strong>笔记</p></blockquote><h2 id="1-导入OpenCV"><a href="#1-导入OpenCV" class="headerlink" title="1. 导入OpenCV"></a>1. 导入OpenCV</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br></pre></td></tr></table></figure><h2 id="2-读取图片-imread"><a href="#2-读取图片-imread" class="headerlink" title="2. 读取图片 - imread()"></a>2. 读取图片 - imread()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread("ari.jpg")</span><br></pre></td></tr></table></figure><p>第一个参数是<strong>图片的路径</strong>，<strong>绝对路径</strong>和<strong>相对路径</strong>均可。<br>第二个参数是<strong>可选参数</strong>，可填以下内容：</p><ul><li><strong>cv2.IMREAD_COLOR</strong>（默认）： 加载<strong>彩色图像</strong>。任何图像的<strong>透明度</strong>都将被忽略。</li><li><strong>cv2.IMREAD_GRAYSCALE</strong>：以<strong>灰度模式</strong>加载图像。</li><li><strong>cv2.IMREAD_UNCHANGED</strong>：保留读取图片原有<strong>颜色通道</strong>（包括<strong>透明通道</strong>）。</li></ul><h2 id="3-显示图片-imshow"><a href="#3-显示图片-imshow" class="headerlink" title="3. 显示图片 - imshow()"></a>3. 显示图片 - imshow()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imshow("ari", img)</span><br></pre></td></tr></table></figure><p>第一个参数是窗口的<strong>标题</strong>，第二个参数传入读取的<strong>img对象</strong>。</p><img lazyload="" alt="image" data-src="/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ari.png" class="" title="ari"><h2 id="4-调整窗口-namedWindow"><a href="#4-调整窗口-namedWindow" class="headerlink" title="4. 调整窗口 - namedWindow()"></a>4. 调整窗口 - namedWindow()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.namedWindow("ari")</span><br></pre></td></tr></table></figure><p>第一个参数是窗口的<strong>标题</strong>。<br>第二个参数是<strong>可选参数</strong>，可填以下内容：</p><ul><li><strong>cv2.WINDOW_NORMAL</strong>：可调整窗口<strong>大小</strong>。</li><li><strong>cv2.WINDOW_AUTOSIZE</strong>（默认）：窗口内容图片为<strong>真实大小</strong>，窗口大小<strong>不可调整</strong>。</li><li><strong>cv2.WINDOW_OPENGL</strong>：支持<strong>OpenGL</strong>。</li></ul><h2 id="5-等待按键-waitKey"><a href="#5-等待按键-waitKey" class="headerlink" title="5. 等待按键 - waitKey()"></a>5. 等待按键 - waitKey()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure><p>当调用<code>imshow()</code>后，需要再调用waitKey()控制窗口显示时间。<br>当参数<strong>≤0</strong>时，则窗口一直等待，返回 <strong>-1</strong> 或<strong>按键值</strong>，当为<code>$time</code>时，则窗口显示<code>$time</code>ms，在此期间<strong>按键</strong>则返回<strong>按键值</strong>，否则返回 <strong>-1</strong> 。</p><h2 id="6-保存图片-imwrite"><a href="#6-保存图片-imwrite" class="headerlink" title="6. 保存图片 - imwrite()"></a>6. 保存图片 - imwrite()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imwrite("ari_out.jpg", img)</span><br></pre></td></tr></table></figure><p>第一个参数是保存的<strong>路径及名称</strong>，第二个参数传入读取的<strong>img对象</strong>。</p><h1 id="三、进阶操作"><a href="#三、进阶操作" class="headerlink" title="三、进阶操作"></a>三、进阶操作</h1><h2 id="1-读取网络摄像机rtsp流"><a href="#1-读取网络摄像机rtsp流" class="headerlink" title="1. 读取网络摄像机rtsp流"></a>1. 读取网络摄像机rtsp流</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">cam = cv2.VideoCapture("rtsp://admin:123456@192.168.56.56:554/ch01.264")  # rtsp流地址</span><br><span class="line">while cam.isOpened():</span><br><span class="line">    flag, img = cam.read()</span><br><span class="line">    cv2.imshow('Cam', img)</span><br><span class="line">    cv2.waitKey(1)  # 1ms刷新一次</span><br></pre></td></tr></table></figure><h2 id="2-单目相机标定与坐标系转换"><a href="#2-单目相机标定与坐标系转换" class="headerlink" title="2. 单目相机标定与坐标系转换"></a>2. 单目相机标定与坐标系转换</h2><p>最近有一个项目需要将<strong>单目摄像机</strong>拍摄到的照片中的<strong>像素坐标</strong>转换为<strong>世界坐标</strong>，于是研究了一下相关的<strong>原理</strong>和<strong>代码</strong>。</p><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1) 原理"></a>1) 原理</h3><p>在<strong>相机模型</strong>中，我们需要理解<strong>四个坐标系</strong>以及它们之间的<strong>关系</strong>：</p><ul><li><strong>像素坐标系（u, v）</strong></li><li><strong>图像坐标系（x, y）</strong></li><li><strong>相机坐标系（X<sub>c</sub>, Y<sub>c</sub>, Z<sub>c</sub>）</strong></li><li><strong>世界坐标系（X<sub>w</sub>, Y<sub>w</sub>, Z<sub>w</sub>）</strong><br>如图：<img lazyload="" alt="image" data-src="/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pinhole_camera_model.png" class="" title="来源于opencv-4.5.5/modules/calib3d/doc/pics/pinhole_camera_model.png"></li></ul><h4 id="a-像素坐标系（u-v）与图像坐标系（x-y）转换"><a href="#a-像素坐标系（u-v）与图像坐标系（x-y）转换" class="headerlink" title="a. 像素坐标系（u, v）与图像坐标系（x, y）转换"></a>a. 像素坐标系（u, v）与图像坐标系（x, y）转换</h4><img lazyload="" alt="image" data-src="/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/xyuv.png" class="" title="xyuv"><p>假设<strong>像素</strong>在<strong>u轴</strong>和<strong>v轴</strong>方向上的<strong>物理尺寸</strong>为<strong>dx</strong>和<strong>dy</strong>。<br>根据上图可以推导出该<strong>公式</strong>：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.365ex" xmlns="http://www.w3.org/2000/svg" width="13.798ex" height="5.86ex" role="img" focusable="false" viewBox="0 -1545.1 6098.7 2590.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,795.1)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1905.6,0)"><g data-mml-node="mi" transform="translate(403.8,394) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="972.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3339.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(4340.2,0)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-555.2)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(762.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1818.6,0)"><g data-mml-node="mi" transform="translate(403.8,485) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="914.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3195,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(4195.2,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6098.7,0) translate(0 250)"></g></g></g></g></svg></mjx-container><br>转换为<strong>矩阵形式</strong>：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -4.381ex" xmlns="http://www.w3.org/2000/svg" width="27.197ex" height="9.893ex" role="img" focusable="false" viewBox="0 -2436.3 12021.1 4372.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(43.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2183.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3239.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1282.3)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1292.3)"></path><svg width="667" height="974.6" y="-237.3" x="0" viewBox="0 243.7 667 974.6"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,2.428)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1571.4)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(429.3,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="972.2" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(2539.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4366.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-46.3)"><g data-mml-node="mtd" transform="translate(356.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2212.2,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(400.3,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="914.2" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(4409.8,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1686.3)"><g data-mml-node="mtd" transform="translate(356.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2539.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4620.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(6041.9,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1282.3)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1292.3)"></path><svg width="667" height="974.6" y="-237.3" x="0" viewBox="0 243.7 667 974.6"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,2.428)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(10115.1,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(41,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g></g></svg></mjx-container></p><h4 id="b-相机坐标系（Xc-Yc-Zc）与世界坐标系（Xw-Yw-Zw）转换"><a href="#b-相机坐标系（Xc-Yc-Zc）与世界坐标系（Xw-Yw-Zw）转换" class="headerlink" title="b. 相机坐标系（Xc, Yc, Zc）与世界坐标系（Xw, Yw, Zw）转换"></a>b. 相机坐标系（X<sub>c</sub>, Y<sub>c</sub>, Z<sub>c</sub>）与世界坐标系（X<sub>w</sub>, Y<sub>w</sub>, Z<sub>w</sub>）转换</h4><img lazyload="" alt="image" data-src="/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/WC.png" class="" title="WC"><p>从<strong>世界坐标系</strong>变换到<strong>相机坐标系</strong>属于<strong>刚体变换</strong>，物体<strong>不会发生形变</strong>，只需进行<strong>旋转</strong>和<strong>平移</strong>。<br>如上图，<strong>R</strong>表示<strong>旋转矩阵</strong>，<strong>T</strong>表示<strong>旋转向量</strong>。<br>用<strong>矩阵</strong>表示其<strong>关系</strong>：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="38.019ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 16804.6 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(72.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(358.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1884.2,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2829,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3884.7,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(7647.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(7647.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(7647.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(524.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3073.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5622.8,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(7907.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(9334.9,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(14053.3,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(72.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2084.3,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g></g></g></svg></mjx-container></p><p>令：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -3.733ex" xmlns="http://www.w3.org/2000/svg" width="55.609ex" height="8.597ex" role="img" focusable="false" viewBox="0 -2150 24579.1 3800"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2092.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g></g></g><g data-mml-node="mo" transform="translate(7314.3,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(10073.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(10518.5,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(11500.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(12556.1,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(1687.6,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(14910.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(15355.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(16133.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(17188.9,0)"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mtable" transform="translate(278,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(3778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g><g data-mml-node="mo" transform="translate(21244.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(21689.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(22467.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(23523.1,0)"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mtable" transform="translate(278,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></svg></mjx-container><br>因此可表示为<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="23.352ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 10321.7 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(72.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(358.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1884.2,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2829,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3884.7,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g><g data-mml-node="mtd" transform="translate(1759,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(129.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1861,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2991,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g><g data-mml-node="mrow" transform="translate(7570.4,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(72.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2084.3,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g></g></g></svg></mjx-container></p><h4 id="c-相机坐标系（Xc-Yc-Zc）与图像坐标系（x-y）转换"><a href="#c-相机坐标系（Xc-Yc-Zc）与图像坐标系（x-y）转换" class="headerlink" title="c. 相机坐标系（Xc, Yc, Zc）与图像坐标系（x, y）转换"></a>c. 相机坐标系（X<sub>c</sub>, Y<sub>c</sub>, Z<sub>c</sub>）与图像坐标系（x, y）转换</h4><img lazyload="" alt="image" data-src="/2022/03/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%EF%BC%9AOpenCV%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Xx.png" class="" title="Xx"><p>如图，根据<strong>相似三角形原理</strong>，可得：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.827ex" xmlns="http://www.w3.org/2000/svg" width="10.322ex" height="6.785ex" role="img" focusable="false" viewBox="0 -1749.5 4562.2 2999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M661 -1243L655 -1249H622L604 -1240Q503 -1190 434 -1107T348 -909Q346 -897 346 -499L345 -98L343 -82Q335 3 287 87T157 223Q146 232 145 236Q144 240 144 250Q144 265 145 268T157 278Q242 333 288 417T343 583L345 600L346 1001Q346 1398 348 1410Q379 1622 600 1739L622 1750H655L661 1744V1727V1721Q661 1712 661 1710T657 1705T648 1700T630 1690T602 1668Q589 1659 574 1643T531 1593T484 1508T459 1398Q458 1389 458 1001Q458 614 457 605Q441 435 301 316Q254 277 202 251L250 222Q260 216 301 185Q443 66 457 -104Q458 -113 458 -501Q458 -888 459 -897Q463 -944 478 -988T509 -1060T548 -1114T580 -1149T602 -1167Q620 -1183 634 -1192T653 -1202T659 -1207T661 -1220V-1226V-1243Z"></path></g><g data-mml-node="mtable" transform="translate(806,0)"><g data-mml-node="mtr" transform="translate(0,806.6)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1905.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mfrac" transform="translate(2455.6,0)"><g data-mml-node="msub" transform="translate(220,451.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="msub" transform="translate(271.3,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="1060.7" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-784.5)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1823.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mfrac" transform="translate(2373.6,0)"><g data-mml-node="msub" transform="translate(256.1,451.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="958.1" height="60" x="120" y="220"></rect></g></g></g></g><g data-mml-node="mo" transform="translate(4562.2,0) translate(0 250)"></g></g></g></g></svg></mjx-container><br>可<strong>变换</strong>为：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.148ex" xmlns="http://www.w3.org/2000/svg" width="15.701ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 6939.8 2399"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,600)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mo" transform="translate(1294.4,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2644.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3700.2,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4472.4,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(4972.6,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-600)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mo" transform="translate(1294.4,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(1794.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2562.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3618.2,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4390.4,0)"><path data-c="B7" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(4890.6,0)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(6939.8,0) translate(0 250)"></g></g></g></g></svg></mjx-container><br>因此可用<strong>矩阵</strong>表示：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="30.838ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 13630.2 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mrow" transform="translate(1238.8,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(41,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(3422.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4478.4,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mtd" transform="translate(1575,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3100,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4600,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(25,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1550,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mtd" transform="translate(3100,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4600,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(25,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1575,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3100,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(4600,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5767,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(11079.1,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(72.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(358.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1884.2,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g></g></g></svg></mjx-container></p><h4 id="d-综合公式"><a href="#d-综合公式" class="headerlink" title="d. 综合公式"></a>d. 综合公式</h4><p>将上面的<strong>矩阵公式</strong>综合，即可得出以下<strong>公式</strong>：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="42.583ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 18821.5 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mrow" transform="translate(1238.8,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(43.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(3422.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4478.4,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1018.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.114)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1422.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3896.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,22.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1977.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3940.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1422.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4151.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7072.5,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1018.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.114)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(12384.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g><g data-mml-node="mtd" transform="translate(1759,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(129.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1861,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2991,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g><g data-mml-node="mrow" transform="translate(16070.2,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(72.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2084.3,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g></g></g></svg></mjx-container><br>其中，<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -4.381ex" xmlns="http://www.w3.org/2000/svg" width="50.639ex" height="9.893ex" role="img" focusable="false" viewBox="0 -2436.3 22382.6 4372.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1018.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.114)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1422.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3896.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,22.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1977.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3940.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1422.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4151.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7072.5,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1018.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.114)"></path></svg></g></g><g data-mml-node="mo" transform="translate(8017.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(9073.1,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1282.3)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1292.3)"></path><svg width="667" height="974.6" y="-237.3" x="0" viewBox="0 243.7 667 974.6"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,2.428)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1571.4)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(429.3,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="972.2" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(2539.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4366.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-46.3)"><g data-mml-node="mtd" transform="translate(356.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2212.2,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(400.3,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="914.2" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(4409.8,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1686.3)"><g data-mml-node="mtd" transform="translate(356.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2539.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4620.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(6041.9,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1282.3)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1292.3)"></path><svg width="667" height="974.6" y="-237.3" x="0" viewBox="0 243.7 667 974.6"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,2.428)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(15948.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mtd" transform="translate(1575,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3100,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4600,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(25,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1550,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g><g data-mml-node="mtd" transform="translate(3100,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4600,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(25,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1575,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3100,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(4600,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5767,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g></g></svg></mjx-container><br>称为<strong>相机内参</strong>。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex" xmlns="http://www.w3.org/2000/svg" width="7.962ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 3519 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g><g data-mml-node="mtd" transform="translate(1759,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(129.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1861,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2991,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g></g></g></svg></mjx-container><br>称为<strong>相机外参</strong>。</p><h4 id="e-求解"><a href="#e-求解" class="headerlink" title="e. 求解"></a>e. 求解</h4><p>我们的需求是<strong>根据像素坐标</strong>求<strong>世界坐标</strong>，而<strong>世界坐标系</strong>建立在<strong>地面</strong>，因此可令<strong>Z<sub>w</sub>=0</strong>。<br>即：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="42.583ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 18821.5 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mrow" transform="translate(1238.8,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(43.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(3422.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4478.4,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1018.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.114)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1422.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3896.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,22.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1977.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3940.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1422.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4151.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7072.5,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1018.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.114)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(12384.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"></path></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g><g data-mml-node="mtd" transform="translate(1759,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(129.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1861,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2991,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"></path></g></g><g data-mml-node="mrow" transform="translate(16070.2,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2084.3,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g></g></g></svg></mjx-container><br>将<strong>相机外参</strong>展开：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="57.25ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 25304.4 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mrow" transform="translate(1238.8,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(43.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(3422.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4478.4,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1018.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.114)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1422.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3896.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,22.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1977.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3940.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1422.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4151.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7072.5,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1018.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.114)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(12384.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(7647.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(7647.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(7647.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(524.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3073.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5622.8,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(7907.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(9334.9,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(22553.1,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2084.3,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g></g></g></svg></mjx-container><br><strong>化简</strong>可得：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="51.483ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 22755.3 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mrow" transform="translate(1238.8,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(43.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g><g data-mml-node="mo" transform="translate(3422.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4478.4,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1018.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.114)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1422.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3896.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,22.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1977.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3940.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1422.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4151.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7072.5,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1018.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.114)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(12384.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(524.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3073.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5358.5,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(6785.8,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(20004,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(123.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(458.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2084.3,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g></g></svg></mjx-container><br>将上式改写为<strong>AX=B</strong>的形式：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex" xmlns="http://www.w3.org/2000/svg" width="48.736ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 21541.3 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1018.5)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.114)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1422.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3896.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,22.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(1977.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3940.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1422.5)"><g data-mml-node="mtd" transform="translate(238.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(2187.2,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4151.2,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(5905.5,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7072.5,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1018.5)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1028.5)"></path><svg width="667" height="447" y="26.5" x="0" viewBox="0 111.7 667 447"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.114)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(7906.2,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1696)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,4.49)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2549.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(5098.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd" transform="translate(524.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(3073.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(5358.5,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(6785.8,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1696)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1706)"></path><svg width="667" height="1802" y="-651" x="0" viewBox="0 450.5 667 1802"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,4.49)"></path></svg></g></g><g data-mml-node="mrow" transform="translate(15525.6,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,1547.8)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1557.8)"></path><svg width="667" height="1505.7" y="-502.8" x="0" viewBox="0 376.4 667 1505.7"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,3.752)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1767.3)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="msub" transform="translate(220,451.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="msub" transform="translate(342,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="1202.2" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-23.8)"><g data-mml-node="mtd" transform="translate(87.3,0)"><g data-mml-node="mfrac"><g data-mml-node="msub" transform="translate(220,451.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mi" transform="translate(614,-150) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="msub" transform="translate(254.7,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="1027.5" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-1745.3)"><g data-mml-node="mtd" transform="translate(122,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(422.3,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><rect width="958.1" height="60" x="120" y="220"></rect></g></g></g></g><g data-mml-node="mo" transform="translate(2109.2,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,1547.8)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1557.8)"></path><svg width="667" height="1505.7" y="-502.8" x="0" viewBox="0 376.4 667 1505.7"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,3.752)"></path></svg></g></g><g data-mml-node="mo" transform="translate(18579.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(19635.3,0)"><g data-mml-node="mo"><path data-c="23A1" d="M319 -645V1154H666V1070H403V-645H319Z" transform="translate(0,996)"></path><path data-c="23A3" d="M319 -644V1155H403V-560H666V-644H319Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A2" d="M319 0V602H403V0H319Z" transform="scale(1,1.002)"></path></svg></g><g data-mml-node="mtable" transform="translate(667,0)"><g data-mml-node="mtr" transform="translate(0,1400)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mtr"><g data-mml-node="mtd" transform="translate(43.5,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1400)"><g data-mml-node="mtd" transform="translate(36,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1239,0)"><path data-c="23A4" d="M0 1070V1154H347V-645H263V1070H0Z" transform="translate(0,996)"></path><path data-c="23A6" d="M263 -560V1155H347V-644H0V-560H263Z" transform="translate(0,-1006)"></path><svg width="667" height="402" y="49" x="0" viewBox="0 100.5 667 402"><path data-c="23A5" d="M263 0V602H347V0H263Z" transform="scale(1,1.002)"></path></svg></g></g></g></g></svg></mjx-container><br><strong>解出</strong>这个<strong>矩阵方程</strong>即可求解 <strong>世界坐标（X<sub>w</sub>, Y<sub>w</sub>, 0）</strong> 以及 <strong>相机坐标系原点到所求点的直线距离Z<sub>c</sub></strong> ！</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2) 实现"></a>2) 实现</h3><p>未完待续…</p><h3 id="3-参考"><a href="#3-参考" class="headerlink" title="3) 参考"></a>3) 参考</h3><ul><li><a class="link" href="https://blog.csdn.net/weizhangyjs/article/details/81020177?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-81020177.pc_agg_new_rank&utm_term=opencv%E7%9B%B8%E6%9C%BA%E5%9D%90%E6%A0%87%E7%B3%BB%E7%A4%BA%E6%84%8F%E5%9B%BE&spm=1000.2123.3001.4430">世界坐标系、相机坐标系、图像平面坐标系<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;OpenCV&lt;/strong&gt;是&lt;strong&gt;计算机视觉&lt;/strong&gt;领域一款热门的&lt;strong&gt;框</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://acmezone.top/tags/Linux/"/>
    
    <category term="OpenCV" scheme="https://acmezone.top/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>BlogOS：ARM v8之旅</title>
    <link href="https://acmezone.top/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/"/>
    <id>https://acmezone.top/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/</id>
    <published>2022-02-26T07:02:36.000Z</published>
    <updated>2024-03-23T15:29:59.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>BlogOS</strong>是<strong>Philipp Oppermann</strong>用<strong>Rust语言</strong>编写的<strong>面向x86架构</strong>的<strong>简单操作系统</strong>。</p><p><strong>《ARM v8之旅》</strong>将作为 <strong><a class="link"   href="https://os2022exps-doc.readthedocs.io/zh_CN/latest/index.html" >湖南大学2022年操作系统课程实验<i class="fas fa-external-link-alt"></i></a></strong> 个人参考<strong>笔记</strong>。<br>更<strong>详细的解析</strong>请参考 <strong><a class="link"   href="https://noionion.top/16433.html" >rust写个操作系统：课程实验blogos移至armV8深度解析<i class="fas fa-external-link-alt"></i></a></strong> 。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a class="link"   href="https://stackoverflow.com/questions/64491112/libncursesw-so-5-is-installed-but-a-program-that-needs-it-says-no-such-file-or" >libncursesw.so.5 is installed but a program that needs it says “No such file or directory”<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://stackoverflow.com/questions/20842732/libpython2-7-so-1-0-cannot-open-shared-object-file-no-such-file-or-directory" >libpython2.7.so.1.0: cannot open shared object file: No such file or directory<i class="fas fa-external-link-alt"></i></a></li></ul><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceOne.tar.gz" title="下载">下载</a></p></blockquote><p>本文以<strong>Windows Subsystem for Linux 2</strong>为环境，可参考 <strong><a href="https://acmezone.top/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/">Windows Subsystem for Linux 2 的艺术</a></strong> 搭建。</p><h2 id="1-安装Rust"><a href="#1-安装Rust" class="headerlink" title="1. 安装Rust"></a>1. 安装<a class="link"   href="https://www.rust-lang.org/zh-CN" >Rust<i class="fas fa-external-link-alt"></i></a></h2><p>输入以下<strong>命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><p>若网络<strong>正常</strong>，则会出现以下<strong>输出</strong>，键入<code>1</code>，执行<strong>默认安装</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%AE%89%E8%A3%85RUST.png"                        class="" title="安装RUST"                 ><p><strong>安装完成</strong>后，<strong>激活Rust环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source $HOME/.cargo/env</span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustc -V</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC.png"                        class="" title="查看版本"                 ><p>根据<strong>文档</strong>，实验需要用到<strong>Nightly版本</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup default nightly</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC2.png"                        class="" title="查看版本2"                 ><p>安装<strong>GCC</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc</span><br></pre></td></tr></table></figure><p>安装<strong>相关工具</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo install cargo-binutils rustfilt</span><br></pre></td></tr></table></figure><blockquote><p>若安装GCC后仍无法正常<code>cargo install cargo-binutils rustfilt</code>，请尝试将<strong>软件源</strong>更换为<strong>阿里源</strong>（参见 <strong><a href="https://acmezone.top/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/">Windows Subsystem for Linux 2 的艺术</a></strong> ），再重新安装一次<strong>GCC</strong>。</p></blockquote><h2 id="2-添加ARM-v8支持"><a href="#2-添加ARM-v8支持" class="headerlink" title="2. 添加ARM v8支持"></a>2. 添加ARM v8支持</h2><p>键入以下<strong>命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rustup target add aarch64-unknown-none-softfloat</span><br></pre></td></tr></table></figure><h2 id="3-安装QEMU模拟器"><a href="#3-安装QEMU模拟器" class="headerlink" title="3. 安装QEMU模拟器"></a>3. 安装QEMU模拟器</h2><p>键入以下<strong>命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu qemu-system-arm</span><br></pre></td></tr></table></figure><h2 id="4-下载交叉编译工具链-AArch64"><a href="#4-下载交叉编译工具链-AArch64" class="headerlink" title="4. 下载交叉编译工具链 (AArch64)"></a>4. 下载<a class="link"   href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads" >交叉编译工具链 (AArch64)<i class="fas fa-external-link-alt"></i></a></h2><p>安装<strong>必要环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncursesw5 libpython2.7 axel</span><br></pre></td></tr></table></figure><p>创建<strong>交叉编译工具链</strong>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ToolChain &amp;&amp; cd ToolChain</span><br></pre></td></tr></table></figure><p>使用<strong>axel</strong>多线程下载工具链 <strong>AArch64 ELF bare-metal target (aarch64-none-elf)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axel -n 32 -a https://developer.arm.com/-/media/Files/downloads/gnu-a/10.3-2021.07/binrel/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf.tar.xz</span><br></pre></td></tr></table></figure><h2 id="5-创建裸机-Bare-Metal-程序"><a href="#5-创建裸机-Bare-Metal-程序" class="headerlink" title="5. 创建裸机(Bare Metal)程序"></a>5. 创建裸机(Bare Metal)程序</h2><blockquote><p>由于我们的目标是编写一个<strong>操作系统</strong>，所以我们需要创建一个<strong>独立于操作系统</strong>的<strong>可执行程序</strong>，又称<strong>独立式可执行程序</strong>（Freestanding Executable）或<strong>裸机程序</strong>（Bare-metal Executable）。</p><p>这意味着所有<strong>依赖于操作系统的库</strong>我们都<strong>不能使用</strong>。比如<code>std</code>中的大部分内容（<code>io</code>, <code>thread</code>, <code>file system</code>, etc…）都需要操作系统的支持，所以这部分内容我们不能使用。</p><p>但是，<strong>不依赖于操作系统</strong>的<strong>Rust</strong>的<strong>语言特性</strong>我们还是可以继续使用的，比如：<strong>迭代器</strong>、<strong>模式匹配</strong>、<strong>字符串格式化</strong>、<strong>所有权系统</strong>等。这使得<strong>Rust</strong>依旧可以作为一个<strong>功能强大</strong>的<strong>高级语言</strong>，帮助我们编写<strong>操作系统</strong>。</p></blockquote><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>回到<code>Home</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>新建名为<code>rui_armv8_os</code>的项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new rui_armv8_os --bin --edition 2021</span><br></pre></td></tr></table></figure><p>进入<code>rui_armv8_os</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd rui_armv8_os</span><br></pre></td></tr></table></figure><p>创建<strong>实验所需文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/panic.rs src/panic.rs src/start.s aarch64-qemu.ld aarch64-unknown-none-softfloat.json</span><br></pre></td></tr></table></figure><p>创建<code>.cargo</code>文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .cargo</span><br></pre></td></tr></table></figure><p>创建<code>.cargo/config.toml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .cargo/config.toml</span><br></pre></td></tr></table></figure><p>使用<a class="link"   href="https://code.visualstudio.com/" >VSCode<i class="fas fa-external-link-alt"></i></a>打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><p><strong>VSCode</strong>安装<strong>Rust</strong>、<strong>Rust-Analyzer</strong>插件</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/VSCode%E6%8F%92%E4%BB%B6.png"                        class="" title="VSCode插件"                 ><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/VSCode%E6%8F%92%E4%BB%B62.png"                        class="" title="VSCode插件2"                 ><p>编辑<code>src/main.rs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#![no_std] // 不使用标准库</span><br><span class="line">#![no_main] // 不使用预定义入口点</span><br><span class="line"></span><br><span class="line">use core::&#123;arch::global_asm, ptr&#125;; // 导入需要的Module</span><br><span class="line"></span><br><span class="line">mod panic;</span><br><span class="line"></span><br><span class="line">global_asm!(include_str!(&quot;start.s&quot;));</span><br><span class="line"></span><br><span class="line">#[no_mangle] // 不修改函数名</span><br><span class="line">pub extern &quot;C&quot; fn not_main() &#123;</span><br><span class="line">    const UART0: *mut u8 = 0x0900_0000 as *mut u8;</span><br><span class="line">    let out_str = b&quot;AArch64 Bare Metal&quot;;</span><br><span class="line">    for byte in out_str &#123;</span><br><span class="line">        unsafe &#123;</span><br><span class="line">            ptr::write_volatile(UART0, *byte);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/panic.rs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use core::panic::PanicInfo;</span><br><span class="line"></span><br><span class="line">#[panic_handler]</span><br><span class="line">fn on_panic(_info: &amp;PanicInfo) -&gt; ! &#123;</span><br><span class="line">    loop &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/start.s</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.globl _start</span><br><span class="line">.extern LD_STACK_PTR</span><br><span class="line">.section &quot;.text.boot&quot;</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">        ldr     x30, =LD_STACK_PTR</span><br><span class="line">        mov     sp, x30</span><br><span class="line">        bl      not_main</span><br><span class="line"></span><br><span class="line">.equ PSCI_SYSTEM_OFF, 0x84000002</span><br><span class="line">.globl system_off</span><br><span class="line">system_off:</span><br><span class="line">        ldr     x0, =PSCI_SYSTEM_OFF</span><br><span class="line">        hvc     #0</span><br></pre></td></tr></table></figure><p>编辑<code>aarch64-qemu.ld</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ENTRY(_start)</span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    . = 0x40080000;</span><br><span class="line">    .text.boot : &#123; *(.text.boot) &#125;</span><br><span class="line">    .text : &#123; *(.text) &#125;</span><br><span class="line">    .data : &#123; *(.data) &#125;</span><br><span class="line">    .rodata : &#123; *(.rodata) &#125;</span><br><span class="line">    .bss : &#123; *(.bss) &#125;</span><br><span class="line"></span><br><span class="line">    . = ALIGN(8);</span><br><span class="line">    . = . + 0x4000;</span><br><span class="line">    LD_STACK_PTR = .;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>aarch64-unknown-none-softfloat.json</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;abi-blacklist&quot;: [</span><br><span class="line">      &quot;stdcall&quot;,</span><br><span class="line">      &quot;fastcall&quot;,</span><br><span class="line">      &quot;vectorcall&quot;,</span><br><span class="line">      &quot;thiscall&quot;,</span><br><span class="line">      &quot;win64&quot;,</span><br><span class="line">      &quot;sysv64&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;arch&quot;: &quot;aarch64&quot;,</span><br><span class="line">    &quot;data-layout&quot;: &quot;e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128&quot;,</span><br><span class="line">    &quot;disable-redzone&quot;: true,</span><br><span class="line">    &quot;env&quot;: &quot;&quot;,</span><br><span class="line">    &quot;executables&quot;: true,</span><br><span class="line">    &quot;features&quot;: &quot;+strict-align,+neon,+fp-armv8&quot;,</span><br><span class="line">    &quot;is-builtin&quot;: false,</span><br><span class="line">    &quot;linker&quot;: &quot;rust-lld&quot;,</span><br><span class="line">    &quot;linker-flavor&quot;: &quot;ld.lld&quot;,</span><br><span class="line">    &quot;linker-is-gnu&quot;: true,</span><br><span class="line">    &quot;pre-link-args&quot;: &#123;</span><br><span class="line">      &quot;ld.lld&quot;: [&quot;-Taarch64-qemu.ld&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;llvm-target&quot;: &quot;aarch64-unknown-none&quot;,</span><br><span class="line">    &quot;max-atomic-width&quot;: 128,</span><br><span class="line">    &quot;os&quot;: &quot;none&quot;,</span><br><span class="line">    &quot;panic-strategy&quot;: &quot;abort&quot;,</span><br><span class="line">    &quot;relocation-model&quot;: &quot;static&quot;,</span><br><span class="line">    &quot;target-c-int-width&quot;: &quot;32&quot;,</span><br><span class="line">    &quot;target-endian&quot;: &quot;little&quot;,</span><br><span class="line">    &quot;target-pointer-width&quot;: &quot;64&quot;,</span><br><span class="line">    &quot;vendor&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>.cargo/config.toml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[unstable]</span><br><span class="line">build-std = [&quot;core&quot;, &quot;compiler_builtins&quot;] </span><br><span class="line"></span><br><span class="line">[build]</span><br><span class="line">target = &quot;aarch64-unknown-none-softfloat.json&quot;</span><br></pre></td></tr></table></figure><p>编辑<code>Cargo.toml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;rui_armv8_os&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">edition = &quot;2021&quot;</span><br><span class="line">authors = [&quot;Rui Li &lt;rui@hnu.edu.cn&gt;&quot;]</span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line"></span><br><span class="line"># eh_personality语言项标记的函数，将被用于实现栈展开（stack unwinding）。</span><br><span class="line"># 在使用标准库的情况下，当panic发生时，Rust将使用栈展开，来运行在栈上活跃的</span><br><span class="line"># 所有变量的析构函数（destructor）——这确保了所有使用的内存都被释放。</span><br><span class="line"># 如果不禁用会出现错误：language item required, but not found: `eh_personality`</span><br><span class="line"># 通过下面的配置禁用栈展开</span><br><span class="line"># dev时禁用panic时栈展开</span><br><span class="line">[profile.dev]</span><br><span class="line">panic = &quot;abort&quot;</span><br><span class="line"></span><br><span class="line"># release时禁用panic时栈展开</span><br><span class="line">[profile.release]</span><br><span class="line">panic = &quot;abort&quot;</span><br></pre></td></tr></table></figure><h3 id="编译与运行"><a href="#编译与运行" class="headerlink" title="编译与运行"></a>编译与运行</h3><p>在项目<strong>根目录</strong>下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%BC%96%E8%AF%91%E6%88%90%E5%8A%9F.png"                        class="" title="编译成功"                 ><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E8%BF%90%E8%A1%8C.png"                        class="" title="运行"                 ><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><blockquote><p>QEMU进入调试，启动调试服务器，默认端口1234</p></blockquote><p><strong>关闭</strong>之前运行的<strong>终端</strong>，打开一个<strong>新的终端</strong>，进入<code>rui_armv8_os</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd rui_armv8_os</span><br></pre></td></tr></table></figure><p><strong>启动调试</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -S -s</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/GDB%E8%B0%83%E8%AF%95.png"                        class="" title="GDB调试"                 ><p><strong>重新打开</strong>一个<strong>终端</strong>，进入<strong>工具链</strong><code>bin</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ToolChain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin</span><br></pre></td></tr></table></figure><p>导出<strong>工具链路径</strong>临时变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ToolChainPath=`pwd`</span><br></pre></td></tr></table></figure><p>进入<code>rui_armv8_os</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/rui_armv8_os</span><br></pre></td></tr></table></figure><p>配置<strong>临时工具链环境</strong>（这里的<code>$ToolChainPath</code>即是刚刚导出的临时变量）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$ToolChainPath:$PATH</span><br></pre></td></tr></table></figure><p>启用<strong>GDB调试客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aarch64-none-elf-gdb target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><p>设置<strong>调试参数</strong>，开始<strong>调试</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/GDB%E8%B0%83%E8%AF%952.png"                        class="" title="GDB调试2"                 ><p>连接<strong>调试客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target remote localhost:1234</span><br></pre></td></tr></table></figure><p>查看<strong>汇编码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disassemble</span><br></pre></td></tr></table></figure><p><strong>单步运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/GDB%E8%B0%83%E8%AF%953.png"                        class="" title="GDB调试3"                 ><h1 id="二、Hello-World"><a href="#二、Hello-World" class="headerlink" title="二、Hello World"></a>二、Hello World</h1><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceTwo.tar.gz" title="下载">下载</a></p></blockquote><blockquote><p><code>print</code>函数是学习几乎任何一种软件开发语言时<strong>最先</strong>学习使用的函数，同时该函数也是最基本和原始的<strong>程序调试手段</strong>，但该函数的实现却并<strong>不简单</strong>。本实验的目的在于<strong>理解操作系统与硬件的接口方法</strong>，并实现一个<strong>可打印字符的宏</strong>（<strong>非系统调用</strong>），用于后续的<strong>调试</strong>和<strong>开发</strong>。</p></blockquote><h2 id="1-了解virt机器"><a href="#1-了解virt机器" class="headerlink" title="1. 了解virt机器"></a>1. 了解virt机器</h2><blockquote><p><strong>操作系统</strong>介于<strong>硬件</strong>和<strong>应用程序</strong>之间，<strong>向下管理硬件资源</strong>，<strong>向上提供应用编程接口</strong>。设计并实现<strong>操作系统</strong>需要熟悉<strong>底层硬件</strong>的<strong>组成</strong>及其<strong>操作方法</strong>。</p><p>本系列实验都会在<strong>QEMU模拟器</strong>上完成，首先来了解一下模拟的<strong>机器信息</strong>。可以通过下列<strong>两种方法</strong>：</p></blockquote><h3 id="1-文档或源码方式"><a href="#1-文档或源码方式" class="headerlink" title="1) 文档或源码方式"></a>1) 文档或源码方式</h3><blockquote><p>查看<strong>QEMU</strong>关于<strong>virt</strong>的<a class="link"   href="https://www.qemu.org/docs/master/system/arm/virt.html" >描述<i class="fas fa-external-link-alt"></i></a>， 或者查看<strong>QEMU</strong>的<strong>源码</strong>，如<strong>GitHub</strong>上的<a class="link"   href="https://github.com/qemu/qemu/blob/master/include/hw/arm/virt.h" >virt.h<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="https://github.com/qemu/qemu/blob/master/hw/arm/virt.c" >virt.c<i class="fas fa-external-link-alt"></i></a>。<code>virt.c</code>中可见如下有关<strong>内存映射</strong>的内容。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/* Addresses and sizes of our components.</span><br><span class="line"> * 0..128MB is space for a flash device so we can run bootrom code such as UEFI.</span><br><span class="line"> * 128MB..256MB is used for miscellaneous device I/O.</span><br><span class="line"> * 256MB..1GB is reserved for possible future PCI support (ie where the</span><br><span class="line"> * PCI memory window will go if we add a PCI host controller).</span><br><span class="line"> * 1GB and up is RAM (which may happily spill over into the</span><br><span class="line"> * high memory region beyond 4GB).</span><br><span class="line"> * This represents a compromise between how much RAM can be given to</span><br><span class="line"> * a 32 bit VM and leaving space for expansion and in particular for PCI.</span><br><span class="line"> * Note that devices should generally be placed at multiples of 0x10000,</span><br><span class="line"> * to accommodate guests using 64K pages.</span><br><span class="line"> */</span><br><span class="line">static const MemMapEntry base_memmap[] = &#123;</span><br><span class="line">    /* Space up to 0x8000000 is reserved for a boot ROM */</span><br><span class="line">    [VIRT_FLASH] =              &#123;          0, 0x08000000 &#125;,</span><br><span class="line">    [VIRT_CPUPERIPHS] =         &#123; 0x08000000, 0x00020000 &#125;,</span><br><span class="line">    /* GIC distributor and CPU interfaces sit inside the CPU peripheral space */</span><br><span class="line">    [VIRT_GIC_DIST] =           &#123; 0x08000000, 0x00010000 &#125;,</span><br><span class="line">    [VIRT_GIC_CPU] =            &#123; 0x08010000, 0x00010000 &#125;,</span><br><span class="line">    [VIRT_GIC_V2M] =            &#123; 0x08020000, 0x00001000 &#125;,</span><br><span class="line">    [VIRT_GIC_HYP] =            &#123; 0x08030000, 0x00010000 &#125;,</span><br><span class="line">    [VIRT_GIC_VCPU] =           &#123; 0x08040000, 0x00010000 &#125;,</span><br><span class="line">    /* The space in between here is reserved for GICv3 CPU/vCPU/HYP */</span><br><span class="line">    [VIRT_GIC_ITS] =            &#123; 0x08080000, 0x00020000 &#125;,</span><br><span class="line">    /* This redistributor space allows up to 2*64kB*123 CPUs */</span><br><span class="line">    [VIRT_GIC_REDIST] =         &#123; 0x080A0000, 0x00F60000 &#125;,</span><br><span class="line">    [VIRT_UART] =               &#123; 0x09000000, 0x00001000 &#125;,</span><br><span class="line">    [VIRT_RTC] =                &#123; 0x09010000, 0x00001000 &#125;,</span><br><span class="line">    [VIRT_FW_CFG] =             &#123; 0x09020000, 0x00000018 &#125;,</span><br><span class="line">    [VIRT_GPIO] =               &#123; 0x09030000, 0x00001000 &#125;,</span><br><span class="line">    [VIRT_SECURE_UART] =        &#123; 0x09040000, 0x00001000 &#125;,</span><br><span class="line">    [VIRT_SMMU] =               &#123; 0x09050000, 0x00020000 &#125;,</span><br><span class="line">    [VIRT_PCDIMM_ACPI] =        &#123; 0x09070000, MEMORY_HOTPLUG_IO_LEN &#125;,</span><br><span class="line">    [VIRT_ACPI_GED] =           &#123; 0x09080000, ACPI_GED_EVT_SEL_LEN &#125;,</span><br><span class="line">    [VIRT_NVDIMM_ACPI] =        &#123; 0x09090000, NVDIMM_ACPI_IO_LEN&#125;,</span><br><span class="line">    [VIRT_PVTIME] =             &#123; 0x090a0000, 0x00010000 &#125;,</span><br><span class="line">    [VIRT_SECURE_GPIO] =        &#123; 0x090b0000, 0x00001000 &#125;,</span><br><span class="line">    [VIRT_MMIO] =               &#123; 0x0a000000, 0x00000200 &#125;,</span><br><span class="line">    /* ...repeating for a total of NUM_VIRTIO_TRANSPORTS, each of that size */</span><br><span class="line">    [VIRT_PLATFORM_BUS] =       &#123; 0x0c000000, 0x02000000 &#125;,</span><br><span class="line">    [VIRT_SECURE_MEM] =         &#123; 0x0e000000, 0x01000000 &#125;,</span><br><span class="line">    [VIRT_PCIE_MMIO] =          &#123; 0x10000000, 0x2eff0000 &#125;,</span><br><span class="line">    [VIRT_PCIE_PIO] =           &#123; 0x3eff0000, 0x00010000 &#125;,</span><br><span class="line">    [VIRT_PCIE_ECAM] =          &#123; 0x3f000000, 0x01000000 &#125;,</span><br><span class="line">    /* Actual RAM size depends on initial RAM and device memory settings */</span><br><span class="line">    [VIRT_MEM] =                &#123; GiB, LEGACY_RAMLIMIT_BYTES &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-设备树（Device-Tree）方式"><a href="#2-设备树（Device-Tree）方式" class="headerlink" title="2) 设备树（Device Tree）方式"></a>2) 设备树（Device Tree）方式</h3><p>首先安装<strong>DTC</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install device-tree-compiler</span><br></pre></td></tr></table></figure><p>新建一个<strong>设备树目录</strong>并<strong>进入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/device &amp;&amp; cd ~/device</span><br></pre></td></tr></table></figure><p>导出<strong>DT</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-aarch64 -machine virt,dumpdtb=virt.dtb -cpu cortex-a53 -nographic</span><br></pre></td></tr></table></figure><blockquote><p><code>-machine virt</code>指明<strong>机器类型</strong>为<strong>virt</strong>，这是<strong>QEMU</strong>仿真的<strong>虚拟机器</strong>。</p></blockquote><p>用<strong>DTC</strong>将导出的<strong>Device Tree Blob</strong>转换为<strong>Device Tree Source</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dtc -I dtb -O dts -o virt.dts virt.dtb</span><br></pre></td></tr></table></figure><p>用<strong>文本编辑器</strong>打开<code>virt.dts</code>，可以发现如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pl011@9000000 &#123;</span><br><span class="line">clock-names = &quot;uartclk\0apb_pclk&quot;;</span><br><span class="line">clocks = &lt;0x8000 0x8000&gt;;</span><br><span class="line">interrupts = &lt;0x00 0x01 0x04&gt;;</span><br><span class="line">reg = &lt;0x00 0x9000000 0x00 0x1000&gt;;</span><br><span class="line">compatible = &quot;arm,pl011\0arm,primecell&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">/* ······ */</span><br><span class="line">chosen &#123;</span><br><span class="line">stdout-path = &quot;/pl011@9000000&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由上可以看出，<strong>virt</strong>机器包含有<strong>pl011</strong>的设备，该设备的<strong>寄存器</strong>在<code>0x9000000</code>开始处。<strong>pl011</strong>实际上是一个<strong>UART设备</strong>，即<strong>串口</strong>。可以看到<strong>virt</strong>选择使用<strong>pl011</strong>作为<strong>标准输出</strong>，这是因为<strong>与PC不同</strong>，大部分<strong>嵌入式系统</strong>默认情况下<strong>并不包含VGA设备</strong>。</p></blockquote><h2 id="2-实现println-宏"><a href="#2-实现println-宏" class="headerlink" title="2. 实现println!宏"></a>2. 实现println!宏</h2><blockquote><p>我们参照<a class="link"   href="https://os.phil-opp.com/vga-text-mode/" >Writing an OS in Rust - VGA Text Mode<i class="fas fa-external-link-alt"></i></a> （<a class="link"   href="https://github.com/rustcc/writing-an-os-in-rust/blob/master/03-vga-text-mode.md" >使用Rust编写操作系统（三）：VGA字符模式<i class="fas fa-external-link-alt"></i></a>）来实现<code>println!</code>宏，但与之不同的是，我们使用<strong>串口</strong>来输出，而不是通过操作<strong>VGA</strong>的<strong>Frame Buffer</strong>。</p></blockquote><h3 id="1-用串口实现println-宏"><a href="#1-用串口实现println-宏" class="headerlink" title="1) 用串口实现println!宏"></a>1) 用串口实现println!宏</h3><p>进入<code>rui_armv8_os</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/rui_armv8_os</span><br></pre></td></tr></table></figure><p>新建<code>src/uart_console.rs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/uart_console.rs</span><br></pre></td></tr></table></figure><p>编辑<code>src/uart_console.rs</code>，定义一个<strong>Writer结构</strong>，实现<strong>字节写入</strong>和<strong>字符串写入</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//嵌入式系统使用串口，而不是vga，直接输出，没有颜色控制，不记录列号，也没有frame buffer，所以采用空结构</span><br><span class="line">pub struct Writer;</span><br><span class="line"></span><br><span class="line">//往串口寄存器写入字节和字符串进行输出</span><br><span class="line">impl Writer &#123;</span><br><span class="line">    pub fn write_byte(&amp;mut self, byte: u8) &#123;</span><br><span class="line">        const UART0: *mut u8 = 0x0900_0000 as *mut u8;</span><br><span class="line">        unsafe &#123;</span><br><span class="line">            ptr::write_volatile(UART0, byte);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pub fn write_string(&amp;mut self, s: &amp;str) &#123;</span><br><span class="line">        for byte in s.chars() &#123;</span><br><span class="line">            self.write_byte(byte as u8)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何操作硬件通常需要阅读<strong>硬件制造商</strong>提供的<strong>技术手册</strong>。如<strong>pl011</strong>串口设备（PrimeCell UART）是<strong>arm</strong>设计的，其<strong>技术参考手册</strong>可以通过其<a class="link"   href="https://developer.arm.com/documentation/ddi0183/latest/" >官网<i class="fas fa-external-link-alt"></i></a>查看。</p><p>依据之前<code>virt.dts</code>中的描述，<strong>pl011</strong>的<strong>寄存器</strong>在<strong>virt</strong>机器中被<strong>映射</strong>到了<code>0x9000000</code>的<strong>内存位置</strong>。通过访问<strong>pl011</strong>的<strong>技术参考手册</strong>中<code>Chapter 3. Programmers Model</code>中的<code>Summary of registers</code>一节可知：<strong>第0号寄存器</strong>是<strong>pl011</strong>串口的<strong>数据寄存器</strong>，用于<strong>数据</strong>的<strong>收发</strong>。其<strong>详细描述</strong>参见 <a class="link"   href="https://developer.arm.com/documentation/ddi0183/g/programmers-model/register-descriptions/data-register--uartdr?lang=en" >这里<i class="fas fa-external-link-alt"></i></a>。</p><p>注意到我们只是向<strong>UART0</strong>写入，而没从<strong>UART0</strong>读出（如果读出会读出<strong>其他设备</strong>通过<strong>串口</strong>发送过来的数据，而<strong>不是</strong>刚才<strong>写入</strong>的数据，这与<strong>读写内存</strong>时是不一样的，详情参见<strong>pl011</strong>的<strong>技术手册</strong>），<strong>编译器</strong>在<strong>优化</strong>时可能对这部分代码进行<strong>错误</strong>的<strong>优化</strong>，如<strong>把这些操作都忽略掉</strong>。</p><p>使用<code>ptr::write_volatile</code>库的<strong>目的</strong>是告诉<strong>编译器</strong>，这些<strong>写入</strong>有<strong>特定目的</strong>，不应将其<strong>优化</strong>（也就是告诉编译器<strong>不要瞎优化</strong>，这些<strong>写入</strong>和<strong>读出</strong>都有<strong>特定用途</strong>。</p><p>比如<strong>连续两次读</strong>，<strong>编译器</strong>可能认为<strong>第二次读</strong>就是<strong>前次的值</strong>，所以<strong>优化</strong>掉<strong>第二次读</strong>，但对<strong>外设寄存器</strong>的<strong>连续读</strong>可能返回<strong>不同的值</strong>。</p><p>比如写，<strong>编译器</strong>可能认为<strong>写</strong>后没有<strong>读</strong>所以<strong>写</strong>没有作用，或者<strong>连续的写</strong>会<strong>覆盖</strong>前面的<strong>写</strong>，但对这些<strong>寄存器</strong>的<strong>写入</strong>对<strong>外设</strong>都有<strong>特定作用</strong>）。</p></blockquote><p>在<code>src/uart_console.rs</code>中为<strong>Write结构</strong>实现<code>core::fmt::Write</code><strong>trait</strong>，该<strong>trait</strong>会自动实现<code>write_fmt</code>方法，支持<strong>格式化</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//嵌入式系统使用串口，而不是vga，直接输出，没有颜色控制，不记录列号，也没有frame buffer，所以采用空结构</span><br><span class="line">pub struct Writer;</span><br><span class="line"></span><br><span class="line">//往串口寄存器写入字节和字符串进行输出</span><br><span class="line">impl Writer &#123;</span><br><span class="line">    // ······</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">impl core::fmt::Write for Writer &#123;</span><br><span class="line">    fn write_str(&amp;mut self, s: &amp;str) -&gt; fmt::Result &#123;</span><br><span class="line">        self.write_string(s);</span><br><span class="line"></span><br><span class="line">        Ok(())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基于<strong>Rust</strong>的<code>core::fmt</code>实现<strong>格式化控制</strong>，可以使我们方便地<strong>打印不同类型</strong>的<strong>变量</strong>。实现<code>core::fmt::Write</code>后，我们就可以使用<strong>Rust</strong>内置的<strong>格式化</strong>宏<code>write!</code>和<code>writeln!</code>，这使你瞬间具有<strong>其他语言</strong>运行时所提供的<strong>格式化控制能力</strong>。</p></blockquote><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2) 测试"></a>2) 测试</h3><p>在<code>main.rs</code>末尾加入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#![no_std] // 不使用标准库</span><br><span class="line">#![no_main] // 不使用预定义入口点</span><br><span class="line"></span><br><span class="line">// ······</span><br><span class="line"></span><br><span class="line">#[no_mangle] // 不修改函数名</span><br><span class="line">pub extern &quot;C&quot; fn not_main() &#123;</span><br><span class="line">    // ······</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include!(&quot;uart_console.rs&quot;);</span><br><span class="line">use core::fmt;</span><br><span class="line"></span><br><span class="line">pub fn print_something() &#123;</span><br><span class="line">    // 一定要引用core::fmt::Write;否则报错：no method named `write_fmt` found for struct `Writer` in the current scope。</span><br><span class="line">    pub use core::fmt::Write;</span><br><span class="line"></span><br><span class="line">    let mut writer = Writer &#123;&#125;;</span><br><span class="line">    let display: fmt::Arguments = format_args!(&quot;hello arguments!\n&quot;);</span><br><span class="line"></span><br><span class="line">    writer.write_string(&quot;\n-----My writer-----\n&quot;);</span><br><span class="line">    writer.write_byte(b&#x27;H&#x27;);</span><br><span class="line">    writer.write_string(&quot;ello &quot;);</span><br><span class="line">    writer.write_string(&quot;World!\n&quot;);</span><br><span class="line">    writer.write_string(&quot;[0] Hello from Rust!\n&quot;);</span><br><span class="line"></span><br><span class="line">    // 通过实现core::fmt::Write自动实现的方法</span><br><span class="line">    writer.write_fmt(display).unwrap();</span><br><span class="line">    // 使用write!宏</span><br><span class="line">    write!(writer, &quot;The numbers are &#123;&#125; and &#123;&#125; \n&quot;, &quot;42&quot;, &quot;1.0&quot;).unwrap();</span><br><span class="line"></span><br><span class="line">    writer.write_string(&quot;-----My writer-----&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>main.rs</code>中<code>not_main</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pub extern &quot;C&quot; fn not_main() &#123;</span><br><span class="line">    // ······</span><br><span class="line">    print_something(); // 调用测试函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译</strong>并<strong>运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/Writer.png"                        class="" title="Writer"                 ><p>按住<code>CTRL + A</code>，然后松手按<code>C</code>，输入<code>quit</code>即可退出<strong>QEMU模拟器</strong>。</p><h3 id="3-全局实现"><a href="#3-全局实现" class="headerlink" title="3) 全局实现"></a>3) 全局实现</h3><blockquote><p>现在我们已经可以采用<code>print_something</code>函数通过<strong>串口输出</strong>字符了。但若要实现<strong>输出</strong>，我们需要<strong>两个</strong>步骤：<br>（1）创建<strong>Writer类型</strong>的<strong>实例</strong>。<br>（2）调用<strong>实例</strong>的<code>write_byte</code>或<code>write_string</code>等<strong>函数</strong>。</p><p>为了方便在<strong>其他模块</strong>中<strong>调用</strong>，我们希望可以<strong>直接执行步骤（2）</strong>而不是<strong>先执行步骤（1）</strong>再<strong>执行步骤（2）</strong>。</p><p>一般情况下可以通过将<strong>步骤（1）</strong>中的<strong>实例</strong>定义为<code>static</code>类型来实现，但<strong>Rust</strong>暂不支持<strong>Write</strong>r这样类型的<strong>静态（编译时）初始化</strong>，需要使用<code>lazy_static</code>来解决。此外，为了保证访问<strong>安全</strong>还引入了<strong>自旋锁（spin）</strong>。</p></blockquote><p>编辑<code>Cargo.toml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ······</span><br><span class="line"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">spin = &quot;0.9.2&quot;</span><br><span class="line"></span><br><span class="line">[dependencies.lazy_static]</span><br><span class="line">version = &quot;1.0&quot;</span><br><span class="line">features = [&quot;spin_no_std&quot;]</span><br><span class="line"></span><br><span class="line"># eh_personality语言项标记的函数，将被用于实现栈展开（stack unwinding）。</span><br><span class="line"># ······</span><br></pre></td></tr></table></figure><p>编辑<code>src/uart_console.rs</code>，实现<code>print!</code>和<code>println!</code>宏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">impl core::fmt::Write for Writer &#123;</span><br><span class="line">    // ······</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">use core::&#123;fmt, ptr&#125;;</span><br><span class="line"></span><br><span class="line">use lazy_static::lazy_static;</span><br><span class="line">use spin::Mutex;</span><br><span class="line"></span><br><span class="line">lazy_static! &#123;</span><br><span class="line">    /// A global `Writer` instance that can be used for printing to the VGA text buffer.</span><br><span class="line">    ///</span><br><span class="line">    /// Used by the `print!` and `println!` macros.</span><br><span class="line">    pub static ref WRITER: Mutex&lt;Writer&gt; = Mutex::new(Writer &#123; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// Like the `print!` macro in the standard library, but prints to the VGA text buffer.</span><br><span class="line">#[macro_export]</span><br><span class="line">macro_rules! print &#123;</span><br><span class="line">    ($($arg:tt)*) =&gt; ($crate::uart_console::_print(format_args!($($arg)*)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// Like the `println!` macro in the standard library, but prints to the VGA text buffer.</span><br><span class="line">#[macro_export]</span><br><span class="line">macro_rules! println &#123;</span><br><span class="line">    () =&gt; ($crate::print!(&quot;\n&quot;));</span><br><span class="line">    ($($arg:tt)*) =&gt; ($crate::print!(&quot;&#123;&#125;\n&quot;, format_args!($($arg)*)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// Prints the given formatted string to the VGA text buffer through the global `WRITER` instance.</span><br><span class="line">#[doc(hidden)]</span><br><span class="line">pub fn _print(args: fmt::Arguments) &#123;</span><br><span class="line">    use core::fmt::Write;</span><br><span class="line"></span><br><span class="line">    WRITER.lock().write_fmt(args).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>main.rs</code>中<strong>注释或删除之前的<code>print_something()</code>函数及其调用</strong>，测试<code>println!</code>宏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">mod uart_console;</span><br><span class="line">// ······</span><br><span class="line"></span><br><span class="line">pub extern &quot;C&quot; fn not_main() &#123;</span><br><span class="line">    // ······</span><br><span class="line">    println!(&quot;\n[0] Hello from Rust!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译</strong>并<strong>运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/println.png"                        class="" title="println"                 ><h1 id="三、设备树（可选）"><a href="#三、设备树（可选）" class="headerlink" title="三、设备树（可选）"></a>三、设备树（可选）</h1><blockquote><p>参考<a class="link"   href="https://os2022exps-doc.readthedocs.io/zh_CN/latest/exp3/index.html" >湖南大学2022年操作系统课程实验 - 实验三 设备树（可选）<i class="fas fa-external-link-alt"></i></a></p></blockquote><h1 id="四、中断"><a href="#四、中断" class="headerlink" title="四、中断"></a>四、中断</h1><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceFour.tar.gz" title="下载">下载</a></p><p><strong>中断</strong>、<strong>异常</strong>和<strong>陷阱</strong>指令是<strong>操作系统</strong>的<strong>基石</strong>，现代操作系统就是由<strong>中断驱动</strong>的。本实验的目的在于<strong>深刻理解中断的原理和机制</strong>，<strong>掌握CPU访问设备控制器的方法</strong>，<strong>掌握ARM体系结构的中断机制和规范</strong>，<strong>实现时钟中断服务和部分异常处理</strong>等。</p></blockquote><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><h3 id="1-陷入操作系统"><a href="#1-陷入操作系统" class="headerlink" title="1) 陷入操作系统"></a>1) 陷入操作系统</h3><blockquote><p>如下图所示，<strong>操作系统</strong>是一个<strong>多入口</strong>的<strong>程序</strong>，执行<strong>陷阱（Trap）指令</strong>，出现<strong>异常</strong>、<strong>发生中断</strong>时都会<strong>陷入</strong>到<strong>操作系统</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/enter_into_os.png"                        class="" title="enter_into_os"                 ></blockquote><h3 id="2-ARM的中断系统"><a href="#2-ARM的中断系统" class="headerlink" title="2) ARM的中断系统"></a>2) ARM的中断系统</h3><blockquote><p><strong>中断</strong>是一种<strong>硬件机制</strong>。借助于<strong>中断</strong>，<strong>CPU</strong>可以不必再采用<strong>轮询</strong>这种<strong>低效</strong>的方式<strong>访问外部设备</strong>。将所有的<strong>外部设备</strong>与<strong>CPU直接相连</strong>是<strong>不现实</strong>的，<strong>外部设备</strong>的<strong>中断请求</strong>一般经由<strong>中断控制器</strong>，由<strong>中断控制器</strong>仲裁后再转发给<strong>CPU</strong>。如下图所示<strong>ARM</strong>的<strong>中断系统</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ARMGIC.png"                        class="" title="ARMGIC"                 ><p>其中<strong>nIRQ</strong>是<strong>普通中断</strong>，<strong>nFIQ</strong>是<strong>快速中断</strong>。<strong>ARM</strong>采用的<strong>中断控制器</strong>叫做<strong>GIC</strong>，即<strong>General Interrupt Controller</strong>。<strong>GIC</strong>包括多个版本，如<strong>GICv1（已弃用）</strong>，<strong>GICv2</strong>，<strong>GICv3</strong>，<strong>GICv4</strong>。简单起见，我们实验将选用<strong>GICv2</strong>版本。</p><p>为了配置好<strong>GICv2中断控制器</strong>，与<strong>pl011串口</strong>一样，我们需要阅读其<strong>技术参考手册</strong>。</p><p>访问<strong>ARM</strong>官网下载<a class="link"   href="https://developer.arm.com/documentation/ihi0048/latest" >ARM Generic Interrupt Controller Architecture version 2.0 - Architecture Specification<i class="fas fa-external-link-alt"></i></a>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/gicv2-logic.png"                        class="" title="gicv2-logic"                 ><p>从上图（来源于<a class="link"   href="https://developer.arm.com/documentation/ihi0048/latest" >ARM Generic Interrupt Controller Architecture version 2.0 - Architecture Specification<i class="fas fa-external-link-alt"></i></a>中的<strong>Chapter 2 GIC Partitioning</strong>）可以看出：</p><ul><li><strong>GICv2</strong>最多支持<strong>8核</strong>的<strong>中断管理</strong>。</li><li><strong>GIC</strong>包括<strong>两大主要部分</strong>（由图中<strong>蓝色虚竖线</strong>分隔，<strong>Distributor</strong>和<strong>CPU Interface</strong>由<strong>蓝色虚矩形框</strong>标示），分别是：<ul><li><strong>Distributor</strong>，其通过<code>GICD_</code>开头的寄存器进行控制（<strong>蓝色实矩形框</strong>标示）</li><li><strong>CPU Interface</strong>，其通过<code>GICC_</code>开头的寄存器进行控制（<strong>蓝色实矩形框</strong>标示）</li></ul></li><li><strong>中断类型</strong>分为以下几类（由图中<strong>红色虚线椭圆</strong>标示）：<ul><li><strong>SPI：（Shared Peripheral Interrupt）</strong>，<strong>共享外设中断</strong>。该<strong>中断</strong>来源于<strong>外设</strong>，通过<strong>Distributor</strong>分发给特定的<strong>Core</strong>，其<strong>中断编号</strong>为<strong>32-1019</strong>。从图中可以看到所有核<strong>共享SPI</strong>。</li><li><strong>PPI：（Private Peripheral Interrupt）</strong>，<strong>私有外设中断</strong>。该<strong>中断</strong>来源于<strong>外设</strong>，但只对指定的<strong>Core</strong>有效，<strong>中断信号</strong>只会发送给<strong>指定的Core</strong>，其<strong>中断编号</strong>为<strong>16-31</strong>。从图中可以看到每个<strong>Core</strong>都有自己的<strong>PPI</strong>。</li><li><strong>SGI：（Software-Generated Interrupt）</strong>，<strong>软中断</strong>。<strong>软件产生</strong>的<strong>中断</strong>，用于给其他的<strong>Core</strong>发送<strong>中断信号</strong>，其<strong>中断编号</strong>为<strong>0-15</strong>。</li><li><strong>Virtual Interrupt</strong>，<strong>虚拟中断</strong>，用于支持<strong>虚拟机</strong>。图中也可以看到，因为我们<strong>暂时不关心</strong>，所以没有标注。</li><li>此外可以看到<strong>（FIQ，IRQ）</strong>可通过<strong>b</strong>进行<strong>旁路</strong>，我们也不关心。如感兴趣可以查看<strong>技术手册</strong>了解细节。</li></ul></li></ul><p>此外，由<a class="link"   href="https://developer.arm.com/documentation/ihi0048/latest" >ARM Generic Interrupt Controller Architecture version 2.0 - Architecture Specification<i class="fas fa-external-link-alt"></i></a>(Section 1.4.2)可知，<strong>外设中断</strong>可由<strong>两种方式</strong>触发：</p><ul><li><strong>Edge-Triggered</strong>：<strong>边沿触发</strong>，当检测到<strong>中断信号上升沿</strong>时<strong>中断有效</strong>。</li><li><strong>Level-Sensitive</strong>：<strong>电平触发</strong>，当<strong>中断源</strong>为<strong>指定电平</strong>时<strong>中断有效</strong>。<br>因为<strong>SOC</strong>中<strong>中断</strong>有很多，为了方便对<strong>中断的管理</strong>，对每个<strong>中断</strong>附加了<strong>中断优先级</strong>。在<strong>中断仲裁</strong>时，<strong>高优先级的中断</strong>，会<strong>优于低优先级的中断</strong>，发送给<strong>CPU处理</strong>。当<strong>CPU</strong>在<strong>响应低优先级中断</strong>时，如果此时来了<strong>高优先级中断</strong>，那么<strong>高优先级中断</strong>会<strong>抢占低优先级中断</strong>，而被<strong>处理器响应</strong>。<br>由<a class="link"   href="https://developer.arm.com/documentation/ihi0048/latest" >ARM Generic Interrupt Controller Architecture version 2.0 - Architecture Specification<i class="fas fa-external-link-alt"></i></a>(Section 3.3)可知，<strong>GICv2</strong>最多支持<strong>256</strong>个<strong>中断优先级</strong>。<strong>GICv2</strong>中规定，所支持的<strong>中断优先级别数</strong>与<strong>GIC</strong>的具体实现有关，如果支持的<strong>中断优先级数</strong>比<strong>256</strong>少（最少为<strong>16</strong>），则<strong>8位优先级</strong>的<strong>低位</strong>为<strong>0</strong>，且遵循<strong>RAZ/WI（Read-As-Zero, Writes Ignored）</strong>原则。</li></ul></blockquote><h3 id="3-GICv2初始化"><a href="#3-GICv2初始化" class="headerlink" title="3) GICv2初始化"></a>3) GICv2初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/* ······ */</span><br><span class="line">intc@8000000 &#123;</span><br><span class="line">    phandle = &lt;0x8001&gt;;</span><br><span class="line">    reg = &lt;0x00 0x8000000 0x00 0x10000 0x00 0x8010000 0x00 0x10000&gt;;</span><br><span class="line">    compatible = &quot;arm,cortex-a15-gic&quot;;</span><br><span class="line">    ranges;</span><br><span class="line">    #size-cells = &lt;0x02&gt;;</span><br><span class="line">    #address-cells = &lt;0x02&gt;;</span><br><span class="line">    interrupt-controller;</span><br><span class="line">    #interrupt-cells = &lt;0x03&gt;;</span><br><span class="line"></span><br><span class="line">    v2m@8020000 &#123;</span><br><span class="line">        phandle = &lt;0x8002&gt;;</span><br><span class="line">        reg = &lt;0x00 0x8020000 0x00 0x1000&gt;;</span><br><span class="line">        msi-controller;</span><br><span class="line">        compatible = &quot;arm,gic-v2m-frame&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">/* ······ */</span><br><span class="line">timer &#123;</span><br><span class="line">    interrupts = &lt;0x01 0x0d 0x104 0x01 0x0e 0x104 0x01 0x0b 0x104 0x01 0x0a 0x104&gt;;</span><br><span class="line">    always-on;</span><br><span class="line">    compatible = &quot;arm,armv8-timer\0arm,armv7-timer&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由<code>virt.dts</code>中<code>intc</code>和<code>timer</code>的部分并结合<strong>kernel.org</strong>中关于<a class="link"   href="https://www.kernel.org/doc/Documentation/devicetree/bindings/interrupt-controller/arm%2Cgic.txt" >ARM Generic Interrupt Controller<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="https://www.kernel.org/doc/Documentation/devicetree/bindings/arm/arch_timer.txt" >ARM architected timer<i class="fas fa-external-link-alt"></i></a>的<strong>DeviceTree</strong>的说明可知：</p><ul><li><code>intc</code>中的<code>reg</code>指明<strong>GICD寄存器</strong>映射到内存的位置为<code>0x8000000</code>，长度为<code>0x10000</code>，<strong>GICC寄存器</strong>映射到内存的位置为<code>0x8010000</code>，长度为<code>0x10000</code>。</li><li><code>intc</code>中的<code>#interrupt-cells</code>指明<strong>interrupts</strong>包括<strong>3</strong>个<strong>cells</strong>。<a class="link"   href="https://www.kernel.org/doc/Documentation/devicetree/bindings/interrupt-controller/arm%2Cgic.txt" >第一个文档<i class="fas fa-external-link-alt"></i></a>指明：第一个<strong>cell</strong>为<strong>中断类型</strong>，<strong>0</strong>表示<strong>SPI</strong>，<strong>1</strong>表示<strong>PPI</strong>；第二个<strong>cell</strong>为<strong>中断号</strong>，<strong>SPI</strong>范围为**[0-987]<strong>，</strong>PPI<strong>为</strong>[0-15]<strong>；第三个</strong>cell<strong>为</strong>flags<strong>，其中</strong>[3:0]<strong>位表示</strong>触发类型<strong>，</strong>[4]<strong>表示</strong>高电平触发<strong>，</strong>[15:8]<strong>为</strong>PPI<strong>的</strong>CPU中断掩码<strong>，每</strong>1<strong>位对应一个</strong>CPU<strong>，为</strong>1<strong>表示该</strong>中断<strong>会连接到对应的</strong>CPU**。</li><li>以<code>timer</code>设备为例，其中包括<strong>4</strong>个<strong>中断</strong>。以第<strong>2</strong>个<strong>中断</strong>的参数<code>0x01 0x0e 0x104</code>为例，其指明该<strong>中断</strong>为<strong>PPI</strong>类型的<strong>中断</strong>，<strong>中断号14</strong>， 路由到第一个<strong>CPU</strong>，且<strong>高电平触发</strong>。但注意到<strong>PPI</strong>的<strong>起始中断号</strong>为<strong>16</strong>，所以实际上该<strong>中断</strong>在<strong>GICv2</strong>中的<strong>中断号</strong>应为<strong>16 + 14 = 30</strong>。<br>阅读<a class="link"   href="https://developer.arm.com/documentation/ihi0048/latest" >ARM Generic Interrupt Controller Architecture version 2.0 - Architecture Specification<i class="fas fa-external-link-alt"></i></a>，在<strong>Chapter 4 Programmers’ Model</strong>部分有关于<strong>GICD</strong>和<strong>GICC寄存器</strong>的<strong>描述，以及如何使能</strong>Distributor<strong>和</strong>CPU Interfaces**的方法。</li></ul></blockquote><h3 id="4-ARMv8的中断与异常处理"><a href="#4-ARMv8的中断与异常处理" class="headerlink" title="4) ARMv8的中断与异常处理"></a>4) ARMv8的中断与异常处理</h3><blockquote><p>访问<strong>ARM官网</strong>下载并阅读<a class="link"   href="https://developer.arm.com/documentation/den0024/a/AArch64-Exception-Handling/Exception-handling-registers" >ARM Cortex-A Series Programmer’s Guide for ARMv8-A<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="https://developer.arm.com/documentation/100933/0100/AArch64-exception-vector-table" >AArch64 Exception and Interrupt Handling<i class="fas fa-external-link-alt"></i></a>等<strong>技术参考手册</strong>。<br><strong>ARMv8架构</strong>定义了<strong>两种执行状态(<a class="link"   href="https://developer.arm.com/documentation/den0024/a/Fundamentals-of-ARMv8/Execution-states" >Execution States<i class="fas fa-external-link-alt"></i></a>)<strong>：</strong>AArch64</strong>和<strong>AArch32</strong>。分别对应使用<strong>64位宽通用寄存器</strong>或<strong>32位宽通用寄存器</strong>的执行。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/aarch64_exception_levels_2.png"                        class="" title="aarch64_exception_levels_2"                 ><p>上图所示为<strong>AArch64</strong>中的<strong>异常级别(Exception levels)<strong>的组织。可见</strong>AArch64</strong>中共有<strong>4</strong>个<strong>异常级别</strong>，分别为<strong>EL0</strong>，<strong>EL1</strong>，<strong>EL2</strong>和<strong>EL3</strong>。在<strong>AArch64</strong>中，<strong>Interrupt</strong>是<strong>Exception</strong>的<strong>子类型</strong>，称为<strong>异常</strong>。<strong>AArch64</strong>中有<strong>四种类型</strong>的<strong>异常</strong>：</p><ul><li><strong>Sync（Synchronous exceptions，同步异常）</strong>。在<strong>执行时触发</strong>的<strong>异常</strong>，例如在尝试<strong>访问不存在</strong>的<strong>内存地址</strong>时。</li><li><strong>IRQ （Interrupt requests，中断请求）</strong>。由<strong>外部设备</strong>产生的<strong>中断</strong>。</li><li><strong>FIQ （Fast Interrupt Requests，快速中断请求）</strong>。类似于<strong>IRQ</strong>，但具有<strong>更高</strong>的<strong>优先级</strong>，因此<strong>FIQ</strong>中断服务程序不能被其他<strong>IRQ</strong>或<strong>FIQ</strong>中断。</li><li><strong>SError （System Error，系统错误）</strong>。用于<strong>外部数据</strong>中止的<strong>异步中断</strong>。<br>当<strong>异常</strong>发生时，<strong>处理器</strong>将执行与该<strong>异常</strong>对应的<strong>异常处理代码</strong>。在<strong>ARM架构</strong>中，这些<strong>异常处理代码</strong>将会被保存在<strong>内存</strong>的<strong>异常向量表</strong>中。每一个<strong>异常级别（EL0，EL1，EL2和EL3）</strong>都有其对应的<strong>异常向量表</strong>。需要注意的是，与<strong>x86等架构</strong>不同，该表包含的是要执行的<strong>指令</strong>，而不是<strong>函数地址</strong>。</li></ul><p><strong>异常向量表</strong>的<strong>基地址</strong>由<code>VBAR_ELn</code>给出，然后每个表项都有一个从该<strong>基地址</strong>定义的<strong>偏移量</strong>。 每个表有<strong>16</strong>个表项，每个表项的大小为<strong>128（0x80）</strong>字节（<strong>32</strong>条<strong>指令</strong>）。 该表实际上有<strong>4</strong>组，每组<strong>4</strong>个表项。 分别是：</p><ul><li>发生于<strong>当前异常级别</strong>的<strong>异常</strong>且<strong>SPSel寄存器</strong>选择<strong>SP0</strong>，<strong>Sync</strong>、<strong>IRQ</strong>、<strong>FIQ</strong>、<strong>SError</strong>对应的<strong>4个异常处理</strong>。</li><li>发生于<strong>当前异常级别</strong>的<strong>异常</strong>且<strong>SPSel寄存器</strong>选择<strong>SPx</strong>，<strong>Sync</strong>、<strong>IRQ</strong>、<strong>FIQ</strong>、<strong>SError</strong>对应的<strong>4个异常处理</strong>。</li><li>发生于<strong>较低异常级别</strong>的<strong>异常</strong>且<strong>执行状态</strong>为<strong>AArch64</strong>，<strong>Sync</strong>、<strong>IRQ</strong>、<strong>FIQ</strong>、<strong>SError</strong>对应的<strong>4个异常处理</strong>。</li><li>发生于<strong>较低异常级别</strong>的<strong>异常</strong>且<strong>执行状态</strong>为<strong>AArch32</strong>，<strong>Sync</strong>、<strong>IRQ</strong>、<strong>FIQ</strong>、<strong>SError</strong>对应的<strong>4个异常处理</strong>。</li></ul></blockquote><h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h2><h3 id="1-编写代码"><a href="#1-编写代码" class="headerlink" title="1) 编写代码"></a>1) 编写代码</h3><p>新建<code>src/interrupts.rs</code>，<code>src/exceptions.s</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/interrupts.rs src/exceptions.s</span><br></pre></td></tr></table></figure><p>编辑<code>src/interrupts.rs</code>，定义各种<strong>常量</strong>，如<strong>寄存器地址</strong>和<strong>寄存器值</strong>等，然后定义<code>init_gicv2</code>函数对<strong>GICD</strong>和<strong>GICC</strong>进行<strong>初始化</strong>，最后定义若干<strong>辅助函数</strong>用于<strong>中断配置</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">use core::ptr;</span><br><span class="line"></span><br><span class="line">// GICD和GICC寄存器内存映射后的起始地址</span><br><span class="line">const GICD_BASE: u64 = 0x08000000;</span><br><span class="line">const GICC_BASE: u64 = 0x08010000;</span><br><span class="line"></span><br><span class="line">// Distributor</span><br><span class="line">const GICD_CTLR: *mut u32 = (GICD_BASE + 0x0) as *mut u32;</span><br><span class="line">const GICD_ISENABLER: *mut u32 = (GICD_BASE + 0x0100) as *mut u32;</span><br><span class="line">const GICD_ICENABLER: *mut u32 = (GICD_BASE + 0x0180) as *mut u32;</span><br><span class="line">const GICD_ICPENDR: *mut u32 = (GICD_BASE + 0x0280) as *mut u32;</span><br><span class="line">const GICD_IPRIORITYR: *mut u32 = (GICD_BASE + 0x0400) as *mut u32;</span><br><span class="line">const GICD_ICFGR: *mut u32 = (GICD_BASE + 0x0c00) as *mut u32;</span><br><span class="line"></span><br><span class="line">const GICD_CTLR_ENABLE: u32 = 1;  /* Enable GICD */</span><br><span class="line">const GICD_CTLR_DISABLE: u32 = 0;     /* Disable GICD */</span><br><span class="line">const GICD_ISENABLER_SIZE: u32 = 32;</span><br><span class="line">const GICD_ICENABLER_SIZE: u32 = 32;</span><br><span class="line">const GICD_ICPENDR_SIZE: u32 = 32;</span><br><span class="line">const GICD_IPRIORITY_SIZE: u32 = 4;</span><br><span class="line">const GICD_IPRIORITY_BITS: u32 = 8;</span><br><span class="line">const GICD_ICFGR_SIZE: u32 = 16;</span><br><span class="line">const GICD_ICFGR_BITS: u32 = 2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// CPU Interface</span><br><span class="line">const GICC_CTLR: *mut u32 = (GICC_BASE + 0x0) as *mut u32;</span><br><span class="line">const GICC_PMR: *mut u32 = (GICC_BASE + 0x0004) as *mut u32;</span><br><span class="line">const GICC_BPR: *mut u32 = (GICC_BASE + 0x0008) as *mut u32;</span><br><span class="line"></span><br><span class="line">const GICC_CTLR_ENABLE: u32 = 1;</span><br><span class="line">const GICC_CTLR_DISABLE: u32 = 0;</span><br><span class="line">// Priority Mask Register. interrupt priority filter, Higher priority corresponds to a lower Priority field value.</span><br><span class="line">const GICC_PMR_PRIO_LOW: u32 = 0xff;</span><br><span class="line">// The register defines the point at which the priority value fields split into two parts,</span><br><span class="line">// the group priority field and the subpriority field. The group priority field is used to</span><br><span class="line">// determine interrupt preemption. NO GROUP.</span><br><span class="line">const GICC_BPR_NO_GROUP: u32 = 0x00;</span><br><span class="line"></span><br><span class="line">pub fn init_gicv2() &#123;</span><br><span class="line">    // 初始化Gicv2的distributor和cpu interface</span><br><span class="line">    // 禁用distributor和cpu interface后进行相应配置</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        ptr::write_volatile(GICD_CTLR, GICD_CTLR_DISABLE);</span><br><span class="line">        ptr::write_volatile(GICC_CTLR, GICC_CTLR_DISABLE);</span><br><span class="line">        ptr::write_volatile(GICC_PMR, GICC_PMR_PRIO_LOW);</span><br><span class="line">        ptr::write_volatile(GICC_BPR, GICC_BPR_NO_GROUP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 启用distributor和cpu interface</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        ptr::write_volatile(GICD_CTLR, GICD_CTLR_ENABLE);</span><br><span class="line">        ptr::write_volatile(GICC_CTLR, GICC_CTLR_ENABLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使能中断号为interrupt的中断</span><br><span class="line">pub fn enable(interrupt: u32) &#123;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        ptr::write_volatile(</span><br><span class="line">            GICD_ISENABLER.add((interrupt / GICD_ISENABLER_SIZE) as usize),</span><br><span class="line">            1 &lt;&lt; (interrupt % GICD_ISENABLER_SIZE)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 禁用中断号为interrupt的中断</span><br><span class="line">pub fn disable(interrupt: u32) &#123;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        ptr::write_volatile(</span><br><span class="line">            GICD_ICENABLER.add((interrupt / GICD_ICENABLER_SIZE) as usize),</span><br><span class="line">            1 &lt;&lt; (interrupt % GICD_ICENABLER_SIZE)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清除中断号为interrupt的中断</span><br><span class="line">pub fn clear(interrupt: u32) &#123;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        ptr::write_volatile(</span><br><span class="line">            GICD_ICPENDR.add((interrupt / GICD_ICPENDR_SIZE) as usize),</span><br><span class="line">            1 &lt;&lt; (interrupt % GICD_ICPENDR_SIZE)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置中断号为interrupt的中断的优先级为priority</span><br><span class="line">pub fn set_priority(interrupt: u32, priority: u32) &#123;</span><br><span class="line">    let shift = (interrupt % GICD_IPRIORITY_SIZE) * GICD_IPRIORITY_BITS;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        let addr: *mut u32 = GICD_IPRIORITYR.add((interrupt / GICD_IPRIORITY_SIZE) as usize);</span><br><span class="line">        let mut value: u32 = ptr::read_volatile(addr);</span><br><span class="line">        value &amp;= !(0xff &lt;&lt; shift);</span><br><span class="line">        value |= priority &lt;&lt; shift;</span><br><span class="line">        ptr::write_volatile(addr, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置中断号为interrupt的中断的属性为config</span><br><span class="line">pub fn set_config(interrupt: u32, config: u32) &#123;</span><br><span class="line">    let shift = (interrupt % GICD_ICFGR_SIZE) * GICD_ICFGR_BITS;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        let addr: *mut u32 = GICD_ICFGR.add((interrupt / GICD_ICFGR_SIZE) as usize);</span><br><span class="line">        let mut value: u32 = ptr::read_volatile(addr);</span><br><span class="line">        value &amp;= !(0x03 &lt;&lt; shift);</span><br><span class="line">        value |= config &lt;&lt; shift;</span><br><span class="line">        ptr::write_volatile(addr, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/exceptions.s</code>，参照<a class="link"   href="https://developer.arm.com/documentation/den0024/a/AArch64-Exception-Handling/AArch64-exception-table" >AArch64 exception table<i class="fas fa-external-link-alt"></i></a>定义异常向量表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT OR Apache-2.0</span><br><span class="line">//</span><br><span class="line">// Copyright (c) 2018-2021 Andre Richter &lt;andre.o.richter@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">.extern el1_sp0_sync</span><br><span class="line">.extern el1_sp0_irq</span><br><span class="line">.extern el1_sp0_fiq</span><br><span class="line">.extern el1_sp0_error</span><br><span class="line">.extern el1_sync</span><br><span class="line">.extern el1_irq</span><br><span class="line">.extern el1_fiq</span><br><span class="line">.extern el1_error</span><br><span class="line">.extern el0_sync</span><br><span class="line">.extern el0_irq</span><br><span class="line">.extern el0_fiq</span><br><span class="line">.extern el0_error</span><br><span class="line">.extern el0_32_sync</span><br><span class="line">.extern el0_32_irq</span><br><span class="line">.extern el0_32_fiq</span><br><span class="line">.extern el0_32_error</span><br><span class="line"></span><br><span class="line">//--------------------------------------------------------------------------------------------------</span><br><span class="line">// Definitions</span><br><span class="line">//--------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">/// Call the function provided by parameter `\handler` after saving the exception context. Provide</span><br><span class="line">/// the context as the first parameter to &#x27;\handler&#x27;.</span><br><span class="line">.equ CONTEXT_SIZE, 264</span><br><span class="line"></span><br><span class="line">.section .text.exceptions</span><br><span class="line"></span><br><span class="line">.macro EXCEPTION_VECTOR handler</span><br><span class="line">    sub sp, sp, #CONTEXT_SIZE</span><br><span class="line"></span><br><span class="line">// store general purpose registers</span><br><span class="line">    stp x0, x1, [sp, #16 * 0]</span><br><span class="line">    stp x2, x3, [sp, #16 * 1]</span><br><span class="line">    stp x4, x5, [sp, #16 * 2]</span><br><span class="line">    stp x6, x7, [sp, #16 * 3]</span><br><span class="line">    stp x8, x9, [sp, #16 * 4]</span><br><span class="line">    stp x10, x11, [sp, #16 * 5]</span><br><span class="line">    stp x12, x13, [sp, #16 * 6]</span><br><span class="line">    stp x14, x15, [sp, #16 * 7]</span><br><span class="line">    stp x16, x17, [sp, #16 * 8]</span><br><span class="line">    stp x18, x19, [sp, #16 * 9]</span><br><span class="line">    stp x20, x21, [sp, #16 * 10]</span><br><span class="line">    stp x22, x23, [sp, #16 * 11]</span><br><span class="line">    stp x24, x25, [sp, #16 * 12]</span><br><span class="line">    stp x26, x27, [sp, #16 * 13]</span><br><span class="line">    stp x28, x29, [sp, #16 * 14]</span><br><span class="line"></span><br><span class="line">// store exception link register and saved processor state register</span><br><span class="line">    mrs x0, elr_el1</span><br><span class="line">    mrs x1, spsr_el1</span><br><span class="line">    stp x0, x1, [sp, #16 * 15]</span><br><span class="line"></span><br><span class="line">// store link register which is x30</span><br><span class="line">    str x30, [sp, #16 * 16]</span><br><span class="line">    mov x0, sp</span><br><span class="line"></span><br><span class="line">// call exception handler</span><br><span class="line">    bl \handler</span><br><span class="line"></span><br><span class="line">// exit exception</span><br><span class="line">    b .exit_exception</span><br><span class="line">.endm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//--------------------------------------------------------------------------------------------------</span><br><span class="line">// Private Code</span><br><span class="line">//--------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">//------------------------------------------------------------------------------</span><br><span class="line">// The exception vector table.</span><br><span class="line">//------------------------------------------------------------------------------</span><br><span class="line">/** When an exception occurs, the processor must execute handler code that corresponds to the exception.</span><br><span class="line">The location in memory where the handler is stored is called the exception vector. In the ARM architecture,</span><br><span class="line">exception vectors are stored in a table, called the exception vector table.</span><br><span class="line"></span><br><span class="line">Each Exception level has its own vector table, that is, there is one for each of EL3, EL2, and EL1. The table contains</span><br><span class="line">instructions to be executed, rather than a set of addresses. These would normally be branch instructions that direct the</span><br><span class="line">core to the full exception handler.</span><br><span class="line"></span><br><span class="line">The exception vector table for EL1, for example, holds instructions for handling all types of exception that can occur at EL1,</span><br><span class="line">Vectors for individual exceptions are at fixed offsets from the beginning of the table. The virtual address of each table base</span><br><span class="line">is set by the Vector Based Address Registers: VBAR_EL3, VBAR_EL2 and VBAR_EL1.</span><br><span class="line"></span><br><span class="line">Each entry in the vector table is 16 instructions long (in ARMv7-A and AArch32, each entry is only 4 bytes). This means that in</span><br><span class="line">AArch64 the top-level handler can be written directly in the vector table.</span><br><span class="line"></span><br><span class="line">The base address is given by VBAR_ELn and each entry has a defined offset from this base address. Each table has 16 entries,</span><br><span class="line">with each entry being 128 bytes (32 instructions) in size. The table effectively consists of 4 sets of 4 entries. Which entry</span><br><span class="line">is used depends on several factors:</span><br><span class="line"></span><br><span class="line">The type of exception (SError, FIQ, IRQ, or Synchronous)</span><br><span class="line">If the exception is being taken at the same Exception level, the stack pointer to be used (SP0 or SPn)</span><br><span class="line">If the exception is being taken at a lower Exception level, the Execution state of the next lower level (AArch64 or AArch32).</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.section .text.exceptions_vector_table</span><br><span class="line">// Export a symbol for the Rust code to use.</span><br><span class="line">.globl exception_vector_table</span><br><span class="line">exception_vector_table:</span><br><span class="line"></span><br><span class="line">.org 0x0000</span><br><span class="line">    EXCEPTION_VECTOR el1_sp0_sync</span><br><span class="line"></span><br><span class="line">.org 0x0080</span><br><span class="line">    EXCEPTION_VECTOR el1_sp0_irq</span><br><span class="line"></span><br><span class="line">.org 0x0100</span><br><span class="line">    EXCEPTION_VECTOR el1_sp0_fiq</span><br><span class="line"></span><br><span class="line">.org 0x0180</span><br><span class="line">    EXCEPTION_VECTOR el1_sp0_error</span><br><span class="line"></span><br><span class="line">.org 0x0200</span><br><span class="line">    EXCEPTION_VECTOR el1_sync</span><br><span class="line"></span><br><span class="line">.org 0x0280</span><br><span class="line">    EXCEPTION_VECTOR el1_irq</span><br><span class="line"></span><br><span class="line">.org 0x0300</span><br><span class="line">    EXCEPTION_VECTOR el1_fiq</span><br><span class="line"></span><br><span class="line">.org 0x0380</span><br><span class="line">    EXCEPTION_VECTOR el1_error</span><br><span class="line"></span><br><span class="line">.org 0x0400</span><br><span class="line">    EXCEPTION_VECTOR el0_sync</span><br><span class="line"></span><br><span class="line">.org 0x0480</span><br><span class="line">    EXCEPTION_VECTOR el0_irq</span><br><span class="line"></span><br><span class="line">.org 0x0500</span><br><span class="line">    EXCEPTION_VECTOR el0_fiq</span><br><span class="line"></span><br><span class="line">.org 0x0580</span><br><span class="line">    EXCEPTION_VECTOR el0_error</span><br><span class="line"></span><br><span class="line">.org 0x0600</span><br><span class="line">    EXCEPTION_VECTOR el0_32_sync</span><br><span class="line"></span><br><span class="line">.org 0x0680</span><br><span class="line">    EXCEPTION_VECTOR el0_32_irq</span><br><span class="line"></span><br><span class="line">.org 0x0700</span><br><span class="line">    EXCEPTION_VECTOR el0_32_fiq</span><br><span class="line"></span><br><span class="line">.org 0x0780</span><br><span class="line">    EXCEPTION_VECTOR el0_32_error</span><br><span class="line"></span><br><span class="line">.org 0x0800</span><br><span class="line"></span><br><span class="line">.exit_exception:</span><br><span class="line">// restore link register</span><br><span class="line">    ldr x30, [sp, #16 * 16]</span><br><span class="line"></span><br><span class="line">// restore exception link register and saved processor state register</span><br><span class="line">    ldp x0, x1, [sp, #16 * 15]</span><br><span class="line">    msr elr_el1, x0</span><br><span class="line">    msr spsr_el1, x1</span><br><span class="line"></span><br><span class="line">// restore general purpose registers</span><br><span class="line">    ldp x28, x29, [sp, #16 * 14]</span><br><span class="line">    ldp x26, x27, [sp, #16 * 13]</span><br><span class="line">    ldp x24, x25, [sp, #16 * 12]</span><br><span class="line">    ldp x22, x23, [sp, #16 * 11]</span><br><span class="line">    ldp x20, x21, [sp, #16 * 10]</span><br><span class="line">    ldp x18, x19, [sp, #16 * 9]</span><br><span class="line">    ldp x16, x17, [sp, #16 * 8]</span><br><span class="line">    ldp x14, x15, [sp, #16 * 7]</span><br><span class="line">    ldp x12, x13, [sp, #16 * 6]</span><br><span class="line">    ldp x10, x11, [sp, #16 * 5]</span><br><span class="line">    ldp x8, x9, [sp, #16 * 4]</span><br><span class="line">    ldp x6, x7, [sp, #16 * 3]</span><br><span class="line">    ldp x4, x5, [sp, #16 * 2]</span><br><span class="line">    ldp x2, x3, [sp, #16 * 1]</span><br><span class="line">    ldp x0, x1, [sp, #16 * 0]</span><br><span class="line"></span><br><span class="line">// restore stack pointer</span><br><span class="line">    add sp, sp, #CONTEXT_SIZE</span><br><span class="line">    eret</span><br></pre></td></tr></table></figure><p>编辑<code>src/interrupts.rs</code>，文末引入<code>exceptions.s</code>，同时定义结构<code>ExceptionCtx</code>，与<code>src/exceptions.s</code>中<code>EXCEPTION_VECTOR</code>宏保存的<strong>寄存器数据</strong>对应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">// 注意：这里的······代表承接并省略上文代码</span><br><span class="line">use core::arch::global_asm;</span><br><span class="line">global_asm!(include_str!(&quot;exceptions.s&quot;));</span><br><span class="line"></span><br><span class="line">#[repr(C)]</span><br><span class="line">pub struct ExceptionCtx &#123;</span><br><span class="line">    regs: [u64; 30],</span><br><span class="line">    elr_el1: u64,</span><br><span class="line">    spsr_el1: u64,</span><br><span class="line">    lr: u64,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续编辑<code>src/interrupts.rs</code>，在<code>EXCEPTION_VECTOR</code>宏中，每一类<strong>中断</strong>都对应一个<strong>处理函数</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">const EL1_SP0_SYNC: &amp;&#x27;static str = &quot;EL1_SP0_SYNC&quot;;</span><br><span class="line">const EL1_SP0_IRQ: &amp;&#x27;static str = &quot;EL1_SP0_IRQ&quot;;</span><br><span class="line">const EL1_SP0_FIQ: &amp;&#x27;static str = &quot;EL1_SP0_FIQ&quot;;</span><br><span class="line">const EL1_SP0_ERROR: &amp;&#x27;static str = &quot;EL1_SP0_ERROR&quot;;</span><br><span class="line">const EL1_SYNC: &amp;&#x27;static str = &quot;EL1_SYNC&quot;;</span><br><span class="line">const EL1_IRQ: &amp;&#x27;static str = &quot;EL1_IRQ&quot;;</span><br><span class="line">const EL1_FIQ: &amp;&#x27;static str = &quot;EL1_FIQ&quot;;</span><br><span class="line">const EL1_ERROR: &amp;&#x27;static str = &quot;EL1_ERROR&quot;;</span><br><span class="line">const EL0_SYNC: &amp;&#x27;static str = &quot;EL0_SYNC&quot;;</span><br><span class="line">const EL0_IRQ: &amp;&#x27;static str = &quot;EL0_IRQ&quot;;</span><br><span class="line">const EL0_FIQ: &amp;&#x27;static str = &quot;EL0_FIQ&quot;;</span><br><span class="line">const EL0_ERROR: &amp;&#x27;static str = &quot;EL0_ERROR&quot;;</span><br><span class="line">const EL0_32_SYNC: &amp;&#x27;static str = &quot;EL0_32_SYNC&quot;;</span><br><span class="line">const EL0_32_IRQ: &amp;&#x27;static str = &quot;EL0_32_IRQ&quot;;</span><br><span class="line">const EL0_32_FIQ: &amp;&#x27;static str = &quot;EL0_32_FIQ&quot;;</span><br><span class="line">const EL0_32_ERROR: &amp;&#x27;static str = &quot;EL0_32_ERROR&quot;;</span><br><span class="line"></span><br><span class="line">// 调用我们的print!宏打印异常信息，你也可以选择打印异常发生时所有寄存器的信息</span><br><span class="line">fn catch(ctx: &amp;mut ExceptionCtx, name: &amp;str) &#123;</span><br><span class="line">    crate::print!(</span><br><span class="line">        &quot;\n  \</span><br><span class="line">        &#123;&#125; @ 0x&#123;:016x&#125;\n\n &quot;,</span><br><span class="line">        name,</span><br><span class="line">        ctx.elr_el1,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_sp0_sync(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_SP0_SYNC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_sp0_irq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_SP0_IRQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_sp0_fiq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_SP0_FIQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_sp0_error(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_SP0_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_sync(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_SYNC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_irq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_IRQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_fiq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_FIQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_error(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL1_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_sync(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_SYNC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_irq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_IRQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_fiq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_FIQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_error(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_32_sync(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_32_SYNC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_32_irq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_32_IRQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_32_fiq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_32_FIQ);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el0_32_error(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    catch(ctx, EL0_32_ERROR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/start.s</code>，载入<strong>异常向量表</strong><code>exception_vector_table</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">        mov     sp, x30</span><br><span class="line"></span><br><span class="line">        // Initialize exceptions</span><br><span class="line">        ldr     x0, =exception_vector_table</span><br><span class="line">        msr     vbar_el1, x0</span><br><span class="line">        isb</span><br><span class="line"></span><br><span class="line">        bl      not_main</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/start.s.png"                        class="" title="start.s"                 ><p>编辑<code>aarch64-qemu.ld</code>，处理链接脚本，为<code>exceptions.s</code>中定义的<code>exceptions_vector_table</code>选择位置，同时满足<strong>4K对齐</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">    .text.boot : &#123; *(.text.boot) &#125;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        KEEP(*(.text.boot))</span><br><span class="line">        *(.text.exceptions)</span><br><span class="line">        . = ALIGN(4096); /* align for exceptions_vector_table*/</span><br><span class="line">        *(.text.exceptions_vector_table)</span><br><span class="line">        *(.text)</span><br><span class="line">    &#125;</span><br><span class="line">    .data : &#123; *(.data) &#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/aarch64-qemu.ld.png"                        class="" title="aarch64-qemu.ld"                 ><p>编辑<code>src/main.rs</code>，引入<code>interrupts.rs</code>模块，并在<code>not_main()</code>函数中注释掉之前的输出代码，调用<code>init_gicv2()</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">mod panic;</span><br><span class="line">mod uart_console;</span><br><span class="line">mod interrupts;</span><br><span class="line"></span><br><span class="line">global_asm!(include_str!(&quot;start.s&quot;));</span><br><span class="line">// ······</span><br><span class="line">#[no_mangle] // 不修改函数名</span><br><span class="line">pub extern &quot;C&quot; fn not_main() &#123;</span><br><span class="line">    // const UART0: *mut u8 = 0x0900_0000 as *mut u8;</span><br><span class="line">    // let out_str = b&quot;AArch64 Bare Metal&quot;;</span><br><span class="line">    // for byte in out_str &#123;</span><br><span class="line">    //     unsafe &#123;</span><br><span class="line">    //         ptr::write_volatile(UART0, *byte);</span><br><span class="line">    //     &#125;</span><br><span class="line">    // &#125;</span><br><span class="line">    // // print_something(); // 调用测试函数</span><br><span class="line">    // println!(&quot;\n[0] Hello from Rust!&quot;);</span><br><span class="line">    interrupts::init_gicv2();</span><br><span class="line">&#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/main.rs.png"                        class="" title="main.rs"                 ><p>至此，我们已经在<strong>EL1级别</strong>定义了完整的<strong>中断处理框架</strong>，可以开始处理实际的<strong>中断</strong>了。</p><h3 id="2-使能时钟中断"><a href="#2-使能时钟中断" class="headerlink" title="2) 使能时钟中断"></a>2) 使能时钟中断</h3><p>编辑<code>src/interrupts.rs</code>，在<code>init_gicv2</code>函数中添加<strong>使能时钟中断</strong>，同时配置<strong>时钟</strong>每秒产生一次<strong>中断</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">use core::arch::asm;</span><br><span class="line">pub fn init_gicv2() &#123;</span><br><span class="line">    // ······</span><br><span class="line">    // 启用distributor和cpu interface</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        ptr::write_volatile(GICD_CTLR, GICD_CTLR_ENABLE);</span><br><span class="line">        ptr::write_volatile(GICC_CTLR, GICC_CTLR_ENABLE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 电平触发</span><br><span class="line">    const ICFGR_LEVEL: u32 = 0;</span><br><span class="line">    // 时钟中断号30</span><br><span class="line">    const TIMER_IRQ: u32 = 30;</span><br><span class="line">    set_config(TIMER_IRQ, ICFGR_LEVEL); // 电平触发</span><br><span class="line">    set_priority(TIMER_IRQ, 0); // 优先级设定</span><br><span class="line">    clear(TIMER_IRQ); // 清除中断请求</span><br><span class="line">    enable(TIMER_IRQ); // 使能中断</span><br><span class="line">    </span><br><span class="line">    //配置timer</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        asm!(&quot;mrs x1, CNTFRQ_EL0&quot;); // 读取系统频率</span><br><span class="line">        asm!(&quot;msr CNTP_TVAL_EL0, x1&quot;);  // 设置定时寄存器</span><br><span class="line">        asm!(&quot;mov x0, 1&quot;);</span><br><span class="line">        asm!(&quot;msr CNTP_CTL_EL0, x0&quot;); // enable=1, imask=0, istatus= 0,</span><br><span class="line">        asm!(&quot;msr daifclr, #2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/interrupts.rs.png"                        class="" title="interrupts.rs"                 ><h3 id="3-调试"><a href="#3-调试" class="headerlink" title="3) 调试"></a>3) 调试</h3><p><strong>编译</strong>并以<strong>调试模式</strong>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -S -s</span><br></pre></td></tr></table></figure><p><strong>保持</strong>此<strong>终端会话</strong>，<strong>新开一个终端</strong>，配置<strong>GDB环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/ToolChain/gcc-arm-10.3-2021.07-x86_64-aarch64-none-elf/bin</span><br><span class="line">export ToolChainPath=`pwd`</span><br><span class="line">cd ~/rui_armv8_os</span><br><span class="line">export PATH=$ToolChainPath:$PATH</span><br></pre></td></tr></table></figure><p>启动<strong>GDB调试客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aarch64-none-elf-gdb target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><p>连接<strong>远程客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target remote localhost:1234</span><br></pre></td></tr></table></figure><p>在<code>not_main()</code>函数处<strong>设置断点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b not_main</span><br></pre></td></tr></table></figure><p>运行到<code>interrupts::init_gicv2();</code>语句之前。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/init_gicv2().png"                        class="" title="init_gicv2()"                 ><p>我们之前在<code>init_gicv2()</code>函数中加入了以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 电平触发</span><br><span class="line">const ICFGR_LEVEL: u32 = 0;</span><br><span class="line">// 时钟中断号30</span><br><span class="line">const TIMER_IRQ: u32 = 30;</span><br><span class="line">set_config(TIMER_IRQ, ICFGR_LEVEL); //电平触发</span><br><span class="line">set_priority(TIMER_IRQ, 0); //优先级设定</span><br><span class="line">clear(TIMER_IRQ); //清除中断请求</span><br><span class="line">enable(TIMER_IRQ); //使能中断</span><br></pre></td></tr></table></figure><p>因此，当我们运行<code>init_gicv2()</code>函数后，其中的<code>enable(TIMER_IRQ);</code>会产生<strong>使能中断</strong>。我们查看<code>enable()</code>函数的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 使能中断号为interrupt的中断</span><br><span class="line">pub fn enable(interrupt: u32) &#123;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        ptr::write_volatile(</span><br><span class="line">            GICD_ISENABLER.add((interrupt / GICD_ISENABLER_SIZE) as usize),</span><br><span class="line">            1 &lt;&lt; (interrupt % GICD_ISENABLER_SIZE)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知，该函数对<code>GICD_ISENABLER + interrupt / GICD_ISENABLER_SIZE</code>对应的地址<strong>易失性</strong>写入<code>1 &lt;&lt; (interrupt % GICD_ISENABLER_SIZE)</code>。</p><p>我们之前在<code>src/interrupts.rs</code>中定义<code>GICD</code>寄存器内存映射<code>GICD_BASE</code>的起始地址为<code>0x08000000</code>，而<code>GICD_ISENABLER</code>的地址为<code>GICD_BASE + 0x0100 = 0x08000100</code>，<code>GICD_ISENABLER_SIZE</code>为<code>32</code>，<code>TIMER_IRQ</code>为<code>30</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const GICD_BASE: u64 = 0x08000000;</span><br><span class="line">const GICD_ISENABLER: *mut u32 = (GICD_BASE + 0x0100) as *mut u32;</span><br><span class="line">const GICD_ISENABLER_SIZE: u32 = 32;</span><br><span class="line">const TIMER_IRQ: u32 = 30;</span><br></pre></td></tr></table></figure><p>因此，对于<code>enable(TIMER_IRQ);</code>，我们可以理解为在<code>0x08000100</code>中<strong>易失性</strong>写入<strong>1左移30位</strong>后的<strong>二进制数</strong>。</p><p>查看<code>0x08000100</code>地址中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x/t 0x08000100</span><br></pre></td></tr></table></figure><p>我们得到了<code>0000000000000000111111111111111</code>，继续运行，执行<code>interrupts::init_gicv2();</code>，再次查看<code>0x08000100</code>地址中的值，此时变为了<code>0100000000000000111111111111111</code></p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/init_gicv2()2.png"                        class="" title="init_gicv2()2"                 ><p><del>由此证明<strong>中断</strong>产生了。</del><br>实际上这里<strong>并没有产生中断</strong>！我们只是<strong>初始化</strong>了<strong>GICV2</strong>并且写入<strong>TIMER_IRQ中断号</strong>，如果<strong>时钟中断</strong>生效了，那么理论上来说<strong>每隔一秒</strong>都会<strong>调用一次</strong><code>el1_irq()</code>回调函数并且<strong>打印相应的中断信息</strong>，<strong>哪里出问题了呢？</strong></p><h1 id="四-、实现真正的时钟中断"><a href="#四-、实现真正的时钟中断" class="headerlink" title="四*、实现真正的时钟中断"></a>四*、实现真正的时钟中断</h1><h2 id="1-整理代码"><a href="#1-整理代码" class="headerlink" title="1. 整理代码"></a>1. 整理代码</h2><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceFourClean.tar.gz" title="下载">下载</a></p></blockquote><p>在实现真正的<strong>时钟中断</strong>之前，我们的<strong>代码</strong>已经有<strong>亿</strong>点乱了，并且还会有很多<strong>恼人</strong>的<strong>unused warnings</strong>，因此我们先<strong>整理</strong>一下<strong>代码</strong>。<br>首先打开<code>src/main.rs</code>：</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.1.1.png"                        class="" title="4.1.1"                 ><p>注意到这里的<code>core::ptr</code>并没有被使用。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.1.2.png"                        class="" title="4.1.2"                 ><p>因此我们将其<strong>移除</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.1.3.png"                        class="" title="4.1.3"                 ><p><code>not_main()</code>函数中<strong>移除不需要的代码</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.1.4.png"                        class="" title="4.1.4"                 ><p>只保留一个<code>println!宏</code>以及<strong>中断初始化函数</strong><code>init_gicv2()</code>即可。<br><code>print_something()</code>函数我们亦不再用到，<strong>移除其相关代码</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.1.5.png"                        class="" title="4.1.5"                 ><p>现在看起来就<strong>清爽</strong>多了~<br>接下来在<code>src/interrupts.rs</code>中有很多<strong>没有用到的常量和函数</strong>，通常称为<code>dead_code</code>，但是为了<strong>保证完整性</strong>我们<strong>不选择删除它们</strong>，而是<strong>忽略</strong>掉。<br>在<code>src/main.rs</code>中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#![allow(dead_code)] // 忽略dead_code</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.2.1.png"                        class="" title="4.2.1"                 ><p>最后一个<strong>warning</strong>在<code>aarch64-unknown-none-softfloat.json</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;abi-blacklist&quot;: [</span><br><span class="line">      &quot;stdcall&quot;,</span><br><span class="line">      &quot;fastcall&quot;,</span><br><span class="line">      &quot;vectorcall&quot;,</span><br><span class="line">      &quot;thiscall&quot;,</span><br><span class="line">      &quot;win64&quot;,</span><br><span class="line">      &quot;sysv64&quot;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>这个<code>abi-blacklist</code>推测是<strong>屏蔽一些接口</strong>，我们<strong>并没有调用这些接口</strong>，所以<strong>直接移除</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.3.1.png"                        class="" title="4.3.1"                 ><p>至此我们的<strong>warnings</strong>已经 <strong>全部处理(忽略)</strong> 完了。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/4.3.2.png"                        class="" title="4.3.2"                 ><h2 id="2-实现-1"><a href="#2-实现-1" class="headerlink" title="2. 实现"></a>2. 实现</h2><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceFourPlus.tar.gz" title="下载">下载</a></p></blockquote><p>在<strong>查阅大量的资料</strong>后，我找到了本次实验的<strong>原型(?)</strong><a class="link"   href="https://github.com/lowenware/leos-kernel" >LeOS<i class="fas fa-external-link-alt"></i></a>以及其对应的<strong>时钟中断</strong>部分的<a class="link"   href="https://lowenware.com/blog/osdev/aarch64-gic-and-timer-interrupt/" >博客<i class="fas fa-external-link-alt"></i></a>。仔细阅读可以发现他实现<strong>时钟中断</strong>的<a class="link"   href="https://github.com/lowenware/leos-kernel/commit/7e89a52f91a98bdcbc1357091159e9391aff2d8d#diff-b02a7b840232145efa38636f47d5c4e8e2ea0cd3d98b449ffd3908e38d2dadc1L1" >Commit<i class="fas fa-external-link-alt"></i></a>。<br>在与<a class="link"   href="https://noionion.top/" >noionion<i class="fas fa-external-link-alt"></i></a>的<strong>合作</strong>及其<strong>帮助</strong>下，我们发现了<strong>LeOS</strong>关于<strong>时钟中断</strong>的实现与<a class="link"   href="https://os2022exps-doc.readthedocs.io/zh_CN/latest/exp4/index.html" >实验四 中断<i class="fas fa-external-link-alt"></i></a>中有一些<strong>不一样</strong>的地方：</p><p>在<strong>初始化中断</strong>时，<strong>LeOS</strong>还多了以下<strong>代码</strong>:</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/Loop.png"                        class="" title="Loop"                 ><p>因此我们在<code>src/interrupts.rs</code>下的<code>init_gicv2()</code>函数<strong>尾部</strong>添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loop &#123;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        asm!(&quot;mrs x0, CNTPCT_EL0&quot;); // 系统计数器</span><br><span class="line">        asm!(&quot;mrs x0, CNTP_CTL_EL0&quot;); // 控制计数器</span><br><span class="line">        asm!(&quot;mrs x0, CNTP_TVAL_EL0&quot;); // 定时计数器</span><br><span class="line">        asm!(&quot;mrs x0, CNTP_CVAL_EL0&quot;); // 比较计数器</span><br><span class="line">        asm!(&quot;wfi&quot;); // Wait for Interrupt 等待中断，下一次中断发生前都停止在此处</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的五句 <strong>asm!</strong> 其实<strong>前四句</strong>是<strong>无效操作</strong>，可以<strong>仅执行最后一句</strong>。<br>另外更严谨地说，该 <strong>loop {}</strong> 亦可放在 <strong>not_main()</strong> 函数中，调用 <strong>init_gicv2()</strong> 初始化后。</p></blockquote><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%BC%80%E5%90%AF%E4%B8%AD%E6%96%AD%E5%9B%9E%E8%B0%83.png"                        class="" title="开启中断回调"                 ><p><strong>编译</strong>并<strong>运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%A7%A6%E5%8F%91.png"                        class="" title="第一次触发"                 ><p>在<strong>运行</strong>后，首先会<strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0] Hello from Rust!</span><br></pre></td></tr></table></figure><p>大约<strong>1s</strong>后会<strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EL1_IRQ @ 0x</span><br></pre></td></tr></table></figure><p>说明这次我们<strong>成功</strong>调用了<code>el1_irq()</code><strong>回调函数</strong>！<br>但<strong>问题</strong>是，<strong>时钟中断</strong>的<strong>理想状态</strong>应是每隔<strong>1s</strong>就会调用一次<code>el1_irq()</code><strong>回调函数</strong>，这里调用一次后却<strong>不再变化</strong>了。<br>这里其实是因为<code>catch()</code>函数在调用第一个参数<code>ctx</code>时会<strong>发生阻塞</strong>，<del><strong>具体原因不详</strong>。</del></p><blockquote><p>若想<strong>修复</strong>这个<strong>问题</strong>，可以编辑<code>.cargo/config.toml</code>，<strong>清空</strong>然后改为<strong>以下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[unstable]</span><br><span class="line">build-std = [&quot;core&quot;, &quot;compiler_builtins&quot;] </span><br><span class="line"></span><br><span class="line">[build]</span><br><span class="line">target = &quot;aarch64-unknown-none-softfloat&quot;</span><br><span class="line">rustflags = [&quot;-C&quot;,&quot;link-arg=-Taarch64-qemu.ld&quot;, &quot;-C&quot;, &quot;target-cpu=cortex-a53&quot;, &quot;-D&quot;, &quot;warnings&quot;]</span><br></pre></td></tr></table></figure></blockquote><p>因此我们<strong>修改该函数</strong>，编辑<code>interrupts.rs</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">// 调用我们的print!宏打印异常信息，你也可以选择打印异常发生时所有寄存器的信息</span><br><span class="line">fn catch(ctx: &amp;mut ExceptionCtx, name: &amp;str) &#123;</span><br><span class="line">    crate::print!(&quot;&#123;&#125;\n&quot;, name);</span><br><span class="line">&#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9catch.png"                        class="" title="修改catch"                 ><p>然后<strong>编译运行</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%B8%8D%E5%81%9C%E8%BE%93%E5%87%BA.png"                        class="" title="不停输出"                 ><p>可以发现现在确实能够<strong>一直触发中断</strong>并且<strong>输出回调函数名</strong>了。但这每次<strong>输出间隔</strong>的<strong>时间太短</strong>了吧！<br>这里我们需要了解一些<strong>概念</strong>：</p><ul><li>在<strong>ARM体系结构</strong>中，<strong>处理器内部</strong>有<strong>通用计时器</strong>，<strong>通用计时器</strong>包含一组<strong>比较器</strong>，用来与<strong>系统计数器(CNTPCT_EL0)<strong>进行比较，一旦</strong>通用计时器</strong>的值<strong>小于等于系统计数器</strong>时便会产生<strong>时钟中断</strong>。</li><li><strong>比较寄存器(CNTP_CVAL_EL0)</strong> 有64位，如果<strong>设置</strong>了之后，当<strong>系统计数器达到或超过</strong>了这个<strong>值</strong>之后，就会<strong>触发定时器中断</strong>。</li><li><strong>定时寄存器(CNTP_TVAL_EL0)</strong> 有32位，如果<strong>设置</strong>了之后，会将<strong>比较寄存器</strong>设置成当前<strong>系统计数器</strong>加上设置的<strong>定时寄存器</strong>的值。<blockquote><blockquote><p>详见<a class="link"   href="https://github.com/2X-ercha/blogOS-armV8/blob/44d7bf5b7296be0e01398459456b265fa68e4e6d/src/main.rs#L64" >此处<i class="fas fa-external-link-alt"></i></a></p></blockquote></blockquote></li></ul><p>因此我们若想要有<strong>延时效果</strong>，需要在调用<code>el1_irq()</code><strong>回调函数</strong>时<strong>再次写入定时寄存器</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asm!(&quot;mrs x1, CNTFRQ_EL0&quot;);</span><br><span class="line">asm!(&quot;msr CNTP_TVAL_EL0, x1&quot;);</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%86%99%E5%85%A5%E5%AE%9A%E6%97%B6%E5%AF%84%E5%AD%98%E5%99%A8.png"                        class="" title="写入定时寄存器"                 ><p>此时再<strong>编译运行</strong>，我们就已经<strong>成功</strong>做到<strong>每1s</strong>处理一次<strong>时钟中断</strong>了！</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%AF%8F%E4%B8%80%E7%A7%92%E8%A7%A6%E5%8F%91%E4%B8%80%E6%AC%A1.png"                        class="" title="每一秒触发一次"                 ><h1 id="五、输入"><a href="#五、输入" class="headerlink" title="五、输入"></a>五、输入</h1><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceFive.tar.gz" title="下载">下载</a></p><p><strong>QEMU</strong>的<strong>virt机器</strong>默认没有<strong>键盘</strong>作为<strong>输入设备</strong>，但当我们执行<strong>QEMU</strong>使用<code>-nographic</code>参数（Disable graphical output and redirect serial I/Os to console）时<strong>QEMU</strong>会将<strong>串口重定向</strong>到<strong>控制台</strong>，因此我们可以使用<strong>UART</strong>作为<strong>输入设备</strong>。</p></blockquote><h2 id="1-安装tock-registers库"><a href="#1-安装tock-registers库" class="headerlink" title="1. 安装tock-registers库"></a>1. 安装tock-registers库</h2><blockquote><p>在<strong>实验四</strong>中，针对<strong>GICD</strong>，<strong>GICC</strong>，<strong>TIMER</strong>等<strong>硬件</strong>我们定义了<strong>大量</strong>的<strong>常量</strong>和<strong>寄存器值</strong>，这在使用时过于<strong>繁琐</strong>也<strong>容易出错</strong>。因此我们决定采用<strong>tock-registers</strong>库。</p></blockquote><p>在<code>Cargo.toml</code>中的<code>[dependencies]</code>处中加入<strong>依赖</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tock-registers = &quot;0.7.0&quot;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%B7%BB%E5%8A%A0tr%E4%BE%9D%E8%B5%96.png"                        class="" title="添加tr依赖"                 ><h2 id="2-重构"><a href="#2-重构" class="headerlink" title="2. 重构"></a>2. 重构</h2><blockquote><p>为了不至于使<code>src/uart_console.rs</code>文件过长，我们选择<strong>重构</strong><code>uart_console.rs</code>。</p></blockquote><p>首先进入项目<strong>根目录</strong>，创建<code>src/uart_console</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir src/uart_console</span><br></pre></td></tr></table></figure><p>将原<code>uart_console.rs</code><strong>更名</strong>为<code>mod.rs</code>，且置于<code>src/uart_console</code>目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv src/uart_console.rs src/uart_console/mod.rs</span><br></pre></td></tr></table></figure><p>最后<strong>新建</strong><code>src/uart_console/pl011.rs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/uart_console/pl011.rs</span><br></pre></td></tr></table></figure><p>依据<strong>tock_registers</strong>库的要求对<code>pl011</code>所涉及到的<strong>寄存器</strong>进行描述。<br>编辑<code>src/uart_console/pl011.rs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">use tock_registers::&#123;registers::&#123;ReadOnly, ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;</span><br><span class="line"></span><br><span class="line">pub const PL011REGS: *mut PL011Regs = (0x0900_0000) as *mut PL011Regs;</span><br><span class="line"></span><br><span class="line">register_bitfields![</span><br><span class="line">    u32,</span><br><span class="line"></span><br><span class="line">    pub UARTDR [</span><br><span class="line">        DATA OFFSET(0) NUMBITS(8) []</span><br><span class="line">    ],</span><br><span class="line">    /// Flag Register</span><br><span class="line">    pub UARTFR [</span><br><span class="line">        /// Transmit FIFO full. The meaning of this bit depends on the</span><br><span class="line">        /// state of the FEN bit in the UARTLCR_ LCRH Register. If the</span><br><span class="line">        /// FIFO is disabled, this bit is set when the transmit</span><br><span class="line">        /// holding register is full. If the FIFO is enabled, the TXFF</span><br><span class="line">        /// bit is set when the transmit FIFO is full.</span><br><span class="line">        TXFF OFFSET(6) NUMBITS(1) [],</span><br><span class="line"></span><br><span class="line">        /// Receive FIFO empty. The meaning of this bit depends on the</span><br><span class="line">        /// state of the FEN bit in the UARTLCR_H Register. If the</span><br><span class="line">        /// FIFO is disabled, this bit is set when the receive holding</span><br><span class="line">        /// register is empty. If the FIFO is enabled, the RXFE bit is</span><br><span class="line">        /// set when the receive FIFO is empty.</span><br><span class="line">        RXFE OFFSET(4) NUMBITS(1) []</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /// Integer Baud rate divisor</span><br><span class="line">    pub UARTIBRD [</span><br><span class="line">        /// Integer Baud rate divisor</span><br><span class="line">        IBRD OFFSET(0) NUMBITS(16) []</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /// Fractional Baud rate divisor</span><br><span class="line">    pub UARTFBRD [</span><br><span class="line">        /// Fractional Baud rate divisor</span><br><span class="line">        FBRD OFFSET(0) NUMBITS(6) []</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /// Line Control register</span><br><span class="line">    pub UARTLCR_H [</span><br><span class="line">        /// Parity enable. If this bit is set to 1, parity checking and generation</span><br><span class="line">        /// is enabled, else parity is disabled and no parity bit added to the data frame.</span><br><span class="line">        PEN OFFSET(1) NUMBITS(1) [</span><br><span class="line">            Disabled = 0,</span><br><span class="line">            Enabled = 1</span><br><span class="line">        ],</span><br><span class="line">        /// Two stop bits select. If this bit is set to 1, two stop bits are transmitted</span><br><span class="line">        /// at the end of the frame.</span><br><span class="line">        STP2 OFFSET(3) NUMBITS(1) [</span><br><span class="line">            Stop1 = 0,</span><br><span class="line">            Stop2 = 1</span><br><span class="line">        ],</span><br><span class="line">        /// Enable FIFOs.</span><br><span class="line">        FEN OFFSET(4) NUMBITS(1) [</span><br><span class="line">            Disabled = 0,</span><br><span class="line">            Enabled = 1</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /// Word length. These bits indicate the number of data bits</span><br><span class="line">        /// transmitted or received in a frame.</span><br><span class="line">        WLEN OFFSET(5) NUMBITS(2) [</span><br><span class="line">            FiveBit = 0b00,</span><br><span class="line">            SixBit = 0b01,</span><br><span class="line">            SevenBit = 0b10,</span><br><span class="line">            EightBit = 0b11</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    /// Control Register</span><br><span class="line">    pub UARTCR [</span><br><span class="line">        /// Receive enable. If this bit is set to 1, the receive</span><br><span class="line">        /// section of the UART is enabled. Data reception occurs for</span><br><span class="line">        /// UART signals. When the UART is disabled in the middle of</span><br><span class="line">        /// reception, it completes the current character before</span><br><span class="line">        /// stopping.</span><br><span class="line">        RXE    OFFSET(9) NUMBITS(1) [</span><br><span class="line">            Disabled = 0,</span><br><span class="line">            Enabled = 1</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /// Transmit enable. If this bit is set to 1, the transmit</span><br><span class="line">        /// section of the UART is enabled. Data transmission occurs</span><br><span class="line">        /// for UART signals. When the UART is disabled in the middle</span><br><span class="line">        /// of transmission, it completes the current character before</span><br><span class="line">        /// stopping.</span><br><span class="line">        TXE    OFFSET(8) NUMBITS(1) [</span><br><span class="line">            Disabled = 0,</span><br><span class="line">            Enabled = 1</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        /// UART enable</span><br><span class="line">        UARTEN OFFSET(0) NUMBITS(1) [</span><br><span class="line">            /// If the UART is disabled in the middle of transmission</span><br><span class="line">            /// or reception, it completes the current character</span><br><span class="line">            /// before stopping.</span><br><span class="line">            Disabled = 0,</span><br><span class="line">            Enabled = 1</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    pub UARTIMSC [</span><br><span class="line">        RXIM OFFSET(4) NUMBITS(1) [</span><br><span class="line">            Disabled = 0,</span><br><span class="line">            Enabled = 1</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    /// Interupt Clear Register</span><br><span class="line">    pub UARTICR [</span><br><span class="line">        /// Meta field for all pending interrupts</span><br><span class="line">        ALL OFFSET(0) NUMBITS(11) [</span><br><span class="line">            Clear = 0x7ff</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">register_structs! &#123;</span><br><span class="line">    pub PL011Regs &#123;</span><br><span class="line">        (0x00 =&gt; pub dr: ReadWrite&lt;u32, UARTDR::Register&gt;),                   // 0x00</span><br><span class="line">        (0x04 =&gt; __reserved_0),               // 0x04</span><br><span class="line">        (0x18 =&gt; pub fr: ReadOnly&lt;u32, UARTFR::Register&gt;),      // 0x18</span><br><span class="line">        (0x1c =&gt; __reserved_1),               // 0x1c</span><br><span class="line">        (0x24 =&gt; pub ibrd: WriteOnly&lt;u32, UARTIBRD::Register&gt;), // 0x24</span><br><span class="line">        (0x28 =&gt; pub fbrd: WriteOnly&lt;u32, UARTFBRD::Register&gt;), // 0x28</span><br><span class="line">        (0x2C =&gt; pub lcr_h: WriteOnly&lt;u32, UARTLCR_H::Register&gt;), // 0x2C</span><br><span class="line">        (0x30 =&gt; pub cr: WriteOnly&lt;u32, UARTCR::Register&gt;),     // 0x30</span><br><span class="line">        (0x34 =&gt; __reserved_2),               // 0x34</span><br><span class="line">        (0x38 =&gt; pub imsc: ReadWrite&lt;u32, UARTIMSC::Register&gt;), // 0x38</span><br><span class="line">        (0x44 =&gt; pub icr: WriteOnly&lt;u32, UARTICR::Register&gt;),   // 0x44</span><br><span class="line">        (0x48 =&gt; @END),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>register_bitfields!宏</strong>按照<strong>寄存器</strong>的<strong>位结构</strong>进行<strong>描述</strong>，注意最后要加<strong>分号”;”<strong>，只要</strong>注册</strong>自己想<strong>处理</strong>的<strong>位</strong>即可。</p><p><strong>register_structs!宏</strong>最后需加上 <strong>(0x** =&gt; @END)</strong> ，表示结束。</p></blockquote><h2 id="3-数据接收中断"><a href="#3-数据接收中断" class="headerlink" title="3. 数据接收中断"></a>3. 数据接收中断</h2><p>编辑<code>src/uart_console/mod.rs</code>，修改<strong>Writer</strong>的<strong>初始化方式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">use core::&#123;fmt, ptr&#125;;</span><br><span class="line"></span><br><span class="line">use lazy_static::lazy_static;</span><br><span class="line">use spin::Mutex;</span><br><span class="line"></span><br><span class="line">use tock_registers::interfaces::Writeable;</span><br><span class="line"></span><br><span class="line">pub mod pl011;</span><br><span class="line">use pl011::*;</span><br><span class="line"></span><br><span class="line">lazy_static! &#123;</span><br><span class="line">    /// A global `Writer` instance that can be used for printing to the VGA text buffer.</span><br><span class="line">    ///</span><br><span class="line">    /// Used by the `print!` and `println!` macros.</span><br><span class="line">    pub static ref WRITER: Mutex&lt;Writer&gt; = Mutex::new(Writer::new());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// Like the `print!` macro in the standard library, but prints to the VGA text buffer.</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9%E5%88%9D%E5%A7%8B%E5%8C%96.png"                        class="" title="修改初始化"                 ><p>编辑<code>src/uart_console/mod.rs</code>，为<strong>Writer</strong>结构实现<strong>构造函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//嵌入式系统使用串口，而不是vga，直接输出，没有颜色控制，不记录列号，也没有frame buffer，所以采用空结构</span><br><span class="line">pub struct Writer;</span><br><span class="line"></span><br><span class="line">//往串口寄存器写入字节和字符串进行输出</span><br><span class="line">impl Writer &#123;</span><br><span class="line">    pub fn write_byte(&amp;mut self, byte: u8) &#123;</span><br><span class="line">        // ······</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pub fn write_string(&amp;mut self, s: &amp;str) &#123;</span><br><span class="line">        // ······</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pub fn new() -&gt; Writer&#123;</span><br><span class="line">        unsafe &#123;</span><br><span class="line">            // pl011 device registers</span><br><span class="line">            let pl011r: &amp;PL011Regs = &amp;*PL011REGS;</span><br><span class="line">    </span><br><span class="line">            // 禁用pl011</span><br><span class="line">            pl011r.cr.write(UARTCR::TXE::Disabled + UARTCR::RXE::Disabled + UARTCR::UARTEN::Disabled);</span><br><span class="line">            // 清空中断状态</span><br><span class="line">            pl011r.icr.write(UARTICR::ALL::Clear);</span><br><span class="line">            // 设定中断mask，需要使能的中断</span><br><span class="line">            pl011r.imsc.write(UARTIMSC::RXIM::Enabled);</span><br><span class="line">            // IBRD = UART_CLK / (16 * BAUD_RATE)</span><br><span class="line">            // FBRD = ROUND((64 * MOD(UART_CLK,(16 * BAUD_RATE))) / (16 * BAUD_RATE))</span><br><span class="line">            // UART_CLK = 24M</span><br><span class="line">            // BAUD_RATE = 115200</span><br><span class="line">            pl011r.ibrd.write(UARTIBRD::IBRD.val(13));</span><br><span class="line">            pl011r.fbrd.write(UARTFBRD::FBRD.val(1));</span><br><span class="line">            // 8N1 FIFO enable</span><br><span class="line">            pl011r.lcr_h.write(UARTLCR_H::WLEN::EightBit + UARTLCR_H::PEN::Disabled + UARTLCR_H::STP2::Stop1</span><br><span class="line">                + UARTLCR_H::FEN::Enabled);</span><br><span class="line">            // enable pl011</span><br><span class="line">            pl011r.cr.write(UARTCR::UARTEN::Enabled + UARTCR::RXE::Enabled + UARTCR::TXE::Enabled);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        Writer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">impl core::fmt::Write for Writer &#123;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png"                        class="" title="构造函数"                 ><p>继续编辑<code>src/uart_console/mod.rs</code>，修改<code>write_byte()</code>函数，使用我们通过<strong>宏</strong>描述的<strong>寄存器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//嵌入式系统使用串口，而不是vga，直接输出，没有颜色控制，不记录列号，也没有frame buffer，所以采用空结构</span><br><span class="line">pub struct Writer;</span><br><span class="line"></span><br><span class="line">//往串口寄存器写入字节和字符串进行输出</span><br><span class="line">impl Writer &#123;</span><br><span class="line">    pub fn write_byte(&amp;mut self, byte: u8) &#123;</span><br><span class="line">        // const UART0: *mut u8 = 0x0900_0000 as *mut u8;</span><br><span class="line">        unsafe &#123;</span><br><span class="line">            // pl011 device registers</span><br><span class="line">            let pl011r: &amp;PL011Regs = &amp;*PL011REGS;</span><br><span class="line">    </span><br><span class="line">            // ptr::write_volatile(UART0, byte);</span><br><span class="line">            pl011r.dr.write(UARTDR::DATA.val(byte as u32));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pub fn write_string(&amp;mut self, s: &amp;str) &#123;</span><br><span class="line">    // ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9wb%E5%87%BD%E6%95%B0.png"                        class="" title="修改wb函数"                 ><p>编辑<code>src/interrupts.rs</code>，修改<code>init_gicv2()</code>函数，对<strong>UART</strong>的<strong>数据接收中断</strong>进行<strong>初始化</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">    //配置timer</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        // ······</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 初始化UART0 中断</span><br><span class="line">    // interrupts = &lt;0x00 0x01 0x04&gt;; SPI, 0x01, level</span><br><span class="line">    set_config(UART0_IRQ, ICFGR_LEVEL); //电平触发</span><br><span class="line">    set_priority(UART0_IRQ, 0); //优先级设定</span><br><span class="line">    // set_core(TIMER_IRQ, 0x1); // 单核实现无需设置中断目标核</span><br><span class="line">    clear(UART0_IRQ); //清除中断请求</span><br><span class="line">    enable(UART0_IRQ); //使能中断</span><br><span class="line"></span><br><span class="line">    loop &#123;</span><br><span class="line">        // ······</span><br><span class="line">    &#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E5%A4%87%E4%B8%AD%E6%96%AD.png"                        class="" title="初始化设备中断"                 ><p>编辑<code>src/interrupts.rs</code>，接下来我们定义<code>UART0_IRQ</code><strong>全局常量</strong>，同时把<code>TIMER_IRQ</code>也修改为<strong>全局常量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 时钟中断号</span><br><span class="line">const TIMER_IRQ: u32 = 30;</span><br><span class="line">// 设备中断号</span><br><span class="line">const UART0_IRQ: u32 = 33;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%85%A8%E5%B1%80%E5%B8%B8%E9%87%8F.png"                        class="" title="全局常量"                 ><p>继续编辑<code>src/interrupts.rs</code>，对<strong>UART</strong>的<strong>数据接收中断</strong>进行<strong>处理</strong>，并修改<strong>timer中断</strong>的<strong>处理方法</strong>，使之<strong>每隔2秒输出一个点</strong>。<br>在<strong>文末</strong>添加以下<strong>三个函数</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">use tock_registers::interfaces::Readable;</span><br><span class="line">fn handle_irq_lines(ctx: &amp;mut ExceptionCtx, _core_num: u32, irq_num: u32) &#123;</span><br><span class="line">    if irq_num == TIMER_IRQ &#123;</span><br><span class="line">        handle_timer_irq(ctx);</span><br><span class="line">    &#125;else if irq_num == UART0_IRQ &#123;</span><br><span class="line">        handle_uart0_rx_irq(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        catch(ctx, EL1_IRQ);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn handle_timer_irq(_ctx: &amp;mut ExceptionCtx)&#123;</span><br><span class="line"></span><br><span class="line">    crate::print!(&quot;.&quot;);</span><br><span class="line"></span><br><span class="line">    // 每2秒产生一次中断</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        asm!(&quot;mrs x1, CNTFRQ_EL0&quot;);</span><br><span class="line">        asm!(&quot;add x1, x1, x1&quot;);</span><br><span class="line">        asm!(&quot;msr CNTP_TVAL_EL0, x1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn handle_uart0_rx_irq(_ctx: &amp;mut ExceptionCtx)&#123;</span><br><span class="line">    use crate::uart_console::pl011::*;</span><br><span class="line"></span><br><span class="line">    crate::print!(&quot;\nInput interrupt: &quot;);</span><br><span class="line">    unsafe&#123;</span><br><span class="line">        // pl011 device registers</span><br><span class="line">        let pl011r: &amp;PL011Regs = &amp;*PL011REGS;</span><br><span class="line"></span><br><span class="line">        let mut flag = pl011r.fr.read(UARTFR::RXFE);</span><br><span class="line">        while flag != 1 &#123;</span><br><span class="line">            let value = pl011r.dr.read(UARTDR::DATA);</span><br><span class="line"></span><br><span class="line">            crate::print!(&quot;&#123;&#125;&quot;, value as u8 as char);</span><br><span class="line">            flag = pl011r.fr.read(UARTFR::RXFE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续编辑<code>src/interrupts.rs</code>，修改<code>el1_irq()</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#[no_mangle]</span><br><span class="line">unsafe extern &quot;C&quot; fn el1_irq(ctx: &amp;mut ExceptionCtx) &#123;</span><br><span class="line">    // reads this register to obtain the interrupt ID of the signaled interrupt.</span><br><span class="line">    // This read acts as an acknowledge for the interrupt.</span><br><span class="line">    // 中断确认</span><br><span class="line">    const GICC_IAR: *mut u32 = (GICC_BASE + 0x0c) as *mut u32;</span><br><span class="line">    const GICC_EOIR: *mut u32 = (GICC_BASE + 0x10) as *mut u32;</span><br><span class="line">    let value: u32 = ptr::read_volatile(GICC_IAR);</span><br><span class="line">    let irq_num: u32 = value &amp; 0x1ff;</span><br><span class="line">    let core_num: u32 = value &amp; 0xe00;</span><br><span class="line"></span><br><span class="line">    // 实际处理中断</span><br><span class="line">    handle_irq_lines(ctx, core_num, irq_num);</span><br><span class="line">    // catch(ctx, EL1_IRQ);</span><br><span class="line"></span><br><span class="line">    // A processor writes to this register to inform the CPU interface either:</span><br><span class="line">    // • that it has completed the processing of the specified interrupt</span><br><span class="line">    // • in a GICv2 implementation, when the appropriate GICC_CTLR.EOImode bit is set to 1, to indicate that the interface should perform priority drop for the specified interrupt.</span><br><span class="line">    // 标记中断完成，清除相应中断位</span><br><span class="line">    ptr::write_volatile(GICC_EOIR, core_num | irq_num);</span><br><span class="line">    clear(irq_num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9irq%E5%87%BD%E6%95%B0.png"                        class="" title="修改irq函数"                 ><p>之前我们修改了<code>catch()</code>函数，没有调用<code>ctx</code>参数，所以会有一个<strong>warning</strong>，这里我们选择再次将其<strong>忽略</strong><br>编辑<code>src/main.rs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#![allow(dead_code, unused_variables)] // 忽略dead_code</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%BF%BD%E7%95%A5%E6%9C%AA%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F.png"                        class="" title="忽略未使用变量"                 ><p>并且在<code>src/uart_console/mod.rs</code>中，有一个未使用的<code>core::ptr</code>引用，将其移除</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%A7%BB%E9%99%A4ptr.png"                        class="" title="移除ptr"                 ><p>接下来<strong>编译</strong>并<strong>运行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%AF%8F%E4%B8%A4%E7%A7%92%E8%BE%93%E5%87%BA%E4%B8%80%E6%AC%A1.png"                        class="" title="每两秒输出一次"                 ><p>可以看到每过<strong>2s</strong>就会<strong>打一个点</strong>。<br>如果我们按<strong>顺序</strong>输入<strong>a</strong>、<strong>b</strong>、<strong>c</strong>，则会<strong>触发输入中断</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%AD.png"                        class="" title="输入中断"                 ><h1 id="六、GPIO关机"><a href="#六、GPIO关机" class="headerlink" title="六、GPIO关机"></a>六、GPIO关机</h1><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceSix.tar.gz" title="下载">下载</a></p></blockquote><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><p>查看<code>virt.dts</code>，可以<strong>发现</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gpio-keys &#123;</span><br><span class="line">#address-cells = &lt;0x01&gt;;</span><br><span class="line">#size-cells = &lt;0x00&gt;;</span><br><span class="line">compatible = &quot;gpio-keys&quot;;</span><br><span class="line"></span><br><span class="line">poweroff &#123;</span><br><span class="line">gpios = &lt;0x8003 0x03 0x00&gt;;</span><br><span class="line">linux,code = &lt;0x74&gt;;</span><br><span class="line">label = &quot;GPIO Key Poweroff&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pl061@9030000 &#123;</span><br><span class="line">phandle = &lt;0x8003&gt;;</span><br><span class="line">clock-names = &quot;apb_pclk&quot;;</span><br><span class="line">clocks = &lt;0x8000&gt;;</span><br><span class="line">interrupts = &lt;0x00 0x07 0x04&gt;;</span><br><span class="line">gpio-controller;</span><br><span class="line">#gpio-cells = &lt;0x02&gt;;</span><br><span class="line">compatible = &quot;arm,pl061\0arm,primecell&quot;;</span><br><span class="line">reg = &lt;0x00 0x9030000 0x00 0x1000&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>其中<strong>gpio-keys</strong>中定义了一个<strong>poweroff</strong>键， <strong>gpios = &lt;0x8003 0x03 0x00&gt;</strong> 中的第一项<strong>0x8003</strong>表示它的<strong>phandle</strong>是<strong>0x8003</strong>， 即<strong>pl061@9030000</strong>，也即<strong>gpio-keys</strong>是设备<strong>pl061</strong>的组成部分，第二项<strong>0x03</strong>表示该键是<strong>pl061</strong>的<strong>第三根GPIO线</strong>，第三项是<strong>flag</strong>，且<strong>pl061</strong>的寄存器映射到了内存<strong>0x9030000</strong>开始的位置。如下图所示。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/gpio-poweroff.png"                        class="" title="gpio-poweroff"                 ></blockquote><h2 id="2-实现-2"><a href="#2-实现-2" class="headerlink" title="2. 实现"></a>2. 实现</h2><p>新建<code>src/pl061.rs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/pl061.rs</span><br></pre></td></tr></table></figure><p>编辑<code>src/pl061.rs</code>，通过<strong>tock-registers</strong>描述<strong>寄存器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">use tock_registers::&#123;registers::&#123;ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;</span><br><span class="line"></span><br><span class="line">pub const PL061REGS: *mut PL061Regs = (0x0903_0000) as *mut PL061Regs;</span><br><span class="line"></span><br><span class="line">register_bitfields![</span><br><span class="line">    u32,</span><br><span class="line">    pub GPIOIE [</span><br><span class="line">        IO3 OFFSET(3) NUMBITS(1) [</span><br><span class="line">            Disabled = 0,</span><br><span class="line">            Enabled = 1</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">register_structs! &#123;</span><br><span class="line">    pub PL061Regs &#123;</span><br><span class="line">        (0x000 =&gt; __reserved_0),                                               // 0x000</span><br><span class="line">        (0x410 =&gt; pub ie: ReadWrite&lt;u32, GPIOIE::Register&gt;),                   // 0x410</span><br><span class="line">        (0x414 =&gt; __reserved_1),                                               // 0x414</span><br><span class="line">        (0x41C =&gt; pub ic: WriteOnly&lt;u32&gt;),                                     // 0x41C</span><br><span class="line">        (0x420 =&gt; @END),                                                       // 0x420</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/main.rs</code>，引入<strong>pl061</strong>模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">use core::arch::global_asm; // 导入需要的Module</span><br><span class="line"></span><br><span class="line">mod panic;</span><br><span class="line">mod uart_console;</span><br><span class="line">mod interrupts;</span><br><span class="line">mod pl061;</span><br><span class="line"></span><br><span class="line">global_asm!(include_str!(&quot;start.s&quot;));</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/mod_pl061.png"                        class="" title="mod_pl061"                 ><p>编辑<code>src/interrupts.rs</code>，在<code>init_gicv2</code>函数中<strong>初始化pl061的GPIO中断</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">// 时钟中断号</span><br><span class="line">const TIMER_IRQ: u32 = 30;</span><br><span class="line">// 设备中断号</span><br><span class="line">const UART0_IRQ: u32 = 33;</span><br><span class="line"></span><br><span class="line">const GPIO_IRQ: u32 = 39; // virt.dts interrupts = &lt;0x00 0x07 0x04&gt;; 32 + 0x07 = 39</span><br><span class="line"></span><br><span class="line">pub fn init_gicv2() &#123;</span><br><span class="line">    // 初始化Gicv2的distributor和cpu interface</span><br><span class="line">    // 禁用distributor和cpu interface后进行相应配置</span><br><span class="line">    // ······</span><br><span class="line"></span><br><span class="line">    // 初始化GPIO中断</span><br><span class="line">    set_config(GPIO_IRQ, ICFGR_LEVEL); //电平触发</span><br><span class="line">    set_priority(GPIO_IRQ, 0); //优先级设定</span><br><span class="line">    // set_core(TIMER_IRQ, 0x1); // 单核实现无需设置中断目标核</span><br><span class="line">    clear(GPIO_IRQ); //清除中断请求</span><br><span class="line">    enable(GPIO_IRQ); //使能中断</span><br><span class="line"></span><br><span class="line">    // 使能GPIO的poweroff key中断</span><br><span class="line">    use crate::pl061::*;</span><br><span class="line">    unsafe&#123;</span><br><span class="line">        let pl061r: &amp;PL061Regs = &amp;*PL061REGS;</span><br><span class="line"></span><br><span class="line">        // 启用pl061 gpio中的3号线中断</span><br><span class="line">        pl061r.ie.write(GPIOIE::IO3::Enabled);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loop &#123;</span><br><span class="line">        // ······</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%B3%E6%9C%BA%E4%B8%AD%E6%96%AD.png"                        class="" title="初始化关机中断"                 ><p>编辑<code>src/interrupts.rs</code>，引入<code>tock_registers::interfaces::Writeable</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">use tock_registers::interfaces::Readable;</span><br><span class="line">use tock_registers::interfaces::Writeable;</span><br><span class="line">fn handle_irq_lines(ctx: &amp;mut ExceptionCtx, _core_num: u32, irq_num: u32) &#123;</span><br><span class="line">    // ······</span><br><span class="line">&#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%BC%95%E5%85%A5Writeable.png"                        class="" title="引入Writeable"                 ><p>编辑<code>src/interrupts.rs</code>，处理<code>pl061</code><strong>3号GPIO线</strong>引发的<strong>中断</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">fn handle_irq_lines(ctx: &amp;mut ExceptionCtx, _core_num: u32, irq_num: u32) &#123;</span><br><span class="line">    if irq_num == TIMER_IRQ &#123;</span><br><span class="line">        handle_timer_irq(ctx);</span><br><span class="line">    &#125;else if irq_num == UART0_IRQ &#123;</span><br><span class="line">        handle_uart0_rx_irq(ctx);</span><br><span class="line">    &#125;else if irq_num == GPIO_IRQ &#123;</span><br><span class="line">        handle_gpio_irq(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        catch(ctx, EL1_IRQ);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn handle_timer_irq(_ctx: &amp;mut ExceptionCtx)&#123;</span><br><span class="line">    // ······</span><br><span class="line">&#125;</span><br><span class="line">// ······</span><br><span class="line">fn handle_gpio_irq(_ctx: &amp;mut ExceptionCtx)&#123;</span><br><span class="line">    use crate::pl061::*;</span><br><span class="line">    crate::println!(&quot;Power off!\n&quot;);</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        let pl061r: &amp;PL061Regs = &amp;*PL061REGS;</span><br><span class="line"></span><br><span class="line">        // 清除中断信号</span><br><span class="line">        pl061r.ic.set(pl061r.ie.get());</span><br><span class="line">        // 关机</span><br><span class="line">        asm!(&quot;mov w0, #0x18&quot;);</span><br><span class="line">        asm!(&quot;hlt #0xF000&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%85%B3%E6%9C%BA%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%861.png"                        class="" title="关机中断处理1"                 ><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%85%B3%E6%9C%BA%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%862.png"                        class="" title="关机中断处理2"                 ><blockquote><p>在 <strong>handle_gpio_irq()</strong> 函数里通过<strong>内联汇编</strong>执行了指令<strong>hlt #0xF000</strong>，这里用到了<strong>ARM</strong>的<strong>Semihosting</strong>功能。</p><ul><li><strong>Semihosting</strong>的作用：能够让<strong>bare-metal</strong>的<strong>ARM</strong>设备通过<strong>拦截指定的SVC指令</strong>，在连<strong>操作系统</strong>都没有的环境中实现<strong>POSIX</strong>中的许多<strong>标准函数</strong>，比如<strong>printf</strong>、<strong>scanf</strong>、<strong>open</strong>、<strong>read</strong>、<strong>write</strong>等等。这些<strong>IO</strong>操作将被<strong>Semihosting</strong>协议转发到<strong>Host主机</strong>上，然后由<strong>主机代为执行</strong>。</li></ul></blockquote><p>编辑<code>src/interrupts.rs</code>，停止打点，方便后续测试观察</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">fn handle_timer_irq(_ctx: &amp;mut ExceptionCtx)&#123;</span><br><span class="line"></span><br><span class="line">    // crate::print!(&quot;.&quot;);</span><br><span class="line"></span><br><span class="line">    // 每2秒产生一次中断</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        asm!(&quot;mrs x1, CNTFRQ_EL0&quot;);</span><br><span class="line">        asm!(&quot;add x1, x1, x1&quot;);</span><br><span class="line">        asm!(&quot;msr CNTP_TVAL_EL0, x1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%81%9C%E6%AD%A2%E6%89%93%E7%82%B9.png"                        class="" title="停止打点"                 ><h2 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h2><blockquote><p>为了启用<strong>Semihosting</strong>功能，在<strong>QEMU</strong>执行时需要加入 <strong>-semihosting</strong> 参数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><p>先按<code>Ctrl + A</code>，松手再按<code>C</code>，然后输入<code>system_powerdown</code>执行关机。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%89%A7%E8%A1%8C%E5%85%B3%E6%9C%BA.png"                        class="" title="执行关机"                 ><h1 id="七、死锁与简单处理"><a href="#七、死锁与简单处理" class="headerlink" title="七、死锁与简单处理"></a>七、死锁与简单处理</h1><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceSeven.tar.gz" title="下载">下载</a></p><p>当<strong>多个任务</strong>访问<strong>同一个资源（数据）</strong>时就会引发<strong>竞争条件问题</strong>，这不仅在<strong>进程间</strong>会出现，在<strong>操作系统</strong>和<strong>进程间</strong>也会出现。由<strong>竞争条件</strong>引发的问题很难<strong>复现</strong>和<strong>调试</strong>，这也是其<strong>最困难</strong>的地方。本<strong>实验</strong>的目的在于<strong>了解竞争条件</strong>和<strong>死锁现象</strong>，并<strong>掌握</strong>处理这些问题的<strong>初步方法</strong>等。</p></blockquote><h2 id="勘误"><a href="#勘误" class="headerlink" title="勘误"></a>勘误</h2><blockquote><p>在<strong>src/interrupts.rs</strong>的<strong>init_gicv2()<strong>函数中，我们之前使用了一个</strong>循环</strong>并使用<strong>内联汇编asm!(“wfi”)<strong>来</strong>等待中断</strong>，实际上在之前的实验中，这里所有的<strong>内联汇编</strong>都是没有必要的。当去掉这个<strong>循环</strong>，我们的<strong>OS</strong>会<strong>串行执行完成</strong>然后<strong>自动关机</strong>，从而导致后续的测试<strong>无效</strong>。因此我们<strong>需要且仅需要</strong>一个<strong>空循环</strong>来<strong>使OS持续运行</strong>，以便后续的<strong>中断测试</strong>。</p></blockquote><p>编辑<code>src/interrupts.rs</code>，在<code>init_gicv2()</code>函数中移除<code>loop&#123;&#125;</code>循环。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%8E%BB%E9%99%A4%E6%97%A0%E6%95%88%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96.png"                        class="" title="去除无效内联汇编"                 ><p>编辑<code>src/main.rs</code>，在<code>not_main()</code>函数尾部添加<code>loop&#123;&#125;</code>空循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">#[no_mangle] // 不修改函数名</span><br><span class="line">pub extern &quot;C&quot; fn not_main() &#123;</span><br><span class="line">    println!(&quot;\n[0] Hello from Rust!\n&quot;);</span><br><span class="line">    interrupts::init_gicv2();</span><br><span class="line">    loop &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%B7%BB%E5%8A%A0%E7%A9%BA%E5%BE%AA%E7%8E%AF.png"                        class="" title="添加空循环"                 ><h2 id="死锁的复现"><a href="#死锁的复现" class="headerlink" title="死锁的复现"></a>死锁的复现</h2><p>首先编辑<code>src/main.rs</code>，在<code>not_main()</code>函数的空循环中调用<code>print!</code>宏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">global_asm!(include_str!(&quot;start.s&quot;));</span><br><span class="line"></span><br><span class="line">#[no_mangle] // 不修改函数名</span><br><span class="line">pub extern &quot;C&quot; fn not_main() &#123;</span><br><span class="line">    println!(&quot;\n[0] Hello from Rust!\n&quot;);</span><br><span class="line">    interrupts::init_gicv2();</span><br><span class="line">    loop &#123;</span><br><span class="line">        print!(&quot;-&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/loop1.png"                        class="" title="loop1"                 ><p>这里有两种方式复现死锁现象。</p><h3 id="1-loop-中print-宏与handle-uart0-rx-irq-中print-宏竞争"><a href="#1-loop-中print-宏与handle-uart0-rx-irq-中print-宏竞争" class="headerlink" title="1. loop{}中print!宏与handle_uart0_rx_irq()中print!宏竞争"></a>1. loop{}中<code>print!</code>宏与<code>handle_uart0_rx_irq()</code>中<code>print!</code>宏竞争</h3><p>检查<code>src/interrupts.rs</code>中的<code>handle_uart0_rx_irq()</code>函数，可以看到我们之前写了一个输入中断回调函数，在函数中调用了<code>print!</code>宏输出信息。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%AD%E5%87%BD%E6%95%B0.png"                        class="" title="输入中断函数"                 ><p>直接编译并运行，预期在输入时触发死锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><p>不停地乱序敲击键盘，此时有概率出现卡死，按键无法再次输入内容，即触发死锁现象。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%AD%BB%E9%94%81.png"                        class="" title="死锁"                 ><h3 id="2-loop-中print-宏与handle-timer-irq-中print-宏竞争"><a href="#2-loop-中print-宏与handle-timer-irq-中print-宏竞争" class="headerlink" title="2. loop{}中print!宏与handle_timer_irq()中print!宏竞争"></a>2. loop{}中<code>print!</code>宏与<code>handle_timer_irq()</code>中<code>print!</code>宏竞争</h3><p>检查<code>src/interrupts.rs</code>中的<code>handle_timer_irq()</code>函数，可以看到我们之前写了一个时间中断回调函数，在函数中调用了<code>print!</code>宏打点。</p><p>但它之前被我们注释掉了，因此我们取消注释</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E9%87%8D%E6%96%B0%E6%89%93%E7%82%B9.png"                        class="" title="重新打点"                 ><p>然后我们编译并运行，预期在打第一个点时会触发死锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><p>实验按预期触发了死锁。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%89%93%E7%82%B9%E6%AD%BB%E9%94%81.png"                        class="" title="打点死锁"                 ><p>有时会在打第二个点时触发死锁。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%89%93%E7%82%B9%E6%AD%BB%E9%94%812.png"                        class="" title="打点死锁2"                 ><h2 id="死锁的简单处理"><a href="#死锁的简单处理" class="headerlink" title="死锁的简单处理"></a>死锁的简单处理</h2><p>编辑<code>src/uart_console/mod.rs</code>，引入<code>asm!</code>宏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">impl core::fmt::Write for Writer &#123;</span><br><span class="line">    fn write_str(&amp;mut self, s: &amp;str) -&gt; fmt::Result &#123;</span><br><span class="line">        // ······</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">use core::&#123;fmt, arch::asm&#125;;</span><br><span class="line"></span><br><span class="line">use lazy_static::lazy_static;</span><br><span class="line">use spin::Mutex;</span><br><span class="line"></span><br><span class="line">use tock_registers::interfaces::Writeable;</span><br><span class="line"></span><br><span class="line">pub mod pl011;</span><br><span class="line">use pl011::*;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E5%BC%95%E5%85%A5asm.png"                        class="" title="引入asm"                 ><p>编辑<code>src/uart_console/mod.rs</code>中的<code>_print()</code>函数，在处理输入时先关闭中断，再打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">/// Prints the given formatted string to the VGA text buffer through the global `WRITER` instance.</span><br><span class="line">#[doc(hidden)]</span><br><span class="line">pub fn _print(args: fmt::Arguments) &#123;</span><br><span class="line">    use core::fmt::Write;</span><br><span class="line">    unsafe &#123;</span><br><span class="line">        // 关闭d a i f类型的中断</span><br><span class="line">        asm!(&quot;msr daifset, #0xf&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WRITER.lock().write_fmt(args).unwrap();</span><br><span class="line"></span><br><span class="line">    unsafe &#123;</span><br><span class="line">        // 仅打开i类型的中断，不支持嵌套，嵌套应该保存状态，然后再恢复之前的状态</span><br><span class="line">        asm!(&quot;msr daifclr, #2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E5%A4%8D%E6%AD%BB%E9%94%81.png"                        class="" title="修复死锁"                 ><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>此时再用上述两种方式测试死锁，发现死锁现象消失了~</p><h1 id="八、内存管理"><a href="#八、内存管理" class="headerlink" title="八、内存管理"></a>八、内存管理</h1><blockquote><p><strong>分页内存管理</strong>是<strong>内存管理</strong>的<strong>基本方法之一</strong>。本实验的目的在于<strong>全面理解分页式内存管理</strong>的<strong>基本方法</strong>以及<strong>访问页表</strong>，<strong>完成地址转换</strong>等的方法。</p></blockquote><h2 id="ARM-v8的地址转换"><a href="#ARM-v8的地址转换" class="headerlink" title="ARM v8的地址转换"></a>ARM v8的地址转换</h2><blockquote><p><strong><a class="link"   href="https://developer.arm.com/documentation/den0024/a/The-Memory-Management-Unit/Context-switching" >ARM Cortex-A Series Programmer’s Guide for ARMv8-A<i class="fas fa-external-link-alt"></i></a></strong> 中提到：</p><p>For <strong>EL0</strong> and <strong>EL1</strong>, there are <strong>two translation tables</strong>. <strong>TTBR0_EL1</strong> provides translations for <strong>the bottom of Virtual Address space</strong>, which is <strong>typically application space</strong> and <strong>TTBR1_EL1</strong> covers <strong>the top of Virtual Address space</strong>, <strong>typically kernel space</strong>. This split means that the OS mappings do not have to be replicated in the translation tables of each task.</p><p>即<strong>TTBR0</strong>指向<strong>虚拟空间下半部分</strong>通常用于<strong>应用程序</strong>的空间，<strong>TTBR1</strong>指向<strong>虚拟空间上半部分</strong>通常用于<strong>内核</strong>的空间。其中<strong>TTBR0</strong>除了在<strong>EL1</strong>中存在外，也在<strong>EL2</strong>和<strong>EL3</strong>中存在，但<strong>TTBR1</strong>只在<strong>EL1</strong>中存在。</p><p><strong>TTBR0_ELn</strong>和<strong>TTBR1_ELn</strong>是页表<strong>基地址寄存器</strong>，<strong>地址转换</strong>的过程如下所示 </p><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/v2p-translate.svg"                        class="" title="v2p-translate"                 ></blockquote><h2 id="一、使用Identity-Mapping映射"><a href="#一、使用Identity-Mapping映射" class="headerlink" title="一、使用Identity Mapping映射"></a>一、使用Identity Mapping映射</h2><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceEight1.tar.gz" title="下载">下载</a></p><p><strong>虚拟地址转换</strong>很<strong>容易出错</strong>也<strong>很难调试</strong>，所以我们从<strong>最简单的方式</strong>开始，即采用<strong>Identity Mapping</strong>，将<strong>虚拟地址</strong>映射到<strong>相同</strong>的<strong>物理地址</strong>。</p></blockquote><p>编辑<code>src/start.s</code>，初始化<strong>MMU</strong>、<strong>页表</strong>以及<strong>启用页表</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">.globl _start</span><br><span class="line">.extern LD_STACK_PTR</span><br><span class="line">.section &quot;.text.boot&quot;</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">        ldr     x30, =LD_STACK_PTR</span><br><span class="line">        mov     sp, x30</span><br><span class="line"></span><br><span class="line">        // Initialize exceptions</span><br><span class="line">        ldr     x0, =exception_vector_table</span><br><span class="line">        msr     vbar_el1, x0</span><br><span class="line">        isb</span><br><span class="line"></span><br><span class="line">_setup_mmu:</span><br><span class="line">        // 初始化TCR控制寄存器</span><br><span class="line">        ldr     x0, =TCR_EL1_VALUE</span><br><span class="line">        msr     tcr_el1, x0</span><br><span class="line">        ldr     x0, =MAIR_EL1_VALUE</span><br><span class="line">        msr     mair_el1, x0            // 内存属性间接寄存器，作用是预先定义好属性，然后通过索引来访问这些预定义的属性</span><br><span class="line"></span><br><span class="line">_setup_pagetable:</span><br><span class="line">        // 因为采用的36位地址空间，所以是一级页表</span><br><span class="line">        ldr     x1, =LD_TTBR0_BASE</span><br><span class="line">        msr     ttbr0_el1, x1           //页表基地址TTBR0</span><br><span class="line">        ldr     x2, =LD_TTBR1_BASE</span><br><span class="line">        msr     ttbr1_el1, x2           //页表基地址TTBR1</span><br><span class="line"></span><br><span class="line">        // 一级页表部分</span><br><span class="line">        // 虚拟地址空间的下半部分采用Identity Mapping</span><br><span class="line">        // 第一项 虚拟地址0 - 1G，根据virt的定义为flash和外设，参见virt.c</span><br><span class="line">        ldr     x3, =0x0</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =PERIPHERALS_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line">        // 第二项 虚拟地址1G - 2G，_start部分</span><br><span class="line">        ldr     x3, =_start</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =IDENTITY_MAP_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line"></span><br><span class="line">_enable_mmu:</span><br><span class="line">        // 启用MMU.</span><br><span class="line">        mrs     x0, sctlr_el1</span><br><span class="line">        orr     x0, x0, #0x1</span><br><span class="line">        msr     sctlr_el1, x0</span><br><span class="line">        dsb     sy                      // Programmer’s Guide for ARMv8-A chapter13.2 Barriers</span><br><span class="line">        isb</span><br><span class="line"></span><br><span class="line">_start_main:</span><br><span class="line">        bl      not_main</span><br><span class="line"></span><br><span class="line">.equ PSCI_SYSTEM_OFF, 0x84000002</span><br><span class="line">.globl system_off</span><br><span class="line">system_off:</span><br><span class="line">        ldr     x0, =PSCI_SYSTEM_OFF</span><br><span class="line">        hvc     #0</span><br><span class="line"></span><br><span class="line">.equ TCR_EL1_VALUE, 0x1B55C351C</span><br><span class="line">// ---------------------------------------------</span><br><span class="line">// IPS   | b001    &lt;&lt; 32 | 36bits address space - 64GB</span><br><span class="line">// TG1   | b10     &lt;&lt; 30 | 4KB granule size for TTBR1_EL1</span><br><span class="line">// SH1   | b11     &lt;&lt; 28 | 页表所在memory: Inner shareable</span><br><span class="line">// ORGN1 | b01     &lt;&lt; 26 | 页表所在memory: Normal, Outer Wr.Back Rd.alloc Wr.alloc Cacheble</span><br><span class="line">// IRGN1 | b01     &lt;&lt; 24 | 页表所在memory: Normal, Inner Wr.Back Rd.alloc Wr.alloc Cacheble</span><br><span class="line">// EPD   | b0      &lt;&lt; 23 | Perform translation table walk using TTBR1_EL1</span><br><span class="line">// A1    | b1      &lt;&lt; 22 | TTBR1_EL1.ASID defined the ASID</span><br><span class="line">// T1SZ  | b011100 &lt;&lt; 16 | Memory region 2^(64-28) -&gt; 0xffffffexxxxxxxxx</span><br><span class="line">// TG0   | b00     &lt;&lt; 14 | 4KB granule size</span><br><span class="line">// SH0   | b11     &lt;&lt; 12 | 页表所在memory: Inner Sharebale</span><br><span class="line">// ORGN0 | b01     &lt;&lt; 10 | 页表所在memory: Normal, Outer Wr.Back Rd.alloc Wr.alloc Cacheble</span><br><span class="line">// IRGN0 | b01     &lt;&lt; 8  | 页表所在memory: Normal, Inner Wr.Back Rd.alloc Wr.alloc Cacheble</span><br><span class="line">// EPD0  | b0      &lt;&lt; 7  | Perform translation table walk using TTBR0_EL1</span><br><span class="line">// 0     | b0      &lt;&lt; 6  | Zero field (reserve)</span><br><span class="line">// T0SZ  | b011100 &lt;&lt; 0  | Memory region 2^(64-28)</span><br><span class="line"></span><br><span class="line">.equ MAIR_EL1_VALUE, 0xFF440C0400</span><br><span class="line">// ---------------------------------------------</span><br><span class="line">//                   INDX         MAIR</span><br><span class="line">// DEVICE_nGnRnE    b000(0)     b00000000</span><br><span class="line">// DEVICE_nGnRE         b001(1)         b00000100</span><br><span class="line">// DEVICE_GRE               b010(2)     b00001100</span><br><span class="line">// NORMAL_NC                b011(3)     b01000100</span><br><span class="line">// NORMAL               b100(4)         b11111111</span><br><span class="line"></span><br><span class="line">.equ PERIPHERALS_ATTR, 0x60000000000601</span><br><span class="line">// -------------------------------------</span><br><span class="line">// UXN   | b1      &lt;&lt; 54 | Unprivileged eXecute Never</span><br><span class="line">// PXN   | b1      &lt;&lt; 53 | Privileged eXecute Never</span><br><span class="line">// AF    | b1      &lt;&lt; 10 | Access Flag</span><br><span class="line">// SH    | b10     &lt;&lt; 8  | Outer shareable</span><br><span class="line">// AP    | b01     &lt;&lt; 6  | R/W, EL0 access denied</span><br><span class="line">// NS    | b0      &lt;&lt; 5  | Security bit (EL3 and Secure EL1 only)</span><br><span class="line">// INDX  | b000    &lt;&lt; 2  | Attribute index in MAIR_ELn，参见MAIR_EL1_VALUE</span><br><span class="line">// ENTRY | b01     &lt;&lt; 0  | Block entry</span><br><span class="line"></span><br><span class="line">.equ IDENTITY_MAP_ATTR, 0x40000000000711</span><br><span class="line">// ------------------------------------</span><br><span class="line">// UXN   | b1      &lt;&lt; 54 | Unprivileged eXecute Never</span><br><span class="line">// PXN   | b0      &lt;&lt; 53 | Privileged eXecute Never</span><br><span class="line">// AF    | b1      &lt;&lt; 10 | Access Flag</span><br><span class="line">// SH    | b11     &lt;&lt; 8  | Inner shareable</span><br><span class="line">// AP    | b00     &lt;&lt; 6  | R/W, EL0 access denied</span><br><span class="line">// NS    | b0      &lt;&lt; 5  | Security bit (EL3 and Secure EL1 only)</span><br><span class="line">// INDX  | b100    &lt;&lt; 2  | Attribute index in MAIR_ELn，参见MAIR_EL1_VALUE</span><br><span class="line">// ENTRY | b01     &lt;&lt; 0  | Block entry</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%BC%96%E8%BE%91start.png"                        class="" title="编辑start"                 ><p>(如果<strong>预览不清晰</strong>，可以在<strong>新标签页</strong>中<strong>打开图片</strong>，或者<strong>下载图片</strong>，然后<strong>放大</strong>)</p><p>编辑<code>aarch64-qemu.ld</code>，定义前文中用到的<code>LD_TTBR0_BASE</code>和<code>LD_TTBR1_BASE</code>符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ENTRY(_start)</span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    . = 0x40080000;</span><br><span class="line">    .text.boot : &#123; *(.text.boot) &#125;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        KEEP(*(.text.boot))</span><br><span class="line">        *(.text.exceptions)</span><br><span class="line">        . = ALIGN(4096); /* align for exceptions_vector_table*/</span><br><span class="line">        *(.text.exceptions_vector_table)</span><br><span class="line">        *(.text)</span><br><span class="line">    &#125;</span><br><span class="line">    .data : &#123; *(.data) &#125;</span><br><span class="line">    .rodata : &#123; *(.rodata) &#125;</span><br><span class="line">    .bss : &#123; *(.bss) &#125;</span><br><span class="line"></span><br><span class="line">    . = ALIGN(8);</span><br><span class="line">    . = . + 0x4000;</span><br><span class="line">    LD_STACK_PTR = .;</span><br><span class="line"></span><br><span class="line">    . = ALIGN(4096);</span><br><span class="line">    /*页表基地址TTBR0*/</span><br><span class="line">    LD_TTBR0_BASE = .;</span><br><span class="line">    . = . + 0x1000;</span><br><span class="line"></span><br><span class="line">    /*页表基地址TTBR1*/</span><br><span class="line">    LD_TTBR1_BASE = .;</span><br><span class="line">    . = . + 0x1000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%BC%96%E8%BE%91ld.png"                        class="" title="编辑ld"                 ><p><strong>编译</strong>并<strong>运行</strong>，<strong>测试</strong>能否<strong>正常工作</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo clean &amp;&amp; cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%B5%8B%E8%AF%95.png"                        class="" title="第一次测试"                 ><p><strong>正常运行！</strong></p><h2 id="二、使用Identity-Mapping映射-偏移映射与页面共享"><a href="#二、使用Identity-Mapping映射-偏移映射与页面共享" class="headerlink" title="二、使用Identity Mapping映射 - 偏移映射与页面共享"></a>二、使用Identity Mapping映射 - 偏移映射与页面共享</h2><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceEight2.tar.gz" title="下载">下载</a></p><p>修改代码，将<strong>虚拟地址</strong>2G - 3G处映射到<strong>物理地址</strong>0 - 1G，从而对<strong>0x89000000</strong>地址的写入将通过<strong>pl011</strong>串口输出，因为此时<strong>0x89000000</strong>映射到了<strong>物理地址pl011@9000000</strong>。</p></blockquote><p>编辑<code>src/start.s</code>，空白映射<strong>虚拟地址</strong>0 - 1G，将<strong>虚拟地址</strong>2G - 3G处映射到<strong>物理地址</strong>0 - 1G。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">_setup_pagetable:</span><br><span class="line">        // 因为采用的36位地址空间，所以是一级页表</span><br><span class="line">        ldr     x1, =LD_TTBR0_BASE</span><br><span class="line">        msr     ttbr0_el1, x1           //页表基地址TTBR0</span><br><span class="line">        ldr     x2, =LD_TTBR1_BASE</span><br><span class="line">        msr     ttbr1_el1, x2           //页表基地址TTBR1</span><br><span class="line"></span><br><span class="line">        // 一级页表部分</span><br><span class="line">        // 虚拟地址空间的下半部分采用Identity Mapping</span><br><span class="line">        // 第一项 虚拟地址0 - 1G</span><br><span class="line">        ldr     x5, =0x0</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line">        // 第二项 虚拟地址1G - 2G，_start部分</span><br><span class="line">        ldr     x3, =_start</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =IDENTITY_MAP_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line">        // 第三项 虚拟地址2 - 3G，根据virt的定义为flash和外设，参见virt.c</span><br><span class="line">        ldr     x3, =0x0</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =PERIPHERALS_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%98%A0%E5%B0%8423G.png"                        class="" title="映射23G"                 ><p>编辑<code>src/interrupts.rs</code>，修改其<strong>基址（2G+原基址）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use core::ptr;</span><br><span class="line"></span><br><span class="line">// GICD和GICC寄存器内存映射后的起始地址</span><br><span class="line">const GICD_BASE: u64 = 0x8000_0000 + 0x08000000;</span><br><span class="line">const GICC_BASE: u64 = 0x8000_0000 + 0x08010000;</span><br><span class="line"></span><br><span class="line">// Distributor</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9%E4%B8%AD%E6%96%AD.png"                        class="" title="修改中断"                 ><p>编辑<code>src/pl061.rs</code>，修改其<strong>基址（2G+原基址）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use tock_registers::&#123;registers::&#123;ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;</span><br><span class="line"></span><br><span class="line">pub const PL061REGS: *mut PL061Regs = (0x8000_0000u32 + 0x0903_0000) as *mut PL061Regs;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9pl061.png"                        class="" title="修改pl061"                 ><p>编辑<code>src/uart_console/pl011.rs</code>，修改其<strong>基址（2G+原基址）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use tock_registers::&#123;registers::&#123;ReadOnly, ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;</span><br><span class="line"></span><br><span class="line">pub const PL011REGS: *mut PL011Regs = (0x8000_0000u32 +0x0900_0000) as *mut PL011Regs;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9pl011.png"                        class="" title="修改pl011"                 ><p><strong>编译</strong>并<strong>运行</strong>，<strong>测试</strong>能否<strong>正常工作</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo clean &amp;&amp; cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E6%B5%8B%E8%AF%95.png"                        class="" title="第二次测试"                 ><p><strong>正常运行！</strong></p><h2 id="三、使用非Identity-Mapping映射-块级映射"><a href="#三、使用非Identity-Mapping映射-块级映射" class="headerlink" title="三、使用非Identity Mapping映射 - 块级映射"></a>三、使用非Identity Mapping映射 - 块级映射</h2><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceEight3.tar.gz" title="下载">下载</a></p></blockquote><p>编辑<code>src/start.s</code>，处理<strong>虚拟地址空间</strong>的<strong>上半部分</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">_setup_pagetable:</span><br><span class="line">        // 因为采用的36位地址空间，所以是一级页表</span><br><span class="line">        ldr     x1, =LD_TTBR0_BASE</span><br><span class="line">        msr     ttbr0_el1, x1           //页表基地址TTBR0</span><br><span class="line">        ldr     x2, =LD_TTBR1_BASE</span><br><span class="line">        msr     ttbr1_el1, x2           //页表基地址TTBR1</span><br><span class="line"></span><br><span class="line">        // 一级页表部分</span><br><span class="line">        // 虚拟地址空间的下半部分采用Identity Mapping</span><br><span class="line">        // 第一项 虚拟地址0 - 1G</span><br><span class="line">        ldr     x5, =0x0</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line">        // 第二项 虚拟地址1G - 2G，_start部分</span><br><span class="line">        ldr     x3, =0x40010000</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =IDENTITY_MAP_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line"></span><br><span class="line">        // 虚拟地址空间的上半部分采用非Identity Mapping</span><br><span class="line">        // 第一项 虚拟地址0 - 1G，根据virt的定义为flash和外设，参见virt.c</span><br><span class="line">        ldr     x3, =0x0 //</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =PERIPHERALS_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x2], #8</span><br><span class="line"></span><br><span class="line">        // 第二项， 映射到内存（块级映射）</span><br><span class="line">        ldr     x3, =0x40010000</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =KERNEL_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x2], #8</span><br><span class="line"></span><br><span class="line">_enable_mmu:</span><br><span class="line">// ······</span><br><span class="line"></span><br><span class="line">.equ KERNEL_ATTR, 0x40000000000711</span><br><span class="line">// -------------------------------------</span><br><span class="line">// UXN   | b1      &lt;&lt; 54 | Unprivileged eXecute Never</span><br><span class="line">// PXN   | b0      &lt;&lt; 53 | Privileged eXecute Never</span><br><span class="line">// AF    | b1      &lt;&lt; 10 | Access Flag</span><br><span class="line">// SH    | b11     &lt;&lt; 8  | Inner shareable</span><br><span class="line">// AP    | b00     &lt;&lt; 6  | R/W, EL0 access denied</span><br><span class="line">// NS    | b0      &lt;&lt; 5  | Security bit (EL3 and Secure EL1 only)</span><br><span class="line">// INDX  | b100    &lt;&lt; 2  | Attribute index in MAIR_ELn，参见MAIR_EL1_VALUE</span><br><span class="line">// ENTRY | b01     &lt;&lt; 0  | Block entry</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/start1.png"                        class="" title="start1"                 ><p><strong>重构</strong><code>aarch64-qemu.ld</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">__KERN_VMA_BASE = 0xfffffff000000000;</span><br><span class="line">__PHY_DRAM_START_ADDR = 0x40000000;</span><br><span class="line">__PHY_START_LOAD_ADDR = 0x40010000;</span><br><span class="line"></span><br><span class="line">ENTRY(__PHY_START_LOAD_ADDR)</span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">    . = __KERN_VMA_BASE + __PHY_START_LOAD_ADDR;</span><br><span class="line">    .text.boot : AT(__PHY_START_LOAD_ADDR) &#123; KEEP(*(.text.boot)) &#125;</span><br><span class="line">    .text :</span><br><span class="line">    &#123;</span><br><span class="line">        *(.text*)</span><br><span class="line">    &#125;</span><br><span class="line">    . = ALIGN(0x1000);</span><br><span class="line"></span><br><span class="line">    LD_DATA_BASE = .;</span><br><span class="line">    .data : &#123; *(.data*) &#125;</span><br><span class="line">    . = ALIGN(0x1000);</span><br><span class="line"></span><br><span class="line">    LD_RODATA_BASE = .;</span><br><span class="line">    .rodata : &#123; *(.rodata*) &#125;</span><br><span class="line">    . = ALIGN(0x1000);</span><br><span class="line"></span><br><span class="line">    LD_BSS_BASE = .;</span><br><span class="line">    .bss :</span><br><span class="line">    &#123; </span><br><span class="line">        *(.bss*)</span><br><span class="line">        . = ALIGN(4096);</span><br><span class="line">        . += (4096 * 100); /* 栈的大小 */</span><br><span class="line">        stack_top = .;</span><br><span class="line">        LD_STACK_PTR = .;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 页表 */</span><br><span class="line">    .pt :</span><br><span class="line">        &#123;</span><br><span class="line">        . = ALIGN(4096);</span><br><span class="line"></span><br><span class="line">        /* 页表基地址TTBR0 */</span><br><span class="line">        LD_TTBR0_BASE = . - __KERN_VMA_BASE;</span><br><span class="line">        . = . + 0x1000;</span><br><span class="line"></span><br><span class="line">        /* 页表基地址TTBR1 */</span><br><span class="line">        LD_TTBR1_BASE = . - __KERN_VMA_BASE;</span><br><span class="line">        . = . + 0x1000;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    . = . + 0x1000;</span><br><span class="line">    LD_KERNEL_END = . - __KERN_VMA_BASE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑<code>src/interrupts.rs</code>，修改其<strong>基址（0xfffffff000000000+原基址）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use core::ptr;</span><br><span class="line"></span><br><span class="line">// GICD和GICC寄存器内存映射后的起始地址</span><br><span class="line">const GICD_BASE: u64 = 0xfffffff000000000 + 0x08000000;</span><br><span class="line">const GICC_BASE: u64 = 0xfffffff000000000 + 0x08010000;</span><br><span class="line"></span><br><span class="line">// Distributor</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9%E4%B8%AD%E6%96%AD3.png"                        class="" title="修改中断3"                 ><p>编辑<code>src/pl061.rs</code>，修改其<strong>基址（0xfffffff000000000+原基址）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use tock_registers::&#123;registers::&#123;ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;</span><br><span class="line"></span><br><span class="line">pub const PL061REGS: *mut PL061Regs = (0xfffffff000000000u64 + 0x0903_0000) as *mut PL061Regs;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9pl0613.png"                        class="" title="修改pl0613"                 ><p>编辑<code>src/uart_console/pl011.rs</code>，修改其<strong>基址（0xfffffff000000000+原基址）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use tock_registers::&#123;registers::&#123;ReadOnly, ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;</span><br><span class="line"></span><br><span class="line">pub const PL011REGS: *mut PL011Regs = (0xfffffff000000000u64 + 0x0900_0000) as *mut PL011Regs;</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E6%94%B9pl0113.png"                        class="" title="修改pl0113"                 ><p><strong>编译</strong>并<strong>运行</strong>，<strong>测试</strong>能否<strong>正常工作</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo clean &amp;&amp; cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%AC%AC%E4%B8%89%E6%AC%A1%E6%B5%8B%E8%AF%95.png"                        class="" title="第三次测试"                 ><p><strong><del>正常运行！</del></strong></p><h3 id="修复异常现象"><a href="#修复异常现象" class="headerlink" title="修复异常现象"></a>修复异常现象</h3><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceEight3Fix.tar.gz" title="下载">下载</a></p></blockquote><p>乍一看能<strong>正常运行</strong>，但是运行一段时间后居然<strong>卡死</strong>了！这是<strong>为什么</strong>呢？</p><p><strong>第一时间</strong>想到的是<strong>互斥锁</strong>可能出问题了，但是仔细看<strong>互斥锁</strong>的<strong>代码</strong>发现和<strong>内存映射</strong>关系应该不大。</p><p>仔细观察<strong>输出</strong>发现<strong>打点</strong>是<strong>正常</strong>的，而且在<strong>没有卡死之前</strong>如果触发<strong>输入中断</strong>则会<strong>立刻卡死</strong>，因此判断是<strong>输入中断</strong>出了问题， <strong><a class="link"   href="https://noionion.top/" >noionion<i class="fas fa-external-link-alt"></i></a></strong> 认为是<strong>链接脚本</strong>的问题，而<strong>事实</strong>也如他所说。</p><p>编辑<code>aarch64-qemu.ld</code>，修改<code>.text : &#123;&#125;</code>部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* ······ */</span><br><span class="line">.text.boot : AT(__PHY_START_LOAD_ADDR) &#123; KEEP(*(.text.boot)) &#125;</span><br><span class="line">.text :</span><br><span class="line">&#123;</span><br><span class="line">    KEEP(*(.text.boot))</span><br><span class="line">    *(.text.exceptions)</span><br><span class="line">    . = ALIGN(4096); /* align for exceptions_vector_table*/</span><br><span class="line">    *(.text.exceptions_vector_table)</span><br><span class="line">    *(.text)</span><br><span class="line">&#125;</span><br><span class="line">. = ALIGN(0x1000);</span><br><span class="line">/* ······ */</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BF%AE%E5%A4%8Dld.png"                        class="" title="修复ld"                 ><p><strong>编译</strong>并<strong>运行</strong>，<strong>测试</strong>能否<strong>正常工作</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo clean &amp;&amp; cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%AC%AC%E4%B8%89%E7%82%B9%E4%BA%94%E6%AC%A1%E6%B5%8B%E8%AF%95.png"                        class="" title="第三点五次测试"                 ><p><strong>正常运行！</strong></p><h2 id="四、使用非Identity-Mapping映射-页表映射"><a href="#四、使用非Identity-Mapping映射-页表映射" class="headerlink" title="四、使用非Identity Mapping映射 - 页表映射"></a>四、使用非Identity Mapping映射 - 页表映射</h2><blockquote><p>参考代码：<a href="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/ScienceEight4.tar.gz" title="下载">下载</a></p></blockquote><p>在<strong>成功实现块级映射</strong>后，我们就可以尝试<strong>实现二级页表映射</strong>了。<br>编辑<code>src/start.s</code>，修改<strong>块级映射</strong>为<strong>二级页表映射</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// ······</span><br><span class="line">_setup_pagetable:</span><br><span class="line">        // 因为采用的36位地址空间，所以是一级页表</span><br><span class="line">        ldr     x1, =LD_TTBR0_BASE</span><br><span class="line">        msr     ttbr0_el1, x1           //页表基地址TTBR0</span><br><span class="line">        ldr     x2, =LD_TTBR1_BASE</span><br><span class="line">        msr     ttbr1_el1, x2           //页表基地址TTBR1</span><br><span class="line"></span><br><span class="line">        // 一级页表部分</span><br><span class="line">        // 虚拟地址空间的下半部分采用Identity Mapping</span><br><span class="line">        // 第一项 虚拟地址0 - 1G</span><br><span class="line">        ldr     x5, =0x0</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line">        // 第二项 虚拟地址1G - 2G，_start部分</span><br><span class="line">        ldr     x3, =LD_TTBR1_L2TBL</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =IDENTITY_MAP_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x1], #8</span><br><span class="line"></span><br><span class="line">        // 虚拟地址空间的上半部分采用非Identity Mapping</span><br><span class="line">        // 第一项 虚拟地址0 - 1G，根据virt的定义为flash和外设，参见virt.c</span><br><span class="line">        ldr     x3, =0x0</span><br><span class="line">        lsr     x4, x3, #30             // 除以1G</span><br><span class="line">        lsl     x5, x4, #30             // 乘以1G，并且将表索引保存在x0</span><br><span class="line">        ldr     x6, =PERIPHERALS_ATTR</span><br><span class="line">        orr     x5, x5, x6              // 添加符号</span><br><span class="line">        str     x5, [x2], #8</span><br><span class="line"></span><br><span class="line">        // 第二项，映射到页表</span><br><span class="line">        ldr     x3, =LD_TTBR1_L2TBL</span><br><span class="line">        ldr     x4, =0xFFFFF000</span><br><span class="line">        and     x5, x3, x4             // NSTable=0 APTable=0 XNTable=0 PXNTable=0.</span><br><span class="line">        orr     x5, x5, 0x3            // Valid page table entry</span><br><span class="line">        str     x5, [x2], #8           //TTBR1</span><br><span class="line"></span><br><span class="line">        // 二级页表，内核总共16M，参见aarch64-qemu.ld文件</span><br><span class="line">        ldr     x3, =LD_TTBR1_L2TBL</span><br><span class="line">        mov     x4, #8                  // 8个二级页表项</span><br><span class="line">        ldr     x5, =KERNEL_ATTR        // 内核属性，可读写，可执行</span><br><span class="line">        ldr     x7, =0x1</span><br><span class="line">        add     x5, x5, x7, lsl #30     // 物理地址在1G开始的位置</span><br><span class="line">        ldr     x6, =0x00200000         // 每次增加2M</span><br><span class="line"></span><br><span class="line">_build_2nd_pgtbl:</span><br><span class="line">        str     x5, [x3], #8            // 填入内容到页表项</span><br><span class="line">        add     x5, x5, x6              // 下一项的地址增加2M</span><br><span class="line">        subs    x4, x4, #1              // 项数减少1</span><br><span class="line">        bne     _build_2nd_pgtbl</span><br><span class="line"></span><br><span class="line">_enable_mmu:</span><br><span class="line">// ······</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E4%BA%8C%E7%BA%A7%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84.png"                        class="" title="二级页表映射"                 ><p>编辑<code>aarch64-qemu.ld</code>，定义<code>LD_TTBR0_L2TBL</code>以及<code>LD_TTBR1_L2TBL</code>符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/* ······ */</span><br><span class="line">/* 页表 */</span><br><span class="line">.pt :</span><br><span class="line">    &#123;</span><br><span class="line">    . = ALIGN(4096);</span><br><span class="line"></span><br><span class="line">    /* 页表基地址TTBR0 */</span><br><span class="line">    LD_TTBR0_BASE = . - __KERN_VMA_BASE;</span><br><span class="line">    . = . + 0x1000;</span><br><span class="line"></span><br><span class="line">    /* 页表基地址TTBR1 */</span><br><span class="line">    LD_TTBR1_BASE = . - __KERN_VMA_BASE;</span><br><span class="line">    . = . + 0x1000;</span><br><span class="line"></span><br><span class="line">    /*二级页表*/</span><br><span class="line">    LD_TTBR0_L2TBL = . - __KERN_VMA_BASE;</span><br><span class="line">    . = . + 0x1000;</span><br><span class="line"></span><br><span class="line">    LD_TTBR1_L2TBL = . - __KERN_VMA_BASE;</span><br><span class="line">    . = . + 0x1000;</span><br><span class="line">    &#125;</span><br><span class="line">/* ······ */</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E6%9C%80%E5%90%8E%E7%9A%84ld%E6%94%B9%E5%8A%A8.png"                        class="" title="最后的ld改动"                 ><p><strong>编译</strong>并<strong>运行</strong>，<strong>测试</strong>能否<strong>正常工作</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo clean &amp;&amp; cargo build &amp;&amp; qemu-system-aarch64 -machine virt,gic-version=2 -cpu cortex-a57 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os -semihosting</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/%E7%AC%AC%E5%9B%9B%E6%AC%A1%E6%B5%8B%E8%AF%95.png"                        class="" title="第四次测试"                 ><p><strong>正常运行！</strong></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>前前后后花了<strong>三个月时间</strong>完成了这篇<strong>1.6W</strong>字的笔记，<strong>最大</strong>的<strong>感悟</strong>却是：<strong>自己的挖的坑只能含泪填完</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;BlogOS&lt;/strong&gt;是&lt;strong&gt;Philipp Oppermann&lt;/strong&gt;用&lt;strong&gt;Rus</summary>
      
    
    
    
    
    <category term="BlogOS" scheme="https://acmezone.top/tags/BlogOS/"/>
    
    <category term="移植" scheme="https://acmezone.top/tags/%E7%A7%BB%E6%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>成为Wheel Maker：发布Android库到MavenCentral</title>
    <link href="https://acmezone.top/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/"/>
    <id>https://acmezone.top/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/</id>
    <published>2022-02-25T15:45:40.000Z</published>
    <updated>2024-03-23T15:30:00.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><strong>Android发展</strong>日新月异，由此诞生了许多强大的<strong>第三方库</strong>，例如<strong>Glide</strong>、<strong>OkHttp</strong>。我们当然也可以<strong>发布自己的库</strong>，当一回<strong>Wheel Maker</strong>！以前大家用<strong>Jcenter</strong>作为平台，而现在大家用<strong>MavenCentral</strong>。</p><h1 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h1><h2 id="1-注册Sonatype账号"><a href="#1-注册Sonatype账号" class="headerlink" title="1. 注册Sonatype账号"></a>1. 注册Sonatype账号</h2><p><strong>MavenCentral</strong>由<strong>Sonatype</strong>运营，因此我们先 <strong><a class="link"   href="https://issues.sonatype.org/" >注册<i class="fas fa-external-link-alt"></i></a></strong> 一个 <strong>Sonatype账号</strong>。</p><h2 id="2-创建问题"><a href="#2-创建问题" class="headerlink" title="2. 创建问题"></a>2. 创建问题</h2><p>首先填写<strong>项目</strong>和<strong>问题类型</strong>。</p><ul><li>项目：Community Support - Open Source Project Repository Hosting (OSSRH)</li><li>问题类型：New Project<img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E5%88%9B%E5%BB%BA%E9%97%AE%E9%A2%98.png"                        class="" title="创建问题"                 >然后根据具体情况填写<strong>库信息</strong>。<img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E5%88%9B%E5%BB%BA%E9%97%AE%E9%A2%982.png"                        class="" title="创建问题2"                 >收到了来自<strong>工作人员</strong>的<strong>回复</strong><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E5%9B%9E%E5%A4%8D.png"                        class="" title="回复"                 >回复中提到我们需要验证<strong>GroupId</strong>对应的<strong>域名</strong>，我这里为了方便就选择<strong>第二种方式</strong>，将<strong>GroupId</strong>改为<strong>io.github.xayahsususu</strong>。<br>回到<strong>GitHub</strong>，新建一个名为<strong>OSSRH-78521</strong>（根据回复中的仓库名）的<strong>仓库</strong>。<img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png"                        class="" title="新建仓库"                 ></li></ul><p><strong>编辑</strong>这个<strong>问题</strong>，把<strong>GroupId</strong>改为<strong>io.github.xayahsususu</strong>并<strong>更新</strong>，然后将<strong>状态</strong>重新<strong>更新为开放</strong>，<strong>等待回复</strong>。<br>几分钟之后，正常情况下会受到完成的回复，注意回复中提到的<code>s01.oss.sonatype.org</code>，这是我们<strong>管理上传库</strong>的<strong>地址</strong>，可能每个<strong>时期</strong>得到的地址<strong>不同</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E5%AE%8C%E6%88%90%E5%9B%9E%E5%A4%8D.png"                        class="" title="完成回复"                 ><p><strong>问题状态</strong>变为<strong>已解决</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E5%AE%8C%E6%88%90%E7%8A%B6%E6%80%81.png"                        class="" title="完成状态"                 ><h2 id="3-申请GPG密钥"><a href="#3-申请GPG密钥" class="headerlink" title="3. 申请GPG密钥"></a>3. 申请GPG密钥</h2><p>发布到<strong>MavenCentral</strong>的库需要<strong>签名</strong>，因此我们 <strong><a class="link"   href="https://www.gpg4win.org/get-gpg4win.html" >下载<i class="fas fa-external-link-alt"></i></a></strong> 相应工具来<strong>生成密钥</strong>，这里以<strong>Windows</strong>为例<br>安装<strong>Gpg4win</strong>，运行<strong>Kleopatra</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/Kleopatra.png"                        class="" title="Kleopatra"                 ><p>左上角<strong>文件 - 新建密钥对 - 创建个人 OpenPGP 密钥对</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E4%B8%AA%E4%BA%BA%E5%AF%86%E9%92%A5.png"                        class="" title="个人密钥"                 ><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E4%B8%AA%E4%BA%BA%E5%AF%86%E9%92%A52.png"                        class="" title="个人密钥2"                 ><p>完成后在<strong>主界面</strong>打开生成的<strong>密钥</strong>，记住<strong>指纹后8位</strong>（后面要用到），然后<strong>生成吊销证书</strong>并<strong>保存</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E4%B8%AA%E4%BA%BA%E5%AF%86%E9%92%A53.png"                        class="" title="个人密钥3"                 ><p>接下来回到<strong>主界面</strong>右键<strong>密钥 - 在服务器上发布</strong>，若网络没有问题即可<strong>发布成功</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E5%AF%86%E9%92%A5%E5%8F%91%E5%B8%83%E6%88%90%E5%8A%9F.png"                        class="" title="密钥发布成功"                 ><p><strong>发布成功</strong>后，再次右键<strong>密钥 - 备份私钥</strong>，将私钥导出<strong>（将后缀改为.gpg）</strong>。<br>接下来打开密钥，<strong>修改密码</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81.png"                        class="" title="修改密码"                 ><h2 id="4-Android库发布脚本配置"><a href="#4-Android库发布脚本配置" class="headerlink" title="4. Android库发布脚本配置"></a>4. Android库发布脚本配置</h2><p>在项目<strong>根目录</strong>下新建<code>publish-mavencentral.gradle</code><br>输入以下代码（如果上文中回复得到的地址不为<code>s01.oss.sonatype.org</code>，则将其<strong>改为得到的地址</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#x27;maven-publish&#x27;</span><br><span class="line">apply plugin: &#x27;signing&#x27;</span><br><span class="line"></span><br><span class="line">task androidSourcesJar(type: Jar) &#123;</span><br><span class="line">    classifier = &#x27;sources&#x27;</span><br><span class="line">    from android.sourceSets.main.java.source</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext[&quot;signing.keyId&quot;] = &#x27;&#x27;</span><br><span class="line">ext[&quot;signing.password&quot;] = &#x27;&#x27;</span><br><span class="line">ext[&quot;signing.secretKeyRingFile&quot;] = &#x27;&#x27;</span><br><span class="line">ext[&quot;ossrhUsername&quot;] = &#x27;&#x27;</span><br><span class="line">ext[&quot;ossrhPassword&quot;] = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">File secretPropsFile = project.rootProject.file(&#x27;local.properties&#x27;)</span><br><span class="line">if (secretPropsFile.exists()) &#123;</span><br><span class="line">    println &quot;Found secret props file, loading props&quot;</span><br><span class="line">    Properties p = new Properties()</span><br><span class="line">    p.load(new FileInputStream(secretPropsFile))</span><br><span class="line">    p.each &#123; name, value -&gt;</span><br><span class="line">        ext[name] = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    println &quot;No props file, loading env vars&quot;</span><br><span class="line">&#125;</span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        release(MavenPublication) &#123;</span><br><span class="line">            // The coordinates of the library, being set from variables that</span><br><span class="line">            // we&#x27;ll set up in a moment</span><br><span class="line">            groupId PUBLISH_GROUP_ID</span><br><span class="line">            artifactId PUBLISH_ARTIFACT_ID</span><br><span class="line">            version PUBLISH_VERSION</span><br><span class="line"></span><br><span class="line">            // Two artifacts, the `aar` and the sources</span><br><span class="line">            artifact(&quot;$buildDir/outputs/aar/$&#123;project.getName()&#125;-release.aar&quot;)</span><br><span class="line">            artifact androidSourcesJar</span><br><span class="line"></span><br><span class="line">            // Self-explanatory metadata for the most part</span><br><span class="line">            pom &#123;</span><br><span class="line">                name = PUBLISH_ARTIFACT_ID</span><br><span class="line">                description = PUBLISH_DESCRIPTION</span><br><span class="line">                // If your project has a dedicated site, use its URL here</span><br><span class="line">                url = PUBLISH_GITHUB_URL</span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name = PUBLISH_LICENSE_NAME</span><br><span class="line">                        url = PUBLISH_LICENSE_URL</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id = PUBLISH_DEVELOPER_ID</span><br><span class="line">                        name = PUBLISH_DEVELOPER_NAME</span><br><span class="line">                        email = PUBLISH_DEVELOPER_EMAIL</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                // Version control info, if you&#x27;re using GitHub, follow the format as seen here</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection = PUBLISH_CONNECTION</span><br><span class="line">                    developerConnection = PUBLISH_CONNECTION_DEVELOPER</span><br><span class="line">                    url = PUBLISH_CONNECTION_URL</span><br><span class="line">                &#125;</span><br><span class="line">                // A slightly hacky fix so that your POM will include any transitive dependencies</span><br><span class="line">                // that your library builds upon</span><br><span class="line">                withXml &#123;</span><br><span class="line">                    def dependenciesNode = asNode().appendNode(&#x27;dependencies&#x27;)</span><br><span class="line"></span><br><span class="line">                    project.configurations.implementation.allDependencies.each &#123;</span><br><span class="line">                        def dependencyNode = dependenciesNode.appendNode(&#x27;dependency&#x27;)</span><br><span class="line">                        dependencyNode.appendNode(&#x27;groupId&#x27;, it.group)</span><br><span class="line">                        dependencyNode.appendNode(&#x27;artifactId&#x27;, it.name)</span><br><span class="line">                        dependencyNode.appendNode(&#x27;version&#x27;, it.version)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        // The repository to publish to, Sonatype/MavenCentral</span><br><span class="line">        maven &#123;</span><br><span class="line">            // This is an arbitrary name, you may also use &quot;mavencentral&quot; or</span><br><span class="line">            // any other name that&#x27;s descriptive for you</span><br><span class="line">            name = PUBLISH_MAVEN_NAME</span><br><span class="line"></span><br><span class="line">            def releasesRepoUrl = &quot;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/&quot;</span><br><span class="line">            def snapshotsRepoUrl = &quot;https://s01.oss.sonatype.org/content/repositories/snapshots/&quot;</span><br><span class="line">            // You only need this if you want to publish snapshots, otherwise just set the URL</span><br><span class="line">            // to the release repo directly</span><br><span class="line">            url = version.endsWith(&#x27;SNAPSHOT&#x27;) ? snapshotsRepoUrl : releasesRepoUrl</span><br><span class="line"></span><br><span class="line">            // The username and password we&#x27;ve fetched earlier</span><br><span class="line">            credentials &#123;</span><br><span class="line">                username ossrhUsername</span><br><span class="line">                password ossrhPassword</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">signing &#123;</span><br><span class="line">    sign publishing.publications</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开项目<strong>根目录</strong>中的<code>local.properties</code>，添加以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">signing.keyId=$密钥指纹后八位（无空格）</span><br><span class="line">signing.password=$密钥密码</span><br><span class="line">signing.secretKeyRingFile=$导出密钥的文件路径，例如：E\:\\ProgramDesign\\AndroidProjects\\Signature\\Xayah_0xEB95FB34_SECRET.gpg</span><br><span class="line">ossrhUsername=$Sonatype帐号</span><br><span class="line">ossrhPassword=$Sonatype密码</span><br></pre></td></tr></table></figure><p>打开<strong>待发布库目录</strong>下的<code>build.gradle</code>，行位添加以下代码（根据示例参考修改填写）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    PUBLISH_GROUP_ID = &quot;io.github.xayahsususu&quot;</span><br><span class="line">    PUBLISH_ARTIFACT_ID = &#x27;materialyoufileexplorer&#x27;</span><br><span class="line">    PUBLISH_DESCRIPTION = &#x27;A file explorer with the style of Material You.&#x27;</span><br><span class="line">    PUBLISH_GITHUB_URL = &#x27;https://github.com/XayahSuSuSu/Android-MaterialYouFileExplorer&#x27;</span><br><span class="line">    PUBLISH_VERSION = &#x27;1.0.0&#x27;</span><br><span class="line">    PUBLISH_LICENSE_NAME = &#x27;GPL-3.0&#x27;</span><br><span class="line">    PUBLISH_LICENSE_URL = &#x27;https://choosealicense.com/licenses/gpl-3.0/&#x27;</span><br><span class="line">    PUBLISH_DE_URL = &#x27;https://choosealicense.com/licenses/gpl-3.0/&#x27;</span><br><span class="line">    PUBLISH_DEVELOPER_ID = &#x27;Xayah&#x27;</span><br><span class="line">    PUBLISH_DEVELOPER_NAME = &#x27;Xayah&#x27;</span><br><span class="line">    PUBLISH_DEVELOPER_EMAIL = &#x27;zds1249475336@gmail.com&#x27;</span><br><span class="line">    PUBLISH_CONNECTION = &#x27;scm:git:github.com/XayahSuSuSu/Android-MaterialYouFileExplorer.git&#x27;</span><br><span class="line">    PUBLISH_CONNECTION_DEVELOPER = &#x27;scm:git:ssh://github.com/XayahSuSuSu/Android-MaterialYouFileExplorer.git&#x27;</span><br><span class="line">    PUBLISH_CONNECTION_URL = &#x27;https://github.com/XayahSuSuSu/Android-MaterialYouFileExplorer/tree/main&#x27;</span><br><span class="line">    PUBLISH_MAVEN_NAME = &quot;MaterialYouFileExplorer&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">apply from: &quot;$&#123;rootProject.projectDir&#125;/publish-mavencentral.gradle&quot;</span><br></pre></td></tr></table></figure><h2 id="5-发布Android库到MavenCentral"><a href="#5-发布Android库到MavenCentral" class="headerlink" title="5. 发布Android库到MavenCentral"></a>5. 发布Android库到MavenCentral</h2><p>打开<strong>Settings - Experimental - 取消勾选 Do not build Gradle task list during Gradle sync</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/Experimental.png"                        class="" title="Experimental"                 ><p>点击左上角<strong>File - Sync Project with Gradle Files</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/Sync.png"                        class="" title="Sync"                 ><p>完成后打开<strong>右侧Gradle窗口</strong>，双击运行<strong>build - assemble</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/assemble.png"                        class="" title="assemble"                 ><p><strong>编译完成</strong>后，双击运行<strong>publishing - publishReleasePublicationTo${LibraryName}Repository</strong> 发布到<a class="link"   href="https://s01.oss.sonatype.org/" >https://s01.oss.sonatype.org<i class="fas fa-external-link-alt"></i></a> （具体地址由上文回复中可得）</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/Publish.png"                        class="" title="Publish"                 ><p>打开<strong>管理地址</strong>后，进入<strong>Staging Repositories</strong>，即可看到我们上传的库<strong>记录</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/NRM.png"                        class="" title="NRM"                 ><p>打开<strong>库记录</strong>，点击<strong>Close</strong>，<strong>输入描述</strong>后<strong>Confirm</strong>，稍等片刻即可刷新查看，若<strong>Close</strong>成功，则点击<strong>Release</strong>发布。<strong>发布成功</strong>后，之前的问题会收到<strong>发布成功</strong>的<strong>回复</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/%E5%8F%91%E5%B8%83%E6%88%90%E5%8A%9F%E5%9B%9E%E5%A4%8D.png"                        class="" title="发布成功回复"                 ><p>假以时日，我们即可在<a class="link"   href="https://repo1.maven.org/maven2/" >https://repo1.maven.org/maven2/<i class="fas fa-external-link-alt"></i></a> 和 <a class="link"   href="https://search.maven.org/" >https://search.maven.org/<i class="fas fa-external-link-alt"></i></a> 中查看到我们发布的<strong>库信息</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/25/%E6%88%90%E4%B8%BAWheel-Maker%EF%BC%9A%E5%8F%91%E5%B8%83Android%E5%BA%93%E5%88%B0MavenCentral/Maven.png"                        class="" title="Maven"                 ><h2 id="6-使用已发布的Android库"><a href="#6-使用已发布的Android库" class="headerlink" title="6. 使用已发布的Android库"></a>6. 使用已发布的Android库</h2><p>打开<strong>需要引用库</strong>的项目的<strong>app</strong>目录下的<code>build.gradle</code>，输入以下代码<strong>引用</strong>。<br>格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;$PUBLISH_GROUP_ID:$PUBLISH_ARTIFACT_ID:$PUBLISH_VERSION&#x27;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;io.github.xayahsususu:materialyoufileexplorer:1.0.0&#x27;</span><br></pre></td></tr></table></figure><h1 id="三、参考文章"><a href="#三、参考文章" class="headerlink" title="三、参考文章"></a>三、参考文章</h1><ul><li><a class="link"   href="https://juejin.cn/post/6932485276124233735" >Android库发布到Maven Central全攻略<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Android发展&lt;/strong&gt;日新月异，由此诞生了许多强大的&lt;strong&gt;第三方库&lt;/strong&gt;</summary>
      
    
    
    
    
    <category term="Android" scheme="https://acmezone.top/tags/Android/"/>
    
    <category term="MavenCentral" scheme="https://acmezone.top/tags/MavenCentral/"/>
    
  </entry>
  
  <entry>
    <title>Windows Subsystem for Linux 2 的艺术</title>
    <link href="https://acmezone.top/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>https://acmezone.top/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/</id>
    <published>2022-02-12T11:13:48.000Z</published>
    <updated>2024-03-23T15:29:59.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p><strong>微软赛高</strong>！得益于其强大的技术支持，我们可以在 <strong>Windows</strong> 上无缝体验 <strong>Linux (Windows Subsystem for Linux)</strong> 甚至 <strong>Android (Windows Subsystem for Android)</strong> 。</p><p>将 <strong>WSL2</strong> 与 <strong>Jetbrains系列IDE</strong> 或 <strong>VS Code</strong> 结合，我们可以在 <strong>Windows</strong> 下无缝开发并调试 <strong>Linux</strong> 环境程序。</p><h1 id="二、安装WSL2"><a href="#二、安装WSL2" class="headerlink" title="二、安装WSL2"></a>二、安装WSL2</h1><h2 id="1-系统要求"><a href="#1-系统要求" class="headerlink" title="1. 系统要求"></a>1. 系统要求</h2><p>笔者使用的是 <strong>Windows 11 专业版</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/Win11.png"                        class="" title="Win11"                 ><h2 id="2-启用-适用于Linux的Windows子系统"><a href="#2-启用-适用于Linux的Windows子系统" class="headerlink" title="2. 启用 适用于Linux的Windows子系统"></a>2. 启用 适用于Linux的Windows子系统</h2><p>打开 <strong>启用或关闭Windows功能</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/GN.png"                        class="" title="GN"                 ><p>启用 <strong>适用于Linux的Windows子系统</strong></p><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/GN2.png"                        class="" title="GN2"                 ><h2 id="3-更新-WSL-2-Linux-内核"><a href="#3-更新-WSL-2-Linux-内核" class="headerlink" title="3. 更新 WSL 2 Linux 内核"></a>3. 更新 WSL 2 Linux 内核</h2><p>下载并安装<a class="link"   href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" >适用于 x64 计算机的 WSL2 Linux 内核更新包<i class="fas fa-external-link-alt"></i></a></p><h2 id="4-将-WSL-2-设置为默认版本"><a href="#4-将-WSL-2-设置为默认版本" class="headerlink" title="4. 将 WSL 2 设置为默认版本"></a>4. 将 WSL 2 设置为默认版本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h2 id="5-安装所选的-Linux-分发"><a href="#5-安装所选的-Linux-分发" class="headerlink" title="5. 安装所选的 Linux 分发"></a>5. 安装所选的 Linux 分发</h2><p>这里以<a class="link"   href="https://www.microsoft.com/store/apps/9n6svws3rx71" >Ubuntu 20.04 LTS<i class="fas fa-external-link-alt"></i></a>为例<br>你还可以选择</p><ul><li><a class="link"   href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q" >Ubuntu 18.04 LTS<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9NJFZK00FGKV" >openSUSE Leap 15.1<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1" >SUSE Linux Enterprise Server 12 SP5<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9PN498VPMF3Z" >SUSE Linux Enterprise Server 15 SP1<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9PKR34TNCV07" >Kali Linux<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9MSVKQC78PK6" >Debian GNU/Linux<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9n6gdm4k2hnc" >Fedora Remix for WSL<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P" >Pengwin<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9N8LP0X93VCP" >Pengwin Enterprise<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9p804crf0395" >Alpine WSL<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.microsoft.com/store/apps/9msmjqd017x7" >Raft（免费试用版）<i class="fas fa-external-link-alt"></i></a></li></ul><p>打开<strong>Microsoft Store</strong>，搜索<strong>Ubuntu 20.04</strong>并安装</p><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/Ubuntu.png"                        class="" title="Ubuntu"                 ><h2 id="6-配置账号"><a href="#6-配置账号" class="headerlink" title="6. 配置账号"></a>6. 配置账号</h2><p>打开<strong>Ubuntu 20.04</strong>（可从<strong>Microsoft Store</strong>打开），配置<strong>用户名密码</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/Ubuntu2.png"                        class="" title="Ubuntu2"                 ><h2 id="7-修改安装目录"><a href="#7-修改安装目录" class="headerlink" title="7. 修改安装目录"></a>7. 修改安装目录</h2><p>默认<strong>WSL</strong>位于<strong>C盘</strong>，如果使用频率较高的话，你会发现C盘占用空间蹭蹭往上涨~<br>这里笔者选择修改安装目录到<strong>D盘</strong></p><h3 id="1-查看已安装的Linux发行版本"><a href="#1-查看已安装的Linux发行版本" class="headerlink" title="1) 查看已安装的Linux发行版本"></a>1) 查看已安装的Linux发行版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l --all -v</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/List.png"                        class="" title="List"                 ><h3 id="2-导出Ubuntu到D盘"><a href="#2-导出Ubuntu到D盘" class="headerlink" title="2) 导出Ubuntu到D盘"></a>2) 导出Ubuntu到D盘</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu-20.04 D:\WSL2\WSL-Ubuntu20.04.tar</span><br></pre></td></tr></table></figure><h3 id="3-注销当前Ubuntu"><a href="#3-注销当前Ubuntu" class="headerlink" title="3) 注销当前Ubuntu"></a>3) 注销当前Ubuntu</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-20.04</span><br></pre></td></tr></table></figure><h3 id="4-将导出的文件重新导入并安装"><a href="#4-将导出的文件重新导入并安装" class="headerlink" title="4) 将导出的文件重新导入并安装"></a>4) 将导出的文件重新导入并安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu-20.04 D:\WSL2\WSL-Ubuntu20.04 D:\WSL2\WSL-Ubuntu20.04.tar --version 2</span><br></pre></td></tr></table></figure><h3 id="5-重新设置用户名（将-USERNAME修改为安装时的用户名，密码不变）"><a href="#5-重新设置用户名（将-USERNAME修改为安装时的用户名，密码不变）" class="headerlink" title="5) 重新设置用户名（将$USERNAME修改为安装时的用户名，密码不变）"></a>5) 重新设置用户名（将$USERNAME修改为安装时的用户名，密码不变）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu2004 config --default-user $USERNAME</span><br></pre></td></tr></table></figure><h3 id="Windows-Terminal设置默认启动目录"><a href="#Windows-Terminal设置默认启动目录" class="headerlink" title="* Windows Terminal设置默认启动目录"></a>* Windows Terminal设置默认启动目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\wsl.localhost\Ubuntu-20.04\home\$USERNAME</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/WT.png"                        class="" title="WT"                 ><h3 id="6-登录到WSL2"><a href="#6-登录到WSL2" class="headerlink" title="6) 登录到WSL2"></a>6) 登录到WSL2</h3><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/Ubuntu3.png"                        class="" title="Ubuntu3"                 ><h1 id="三、环境配置"><a href="#三、环境配置" class="headerlink" title="三、环境配置"></a>三、环境配置</h1><h2 id="1-软件源修改为阿里源"><a href="#1-软件源修改为阿里源" class="headerlink" title="1. 软件源修改为阿里源"></a>1. 软件源修改为<a class="link"   href="https://developer.aliyun.com/mirror/ubuntu" >阿里源<i class="fas fa-external-link-alt"></i></a></h2><p>使用<strong>Vim</strong>打开<code>sources.list</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>键入<code>:%d</code>清空<br>粘贴<strong>阿里源</strong>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>按<code>Esc</code>，键入<code>:wq</code>保存并退出<br>更新<strong>源</strong>并升级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="2-开启Systemd"><a href="#2-开启Systemd" class="headerlink" title="2. 开启Systemd"></a>2. 开启Systemd</h2><p>某些程序需要<strong>Systemd</strong>的支持，因此我们使用<a class="link"   href="https://github.com/DamionGans/ubuntu-wsl2-systemd-script" >ubuntu-wsl2-systemd-script<i class="fas fa-external-link-alt"></i></a>来开启。<br>安装<strong>git</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>克隆脚本仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git</span><br></pre></td></tr></table></figure><p>跳转到<code>ubuntu-wsl2-systemd-script</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ubuntu-wsl2-systemd-script</span><br></pre></td></tr></table></figure><p>运行安装脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ubuntu-wsl2-systemd-script.sh</span><br></pre></td></tr></table></figure><p>重启<strong>Ubuntu</strong>（<strong>宿主机终端执行</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown Ubuntu-20.04</span><br></pre></td></tr></table></figure><p>再次登录到<strong>Ubuntu</strong>，<strong>验证Systemd</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2022/02/12/Windows-Subsystem-for-Linux-2-%E7%9A%84%E8%89%BA%E6%9C%AF/Systemd.png"                        class="" title="Systemd"                 ><p>如上图则<strong>配置成功</strong></p><h1 id="四、配置并使用宿主机代理"><a href="#四、配置并使用宿主机代理" class="headerlink" title="四、配置并使用宿主机代理"></a>四、配置并使用宿主机代理</h1><p>创建并编辑<code>.proxyrc</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .proxyrc</span><br></pre></td></tr></table></figure><p>输入以下代码（<code>$port</code>为宿主机代理端口，请自行修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">host_ip=$(cat /etc/resolv.conf |grep &quot;nameserver&quot; |cut -f 2 -d &quot; &quot;)</span><br><span class="line">export ALL_PROXY=&quot;http://$host_ip:$port&quot;</span><br></pre></td></tr></table></figure><p>按<code>Esc</code>，键入<code>:wq</code>保存并退出<br>以后每次连接宿主机代理只需<code>source .proxyrc</code>即可生效</p><h1 id="五、参考文章"><a href="#五、参考文章" class="headerlink" title="五、参考文章"></a>五、参考文章</h1><ul><li><a class="link"   href="https://zhuanlan.zhihu.com/p/165508059" >Win10使用WSL2正确姿势<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://blog.csdn.net/w851685279/article/details/108904106" >win10 wsl2修改默认安装目录到其他盘<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://zhuanlan.zhihu.com/p/153124468" >为 WSL2 一键设置代理<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;微软赛高&lt;/strong&gt;！得益于其强大的技术支持，我们可以在 &lt;strong&gt;Windows&lt;/stron</summary>
      
    
    
    
    
    <category term="WSL2" scheme="https://acmezone.top/tags/WSL2/"/>
    
    <category term="Linux" scheme="https://acmezone.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>利用WebView实现Vue打包至Android移动端</title>
    <link href="https://acmezone.top/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>https://acmezone.top/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/</id>
    <published>2021-12-06T14:57:19.000Z</published>
    <updated>2024-03-23T15:30:00.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue打包至移动端目前已经有许多解决方案，例如<strong>HBuilder</strong>、<strong>Cordova</strong>等等。但个人认为过程实在是太过于繁杂，且有的还需要<strong>联网验证</strong>，于是有了这篇文章。原理就是利用原生<strong>Android WebView</strong>本地加载Vue打包后的<strong>静态HTML</strong>，本文章以<strong>Android</strong>为例，使用<strong>Android Studio</strong>本地打包，<strong>IOS端</strong>同理。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>工具：<a class="link"   href="https://developer.android.google.cn/studio/" >Android Studio<i class="fas fa-external-link-alt"></i></a><br>源码：<code>npm run build</code>之后的<strong>静态资源</strong>，例如<code>dist</code>文件夹</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="1-打开Android-Studio"><a href="#1-打开Android-Studio" class="headerlink" title="1. 打开Android Studio"></a>1. 打开Android Studio</h4><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/Open.png"                        class="" title="Open"                 ><h4 id="2-新建项目-New-Project-Empty-Activity-Next"><a href="#2-新建项目-New-Project-Empty-Activity-Next" class="headerlink" title="2. 新建项目 New Project - Empty Activity - Next"></a>2. 新建项目 New Project - Empty Activity - Next</h4><p>填写<strong>Name（应用名称）、Package Name（包名）、Language（以Kotlin为例）、Minimum SDK（应用支持的最低Android版本）</strong>，然后点击<strong>Finish</strong>创建项目。初次安装AS并创建项目需要联网下载Gradle等依赖，请耐心等待。</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/New.png"                        class="" title="New"                 ><h4 id="3-主题设置为NoActionBar"><a href="#3-主题设置为NoActionBar" class="headerlink" title="3. 主题设置为NoActionBar"></a>3. 主题设置为NoActionBar</h4><p>默认主题会有一个<strong>ActionBar</strong>，需要去掉以保证加载后的Vue UI统一性。<br>首先在左侧打开<strong>themes</strong>下的两个主题文件，其中一个是<strong>深色模式</strong>的主题，我们需要将两个都改为<strong>NoActionBar</strong>。这里以<strong>浅色模式</strong>为例。</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/ActionBar.png"                        class="" title="ActionBar"                 ><p>↓</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/NoActionBar.png"                        class="" title="NoActionBar"                 ><h4 id="4-设置状态栏背景颜色"><a href="#4-设置状态栏背景颜色" class="headerlink" title="4. 设置状态栏背景颜色"></a>4. 设置状态栏背景颜色</h4><p>同样，在<strong>浅色模式</strong>主题文件中，修改<code>android:statusBarColor</code>为你想要的颜色，并将<strong>状态栏文字图标</strong>等设为<strong>深色</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;android:windowLightStatusBar&quot;&gt;true&lt;/item&gt;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/statusBarColor.png"                        class="" title="statusBarColor"                 ><p>深色模式同理。</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/statusBarColorDark.png"                        class="" title="statusBarColorDark"                 ><h4 id="5-布局添加WebView"><a href="#5-布局添加WebView" class="headerlink" title="5. 布局添加WebView"></a>5. 布局添加WebView</h4><p>打开<code>activity_main.xml</code>：</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/activity_main.png"                        class="" title="activity_main"                 ><p>删除<strong>TextView</strong>并添加<strong>WebView</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;WebView</span><br><span class="line">    android:id=&quot;@+id/web_view&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/WebView.png"                        class="" title="WebView"                 ><h4 id="6-本地加载打包后的HTML"><a href="#6-本地加载打包后的HTML" class="headerlink" title="6. 本地加载打包后的HTML"></a>6. 本地加载打包后的HTML</h4><p>在项目目录下<code>app\src\main</code>创建<code>assets</code>文件夹，将打包后的<strong>dist</strong>放入<strong>assets</strong>：</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets.png"                        class="" title="assets"                 ><p>打开<code>MainActivity.kt</code></p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/MainActivity.png"                        class="" title="MainActivity"                 ><p><strong>绑定组件</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val webView: WebView = findViewById(R.id.web_view)</span><br></pre></td></tr></table></figure><p><strong>本地加载HTML</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.loadUrl(&quot;file:////android_asset/dist/index.html&quot;)</span><br></pre></td></tr></table></figure><p><strong>允许JS交互</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.settings.javaScriptEnabled = true</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/code.png"                        class="" title="code"                 ><p><strong>打开<code>AndroidManifest.xml</code></strong> ：</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/AndroidManifest.png"                        class="" title="AndroidManifest"                 ><p><strong>添加INTERNET权限</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/INTERNET.png"                        class="" title="INTERNET"                 ><h4 id="8-更换APP图标"><a href="#8-更换APP图标" class="headerlink" title="8. 更换APP图标"></a>8. 更换APP图标</h4><p>左栏右键<code>res - drawable - New - Image Asset</code></p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_1.png"                        class="" title="icon_1"                 ><p>配置图标<strong>前景</strong>、<strong>背景</strong>：</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_2.png"                        class="" title="icon_2"                 ><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_3.png"                        class="" title="icon_3"                 ><p>Next - Finish</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_4.png"                        class="" title="icon_4"                 ><p>删除<code>ic_launcher.webp</code>、<code>ic_launcher_round.webp</code>（如果有的话）</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_5.png"                        class="" title="icon_5"                 ><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_6.png"                        class="" title="icon_6"                 ><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_7.png"                        class="" title="icon_7"                 ><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/icon_8.png"                        class="" title="icon_8"                 ><h4 id="7-调试"><a href="#7-调试" class="headerlink" title="7. 调试"></a>7. 调试</h4><h5 id="1-Android调试"><a href="#1-Android调试" class="headerlink" title="1) Android调试"></a>1) Android调试</h5><p>以<strong>真机调试</strong>为例，当然也可以使用<strong>模拟器</strong>。<br>真机调试需要在<strong>开发者模式</strong>开启<strong>USB调试</strong>模式。<br>点击右上方<strong>绿色三角形</strong>运行。</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/run.png"                        class="" title="run"                 ><p>稍等片刻，会自动启动APP：</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/app_0.png"                        class="" title="app_0"                 ><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/app_1.png"                        class="" title="app_1"                 ><h5 id="2-WebView调试"><a href="#2-WebView调试" class="headerlink" title="2) WebView调试"></a>2) WebView调试</h5><p>需要在<strong>开发者模式</strong>开启<strong>USB调试</strong>模式。<br>在<code>MainActivity.kt</code>中添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebView.setWebContentsDebuggingEnabled(true)</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/debug.png"                        class="" title="debug"                 ><p>重新在AS中调试运行App，打开谷歌浏览器，地址栏输入：<code>chrome://inspect/#devices</code>进入远程调试工具。<br>稍等片刻工具会自动载入已运行的WebView程序，点击<code>inspect</code>进入调试模式。</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/devices.png"                        class="" title="devices"                 ><h4 id="8-编译并签名"><a href="#8-编译并签名" class="headerlink" title="8. 编译并签名"></a>8. 编译并签名</h4><p>点击工具栏 <strong>Build - Generate Signed Bundle / APK …</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/generate.png"                        class="" title="generate"                 ><p>选择<strong>APK - Next</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/next.png"                        class="" title="next"                 ><p>新建签名 <strong>Create new…</strong> 填写<strong>签名信息</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/newjks.png"                        class="" title="newjks"                 ><p>选择刚刚创建的<strong>签名文件 xxx.jks</strong> 填写对应信息后点击 <strong>Next</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/sign.png"                        class="" title="sign"                 ><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/sign_next.png"                        class="" title="sign"                 ><p>选择<strong>release</strong>并点击<strong>Finish</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/sign_finish.png"                        class="" title="sign_finish"                 ><p><strong>项目目录</strong>下<code>app\release</code>即是<strong>编译完成</strong>的apk文件。</p><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/successfully.png"                        class="" title="successfully"                 ><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/release.png"                        class="" title="release"                 ><h4 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h4><h5 id="1-跨域"><a href="#1-跨域" class="headerlink" title="1) 跨域"></a>1) 跨域</h5><p>建议从后端解决跨域问题，以Flask为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask-cors</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_cors import CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&#x27;JSON_AS_ASCII&#x27;] = False</span><br><span class="line"># 允许全局跨域</span><br><span class="line">CORS(app, supports_credentials=True)</span><br></pre></td></tr></table></figure><h5 id="2-WebView调试出现ERR-CLEARTEXT-NOT-PERMITTED"><a href="#2-WebView调试出现ERR-CLEARTEXT-NOT-PERMITTED" class="headerlink" title="2) WebView调试出现ERR_CLEARTEXT_NOT_PERMITTED"></a>2) WebView调试出现ERR_CLEARTEXT_NOT_PERMITTED</h5><img                         lazyload                       alt="image"                       data-src="/2021/12/06/%E5%88%A9%E7%94%A8WebView%E5%AE%9E%E7%8E%B0Vue%E6%89%93%E5%8C%85%E8%87%B3Android%E7%A7%BB%E5%8A%A8%E7%AB%AF/ERR_CLEARTEXT_NOT_PERMITTED.png"                        class="" title="ERR_CLEARTEXT_NOT_PERMITTED"                 ><p>打开<code>AndroidManifest.xml</code>，在<code>application</code>标签下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    ······</span><br><span class="line">    android:usesCleartextTraffic=&quot;true&quot;</span><br><span class="line">    ······</span><br><span class="line">&lt;/application&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Vue打包至移动端目前已经有许多解决方案，例如&lt;strong&gt;HBuilder&lt;/strong&gt;、&lt;strong&gt;Cordova&lt;/stro</summary>
      
    
    
    
    
    <category term="Android" scheme="https://acmezone.top/tags/Android/"/>
    
    <category term="Vue" scheme="https://acmezone.top/tags/Vue/"/>
    
    <category term="WebView" scheme="https://acmezone.top/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API笔记</title>
    <link href="https://acmezone.top/2021/09/27/RESTful-API%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2021/09/27/RESTful-API%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-27T02:17:49.000Z</published>
    <updated>2024-03-23T15:29:59.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：覃超<br>链接：<a class="link"   href="https://www.zhihu.com/question/28557115/answer/48094438" >https://www.zhihu.com/question/28557115/answer/48094438<i class="fas fa-external-link-alt"></i></a><br>来源：知乎</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>REST</strong> – <strong>Resource Representational State Transfer</strong> <strong>资源</strong>在<strong>网络</strong>中以某种<strong>表现形式</strong>进行<strong>状态转移</strong></p><p><strong>Resource <strong>：</strong>资源</strong>，即<strong>数据</strong>。例如 <strong>friends</strong>，<strong>profile</strong>等；</p><p><strong>Representational <strong>：某种</strong>表现形式</strong>，例如<strong>JSON</strong>，<strong>XML</strong>，<strong>JPEG</strong>等；</p><p><strong>State Transfer <strong>：</strong>状态变化</strong>。通过<strong>HTTP动词</strong>实现。</p><p>一言以蔽之：<strong>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</strong></p><h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><ol><li><p><strong>URL</strong>中只使用<strong>名词</strong>来指定<strong>资源</strong>，原则上<strong>不使用动词</strong>。</p></li><li><p><strong>Server</strong>和<strong>Client</strong>之间传递某<strong>资源</strong>的一个<strong>表现形式</strong>，比如用<strong>JSON</strong>，<strong>XML传输文本</strong>，或者用<strong>JPG</strong>，<strong>WebP传输图片</strong>等。当然还可以<strong>压缩HTTP传输时的数据（On-wire data compression）</strong>。</p></li><li><p>用 <strong>HTTP Status Code</strong>传递<strong>Server</strong>的<strong>状态信息</strong>。例如最常用的 <strong>200</strong> 表示<strong>成功</strong>，<strong>500</strong> 表示<strong>Server内部错误</strong>等。</p><img                         lazyload                       alt="image"                       data-src="/2021/09/27/RESTful-API%E7%AC%94%E8%AE%B0/REST_API_Design.png"                        class="" title="REST_API_Design"                 ></li></ol><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取某人的好友列表</span><br><span class="line">/v1/friends</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取某人的详细信息</span><br><span class="line">/v1/profile</span><br></pre></td></tr></table></figure><p>用<strong>HTTP协议</strong>里的<strong>动词</strong>来实现<strong>资源</strong>的<strong>添加</strong>，<strong>修改</strong>，<strong>删除</strong>等<strong>操作</strong>。即通过<strong>HTTP动词</strong>来实现<strong>资源</strong>的<strong>状态变化</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除某人的好友</span><br><span class="line">DELETE /v1/friends</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加好友</span><br><span class="line">POST /v1/friends</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 更新个人资料</span><br><span class="line">UPDATE /v1/profile</span><br></pre></td></tr></table></figure><p>如下使用不符合规范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /v1/deleteFriend</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;作者：覃超&lt;br&gt;链接：&lt;a class=&quot;link&quot;   href=&quot;https://www.zhihu.com/question/28557115/answer/48094438&quot; &gt;https://www.zhihu.com/question</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://acmezone.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="后端" scheme="https://acmezone.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="API" scheme="https://acmezone.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>树莓派入门体验笔记</title>
    <link href="https://acmezone.top/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-13T13:33:14.000Z</published>
    <updated>2024-03-23T15:30:00.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>老早就对这块神奇的<strong>微型电脑</strong>感兴趣，机缘巧合之下<strong>暂时</strong>搞到一块，我手上这块是<strong>树莓派3B</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/Raspberry.jpg"                        class="" title="Raspberry"                 ><h1 id="镜像烧录"><a href="#镜像烧录" class="headerlink" title="镜像烧录"></a>镜像烧录</h1><p>起初我还以为我手上这块能够直接<strong>U盘引导</strong>，在我无数次尝试下终于放弃了这个想法，实际上 <strong>树莓派3B+</strong> 才行。</p><p>因此只能用<strong>SD卡</strong>了！虽然卡能直接插在板子上，但<strong>烧录镜像</strong>的时候还是需要<strong>读卡器</strong>这一<strong>远古神器</strong>。</p><p>我的<strong>烧录环境</strong>是<strong>Windows</strong>。</p><p>下载并安装 <strong><a class="link"   href="https://www.raspberrypi.org/software/" >Raspberry Pi Imager<i class="fas fa-external-link-alt"></i></a></strong> 。</p><p>打开<strong>Raspberry Pi Imager</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/RaspberryPiImager.png"                        class="" title="RaspberryPiImager"                 ><p>首先选择<strong>镜像</strong>（官方的<strong>Raspberry Pi OS</strong>蛮好用的）</p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/ChooseOS.png"                        class="" title="ChooseOS"                 ><p>把<strong>SD卡</strong>插入<strong>读卡器</strong>，再<strong>连接</strong>到<strong>PC</strong></p><p>然后选择<strong>存储卡</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/ChooseStorage.png"                        class="" title="ChooseStorage"                 ><p>接下来点击<strong>Write</strong>，可以坐下来喝一杯<strong>奶茶</strong>并等待<strong>完成</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/Finish.png"                        class="" title="Finish"                 ><h1 id="开机前准备"><a href="#开机前准备" class="headerlink" title="开机前准备"></a>开机前准备</h1><p>如果有<strong>HDMI接口</strong>和<strong>显示器</strong>，那么可以直接进行<strong>下一步</strong>，然后<strong>手动连接网络</strong>。</p><p>如果有<strong>网线</strong>，那么也可以直接进行<strong>下一步</strong>。</p><p>如果<strong>啥都没有</strong>（<strong>像我一样</strong>），那么就需要在开机前对烧录好系统的SD卡<strong>“动点手脚”</strong>了。</p><p>首先<strong>重新拔插读卡器</strong></p><p><strong>不要格式化H:<strong>（</strong>Windows</strong>无法识别<strong>Linux文件系统</strong>）</p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/Format.png"                        class="" title="Format"                 ><p>然后打开另一个<strong>boot分区</strong></p><p>在该分区<strong>根目录</strong>下<strong>新建</strong>一个名为 <strong><code>ssh</code></strong> 的<strong>空白文件</strong>，以<strong>打开</strong>树莓派<strong>默认关闭</strong>的<strong>SSH功能</strong></p><p>再在<strong>该分区</strong>下新建 <strong><code>wpa_supplicant.conf</code></strong> ，<strong>配置待连接的WIFI信息</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;WifiName&quot;</span><br><span class="line">    psk=&quot;Password&quot;</span><br><span class="line">    priority=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/wpa_supplicant.conf.png"                        class="" title="wpa_supplicant.conf"                 ><p>最后，<strong>boot分区根目录</strong>新建文件如下：</p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/File.png"                        class="" title="File"                 ><p>到此，<strong>万事俱备，只欠东风</strong>。</p><h1 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h1><p>将<strong>SD卡</strong>插在<strong>树莓派背后</strong>，再<strong>接上电源</strong>。</p><p>如果<strong>正常</strong>的话，此时树莓派<strong>红灯常亮（树莓派电源正常）</strong>，<strong>绿灯闪烁（读写SD卡正常）</strong>。</p><p>在之前的<strong>网络</strong>配置<strong>正常</strong>的前提下，我们通过<strong>路由器</strong>可查看到<strong>树莓派</strong>的<strong>IP地址</strong>。</p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/IP.png"                        class="" title="IP"                 ><p>打开任意一款<strong>SSH工具</strong>（我这里用的是<strong>Xshell</strong>）</p><p>输入相应<strong>IP地址</strong>和<strong>端口（默认22）</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/NewSSH.png"                        class="" title="NewSSH"                 ><p><strong>接收主机密钥</strong></p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/Auth.png"                        class="" title="Auth"                 ><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><p>默认账号： <strong><code>pi</code></strong></p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/username.png"                        class="" title="username"                 ><p>默认密码： <strong><code>raspberry</code></strong></p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/pwd.png"                        class="" title="pwd"                 ><p>至此，我们已<strong>成功开机并登录</strong>！</p><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/successfully.png"                        class="" title="successfully"                 ><h1 id="初次开机的一些配置"><a href="#初次开机的一些配置" class="headerlink" title="初次开机的一些配置"></a>初次开机的一些配置</h1><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>第一次启动<strong>Linux</strong>，首先要做的当然是<strong>换源</strong>啦！</p><p>这里以<strong>阿里源</strong>为例。</p><p>首先查看<strong>系统代号</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/codename.png"                        class="" title="codename"                 ><p>我手上这块<strong>树莓派OS</strong>系统代号是<strong>buster</strong>（如果是其他版本，请自行更换下述代码中的<strong>buster</strong>），修改<strong>两处源</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>将之前的用 <strong>#</strong> 注释掉，再<strong>加入</strong>以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main contrib non-free rpi</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/sources.list.png"                        class="" title="sources.list"                 ><p>键入 <strong>Ctrl + O</strong> 保存<br>键入 <strong>Enter（回车）</strong> 确认文件名<br>键入 <strong>Ctrl + X</strong> 退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure><p>将之前的用 <strong>#</strong> 注释掉，再<strong>加入</strong>以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ buster main</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ buster main</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/09/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%85%A5%E9%97%A8%E4%BD%93%E9%AA%8C%E7%AC%94%E8%AE%B0/raspi.list.png"                        class="" title="raspi.list"                 ><p>键入 <strong>Ctrl + O</strong> 保存<br>键入 <strong>Enter（回车）</strong> 确认文件名<br>键入 <strong>Ctrl + X</strong> 退出</p><p><strong>更新源</strong>并<strong>升级</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h3 id="校准时间"><a href="#校准时间" class="headerlink" title="校准时间"></a>校准时间</h3><p>选择<strong>Asia - ShangHai</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><h1 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h1><p>可得好好<strong>保护数据</strong>！<strong>关机</strong>时<strong>记得</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure><p>然后再<strong>断电</strong>！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;老早就对这块神奇的&lt;strong&gt;微型电脑&lt;/strong&gt;感兴趣，机缘巧合之下&lt;strong&gt;暂时&lt;/strong&gt;搞到一块，我手上这块是</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://acmezone.top/tags/Linux/"/>
    
    <category term="树莓派" scheme="https://acmezone.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Golang+Gin+Gorm后端开发学习笔记</title>
    <link href="https://acmezone.top/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-18T06:13:47.000Z</published>
    <updated>2024-03-23T15:29:59.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>早已久仰Golang大名，以其优异的高并发支持著称。那么让我们来一探究竟吧！</p><h1 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h1><h2 id="Golang的安装及环境配置"><a href="#Golang的安装及环境配置" class="headerlink" title="Golang的安装及环境配置"></a>Golang的安装及环境配置</h2><p>在<a class="link"   href="https://golang.google.cn/dl/" >Golang官网<i class="fas fa-external-link-alt"></i></a>下载并安装，目前较新的版本都能够自动配置环境变量。</p><p>但我们还需要配置一下Goproxy代理，以解决当前国内网络环境所带来的问题。</p><p>这里我推荐<a class="link"   href="https://goproxy.io/zh/docs/getting-started.html" >goproxy.io<i class="fas fa-external-link-alt"></i></a>，那么我们就跟着它的文档配置吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 右键 我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量</span><br><span class="line">2. 在 “[你的用户名]的用户变量” 中点击 ”新建“ 按钮</span><br><span class="line">3. 在 “变量名” 输入框并新增 “GOPROXY”</span><br><span class="line">4. 在对应的 “变量值” 输入框中新增 “https://goproxy.io,direct”</span><br><span class="line">5. 最后点击 “确定” 按钮保存设置</span><br></pre></td></tr></table></figure><h2 id="GoLand的安装"><a href="#GoLand的安装" class="headerlink" title="GoLand的安装"></a>GoLand的安装</h2><p>工欲善其事，必先利其器。优秀的IDE能让我们开发效率直线上升。JetBrains系列的IDE深受大众喜爱。这里我们选择GoLand作为开发工具</p><p>下载<a class="link"   href="https://www.jetbrains.com/go/" >GoLand<i class="fas fa-external-link-alt"></i></a>并安装。</p><h2 id="运行第一个项目"><a href="#运行第一个项目" class="headerlink" title="运行第一个项目"></a>运行第一个项目</h2><p>打开GoLand，新建一个工程，取名为HelloWorld，然后创建项目。</p><img                         lazyload                       alt="image"                       data-src="/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HelloWorld.png"                        class="" title="HelloWorld"                 ><h3 id="Gin依赖的安装"><a href="#Gin依赖的安装" class="headerlink" title="Gin依赖的安装"></a>Gin依赖的安装</h3><p>既然我们使用Gin框架来开发后端，那么肯定要先安装它<br>打开GoLand的终端（在项目根目录下打开系统终端也行），安装Gin-Gonic依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><p>稍等片刻即可安装成功。</p><h3 id="创建HelloWorld"><a href="#创建HelloWorld" class="headerlink" title="创建HelloWorld"></a>创建HelloWorld</h3><p>接下来我们创建一个Go文件，取名为HelloWorld.go。<br>键入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package HelloWorld</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(&quot;/&quot;, func(context *gin.Context) &#123;</span><br><span class="line">context.String(http.StatusOK, &quot;Hello World!&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置编译器"><a href="#配置编译器" class="headerlink" title="配置编译器"></a>配置编译器</h3><p>点击GoLand右上方Add Configuration…</p><img                         lazyload                       alt="image"                       data-src="/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AddConfiguration.png"                        class="" title="AddConfiguration"                 ><p>在弹出的窗口中点击左边的+号，选择Go Build，然后点击OK。</p><img                         lazyload                       alt="image"                       data-src="/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/GoBuild.png"                        class="" title="GoBuild"                 ><p>接下来我们点击IDE右上角绿色的右三角按钮运行。</p><img                         lazyload                       alt="image"                       data-src="/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RunError.png"                        class="" title="RunError"                 ><p>报错了，查询一通资料后才发现，当我们只编译运行单文件时，包名必须为main，因此，我们修改代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(&quot;/&quot;, func(context *gin.Context) &#123;</span><br><span class="line">context.String(http.StatusOK, &quot;Hello World!&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(&quot;:8080&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下能够成功运行了。<br>我们打开浏览器，输入<code>http://localhost:8080/</code>，即可看到项目正确运行。</p><img                         lazyload                       alt="image"                       data-src="/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RunSuccessfully.png"                        class="" title="RunSuccessfully"                 ><h1 id="Gorm-Sqlite3-笔记"><a href="#Gorm-Sqlite3-笔记" class="headerlink" title="Gorm(Sqlite3)笔记"></a>Gorm(Sqlite3)笔记</h1><p>定义数据库结构体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">type Doc struct &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Type  string</span><br><span class="line">Title string</span><br><span class="line">Date  string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数据库并添加一条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">db, err := gorm.Open(sqlite.Open(&quot;doc.db&quot;), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 迁移 schema</span><br><span class="line">db.AutoMigrate(&amp;Doc&#123;&#125;)</span><br><span class="line">// 添加一条记录</span><br><span class="line">db.Create(&amp;Doc&#123;</span><br><span class="line">Type:  &quot;文件学习&quot;,</span><br><span class="line">Title: &quot;打响疫情第二波湖南必胜&quot;,</span><br><span class="line">Date:  &quot;2021.08.18&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，会在源码根目录创建doc.db，并且写入一条记录</p><img                         lazyload                       alt="image"                       data-src="/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Gorm-create.png"                        class="" title="Gorm-create"                 ><h1 id="Gin笔记"><a href="#Gin笔记" class="headerlink" title="Gin笔记"></a>Gin笔记</h1><h3 id="定义标记常量"><a href="#定义标记常量" class="headerlink" title="定义标记常量"></a>定义标记常量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">JSON_SUCCESS int = 1</span><br><span class="line">JSON_ERROR   int = 0</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="定义数据库结构体和返回结构体"><a href="#定义数据库结构体和返回结构体" class="headerlink" title="定义数据库结构体和返回结构体"></a>定义数据库结构体和返回结构体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type Doc struct &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Type  string</span><br><span class="line">Title string</span><br><span class="line">Date  string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type rDoc struct &#123;</span><br><span class="line">Type  string</span><br><span class="line">Title string</span><br><span class="line">Date  string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 := r.Group(&quot;/api/v1/docs&quot;)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(&quot;/add&quot;, add)</span><br><span class="line">v1.GET(&quot;/get&quot;, get)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加记录函数"><a href="#添加记录函数" class="headerlink" title="添加记录函数"></a>添加记录函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func add(c *gin.Context) &#123;</span><br><span class="line">db, err := gorm.Open(sqlite.Open(&quot;doc.db&quot;), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">db.AutoMigrate(&amp;Doc&#123;&#125;)</span><br><span class="line">db.Create(&amp;Doc&#123;</span><br><span class="line">Type:  &quot;文件学习&quot;,</span><br><span class="line">Title: &quot;打响疫情第二波湖南必胜&quot;,</span><br><span class="line">Date:  &quot;2021.08.18&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">&quot;status&quot;:  JSON_SUCCESS,</span><br><span class="line">&quot;message&quot;: &quot;创建成功&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取记录函数"><a href="#获取记录函数" class="headerlink" title="获取记录函数"></a>获取记录函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">func get(c *gin.Context) &#123;</span><br><span class="line">db, err := gorm.Open(sqlite.Open(&quot;doc.db&quot;), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var docs []Doc</span><br><span class="line">var rdocs []rDoc</span><br><span class="line">db.Find(&amp;docs)</span><br><span class="line">for _, i := range docs &#123;</span><br><span class="line">rdocs = append(rdocs, rDoc&#123;</span><br><span class="line">Type:  i.Type,</span><br><span class="line">Title: i.Title,</span><br><span class="line">Date:  i.Date,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">&quot;status&quot;:  JSON_SUCCESS,</span><br><span class="line">&quot;message&quot;: &amp;rdocs,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现实例："><a href="#实现实例：" class="headerlink" title="实现实例："></a>实现实例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="line">&quot;gorm.io/driver/sqlite&quot;</span><br><span class="line">&quot;gorm.io/gorm&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">JSON_SUCCESS int = 1</span><br><span class="line">JSON_ERROR   int = 0</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Doc struct &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Type  string</span><br><span class="line">Title string</span><br><span class="line">Date  string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type rDoc struct &#123;</span><br><span class="line">Type  string</span><br><span class="line">Title string</span><br><span class="line">Date  string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(&quot;/&quot;)</span><br><span class="line">v1 := r.Group(&quot;/api/v1/docs&quot;)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(&quot;/add&quot;, add)</span><br><span class="line">v1.GET(&quot;/get&quot;, get)</span><br><span class="line">&#125;</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func add(c *gin.Context) &#123;</span><br><span class="line">db, err := gorm.Open(sqlite.Open(&quot;doc.db&quot;), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">db.AutoMigrate(&amp;Doc&#123;&#125;)</span><br><span class="line">db.Create(&amp;Doc&#123;</span><br><span class="line">Type:  &quot;文件学习&quot;,</span><br><span class="line">Title: &quot;打响疫情第二波湖南必胜&quot;,</span><br><span class="line">Date:  &quot;2021.08.18&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">&quot;status&quot;:  JSON_SUCCESS,</span><br><span class="line">&quot;message&quot;: &quot;创建成功&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func get(c *gin.Context) &#123;</span><br><span class="line">db, err := gorm.Open(sqlite.Open(&quot;doc.db&quot;), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(&quot;failed to connect database&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var docs []Doc</span><br><span class="line">var rdocs []rDoc</span><br><span class="line">db.Find(&amp;docs)</span><br><span class="line">for _, i := range docs &#123;</span><br><span class="line">rdocs = append(rdocs, rDoc&#123;</span><br><span class="line">Type:  i.Type,</span><br><span class="line">Title: i.Title,</span><br><span class="line">Date:  i.Date,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line">&quot;status&quot;:  JSON_SUCCESS,</span><br><span class="line">&quot;message&quot;: &amp;rdocs,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试API"><a href="#测试API" class="headerlink" title="测试API"></a>测试API</h3><img                         lazyload                       alt="image"                       data-src="/2021/08/18/Golang-Gin-Gorm%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Gin-Test.png"                        class="" title="Gin-Test"                 >]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;早已久仰Golang大名，以其优异的高并发支持著称。那么让我们来一探究竟吧！&lt;/p&gt;
&lt;h1 id=&quot;安装及配置&quot;&gt;&lt;a href=&quot;#安装</summary>
      
    
    
    
    
    <category term="Golang" scheme="https://acmezone.top/tags/Golang/"/>
    
    <category term="Gin" scheme="https://acmezone.top/tags/Gin/"/>
    
    <category term="Gorm" scheme="https://acmezone.top/tags/Gorm/"/>
    
  </entry>
  
  <entry>
    <title>Git交叉编译到Android平台</title>
    <link href="https://acmezone.top/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/"/>
    <id>https://acmezone.top/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/</id>
    <published>2021-08-02T04:05:30.000Z</published>
    <updated>2024-03-23T15:29:59.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个很久之前的想法了，但是之前一直编译不成功。</p><p>这两天仔细研究了下，证明还是可行的。</p><blockquote><p>Android NDK 版本：r23b</p><p>编译环境：Ubuntu 20.04</p><p>NDK目录：<code>~/NDK</code></p></blockquote><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="一、下载交叉编译所需源码"><a href="#一、下载交叉编译所需源码" class="headerlink" title="一、下载交叉编译所需源码"></a>一、下载交叉编译所需源码</h2><p>想要交叉编译<strong>Git</strong>，需要先<strong>交叉编译Curl</strong>和<strong>Zlib</strong>，<strong>新版本</strong>的<strong>NDK</strong>已经包含<strong>预编译Zlib</strong>，所以我们<strong>只需要交叉编译Curl</strong>即可。</p><p>至于为什么要交叉编译<strong>Curl</strong>，是因为<strong>git clone</strong>命令在<strong>clone https等仓库</strong>时，需要<strong>依赖该库创建的git-remote-https等EFL文件</strong>。否则，在<strong>clone</strong>时会发生<strong>找不到remote-https等错误</strong>。</p><p>而若<strong>Curl</strong>依赖<strong>OpenSSL</strong>，因此还得先交叉编译<strong>OpenSSL</strong>。</p><p>下载 <strong><a class="link"   href="https://github.com/git/git" >Git<i class="fas fa-external-link-alt"></i></a></strong> 、 <strong><a class="link"   href="https://curl.se/download.html" >Curl<i class="fas fa-external-link-alt"></i></a></strong> 和 <strong><a class="link"   href="https://github.com/openssl/openssl" >OpenSSL<i class="fas fa-external-link-alt"></i></a></strong> 的源码并<strong>解压</strong>。</p><h2 id="二、交叉编译OpenSSL并安装到NDK"><a href="#二、交叉编译OpenSSL并安装到NDK" class="headerlink" title="二、交叉编译OpenSSL并安装到NDK"></a>二、交叉编译OpenSSL并安装到NDK</h2><p>在<strong>OpenSSL</strong>官方仓库中，可以找到编译到<strong>Android</strong>平台的 <strong><a class="link"   href="https://github.com/openssl/openssl/blob/master/NOTES-ANDROID.md" >文档<i class="fas fa-external-link-alt"></i></a></strong> 。<br>导出<strong>NDK</strong>临时变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_NDK_ROOT=~/NDK</span><br></pre></td></tr></table></figure><p>导出<strong>PATH</strong>临时变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH</span><br></pre></td></tr></table></figure><p>配置<code>Makefile</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Configure android-arm64 -D__ANDROID_API__=26 --prefix=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j128</span><br></pre></td></tr></table></figure><p>安装到<code>prefix</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install -j128</span><br></pre></td></tr></table></figure><h2 id="三、交叉编译Curl并安装到NDK"><a href="#三、交叉编译Curl并安装到NDK" class="headerlink" title="三、交叉编译Curl并安装到NDK"></a>三、交叉编译Curl并安装到NDK</h2><p>打开<strong>Curl</strong>的源码，我们可以发现它提供了两种编译方式，<strong>Autoconf Makefile</strong> 和 <strong>Cmake</strong>。</p><p>使用<strong>Autoconf Makefile</strong>方式可以编译<strong>带OpenSSL</strong>的<strong>Curl</strong>，但是由于某种未知原因，在后面在<strong>编译Git</strong>时<strong>无法识别</strong>。</p><p>因此我们选择<strong>Cmake</strong>方式。</p><p>在<code>INSTALL.cmake</code>中我们可以得到一些编译的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Current flaws in the curl CMake build</span><br><span class="line">=====================================</span><br><span class="line"></span><br><span class="line">   Missing features in the cmake build:</span><br><span class="line"></span><br><span class="line">   - Builds libcurl without large file support</span><br><span class="line">   - Does not support all SSL libraries (only OpenSSL, Schannel,</span><br><span class="line">     Secure Transport, and mbed TLS, NSS, WolfSSL)</span><br><span class="line">   - Doesn&#x27;t allow different resolver backends (no c-ares build support)</span><br><span class="line">   - No RTMP support built</span><br><span class="line">   - Doesn&#x27;t allow build curl and libcurl debug enabled</span><br><span class="line">   - Doesn&#x27;t allow a custom CA bundle path</span><br><span class="line">   - Doesn&#x27;t allow you to disable specific protocols from the build</span><br><span class="line">   - Doesn&#x27;t find or use krb4 or GSS</span><br><span class="line">   - Rebuilds test files too eagerly, but still can&#x27;t run the tests</span><br><span class="line">   - Doesn&#x27;t detect the correct strerror_r flavor when cross-compiling (issue #1123)</span><br></pre></td></tr></table></figure><p>由此可知，利用<strong>Cmake</strong>编译出来的<strong>Curl不带SSL库</strong>，但这并<strong>不影响</strong>我们后续<strong>编译Git</strong>和<strong>相应的git-remote-https等二进制文件</strong>。</p><p><strong>cd</strong>到<strong>解压后</strong>的<strong>Curl根目录</strong>，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mkdir out &amp;&amp; cd out</span><br><span class="line"></span><br><span class="line">export NDK=~/NDK                     # NDK根目录绝对路径</span><br><span class="line"></span><br><span class="line">export ABI=arm64-v8a                           # ABI配置(arm64-v8a 即为 AArch64)</span><br><span class="line"></span><br><span class="line">export MINSDKVERSION=26                        # 最小目标SDK版本配置(26 即为 Android 8.0)</span><br><span class="line"></span><br><span class="line">cmake \</span><br><span class="line">   -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \</span><br><span class="line">   -DANDROID_ABI=$ABI \</span><br><span class="line">   -DANDROID_NATIVE_API_LEVEL=$MINSDKVERSION \</span><br><span class="line">   -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$NDK/toolchains/llvm/prebuilt/linux-x86_64/sysroot ..</span><br><span class="line"></span><br><span class="line">cmake --build . --config Release</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="四、交叉编译Git"><a href="#四、交叉编译Git" class="headerlink" title="四、交叉编译Git"></a>四、交叉编译Git</h2><p>接下来是我们的<strong>重头戏</strong>了。</p><p>进入<strong>Git源码解压后的根目录</strong>，可以发现<strong>Git</strong>有两种编译方式，一是<strong>非Autoconf Makefile</strong>，二是<strong>Autoconf Makefile</strong>，<strong>前者</strong>我尝试过多次，皆以<strong>失败</strong>告终。所以这次我们尝试<strong>后者</strong>。</p><p>我们的<strong>宿主机</strong>因为<strong>无法测试Android平台上的二进制文件</strong>，所以我们把<strong>测试代码</strong>删掉。</p><p>进入<code>configure.ac</code>，<strong>删除</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Define FREAD_READS_DIRECTORIES if your are on a system which succeeds</span><br><span class="line"># when attempting to read from an fopen&#x27;ed directory.</span><br><span class="line">AC_CACHE_CHECK([whether system succeeds to read fopen&#x27;ed directory],</span><br><span class="line"> [ac_cv_fread_reads_directories],</span><br><span class="line">[</span><br><span class="line">AC_RUN_IFELSE(</span><br><span class="line">[AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT],</span><br><span class="line">[[</span><br><span class="line">FILE *f = fopen(&quot;.&quot;, &quot;r&quot;);</span><br><span class="line">return f != NULL;]])],</span><br><span class="line">[ac_cv_fread_reads_directories=no],</span><br><span class="line">[ac_cv_fread_reads_directories=yes])</span><br><span class="line">])</span><br><span class="line">if test $ac_cv_fread_reads_directories = yes; then</span><br><span class="line">FREAD_READS_DIRECTORIES=UnfortunatelyYes</span><br><span class="line">else</span><br><span class="line">FREAD_READS_DIRECTORIES=</span><br><span class="line">fi</span><br><span class="line">GIT_CONF_SUBST([FREAD_READS_DIRECTORIES])</span><br></pre></td></tr></table></figure><p><strong>再删除</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Define SNPRINTF_RETURNS_BOGUS if your are on a system which snprintf()</span><br><span class="line"># or vsnprintf() return -1 instead of number of characters which would</span><br><span class="line"># have been written to the final string if enough space had been available.</span><br><span class="line">AC_CACHE_CHECK([whether snprintf() and/or vsnprintf() return bogus value],</span><br><span class="line"> [ac_cv_snprintf_returns_bogus],</span><br><span class="line">[</span><br><span class="line">AC_RUN_IFELSE(</span><br><span class="line">[AC_LANG_PROGRAM([AC_INCLUDES_DEFAULT</span><br><span class="line">#include &quot;stdarg.h&quot;</span><br><span class="line"></span><br><span class="line">int test_vsnprintf(char *str, size_t maxsize, const char *format, ...)</span><br><span class="line">&#123;</span><br><span class="line">  int ret;</span><br><span class="line">  va_list ap;</span><br><span class="line">  va_start(ap, format);</span><br><span class="line">  ret = vsnprintf(str, maxsize, format, ap);</span><br><span class="line">  va_end(ap);</span><br><span class="line">  return ret;</span><br><span class="line">&#125;],</span><br><span class="line">[[char buf[6];</span><br><span class="line">  if (test_vsnprintf(buf, 3, &quot;%s&quot;, &quot;12345&quot;) != 5</span><br><span class="line">      || strcmp(buf, &quot;12&quot;)) return 1;</span><br><span class="line">  if (snprintf(buf, 3, &quot;%s&quot;, &quot;12345&quot;) != 5</span><br><span class="line">      || strcmp(buf, &quot;12&quot;)) return 1]])],</span><br><span class="line">[ac_cv_snprintf_returns_bogus=no],</span><br><span class="line">[ac_cv_snprintf_returns_bogus=yes])</span><br><span class="line">])</span><br><span class="line">if test $ac_cv_snprintf_returns_bogus = yes; then</span><br><span class="line">SNPRINTF_RETURNS_BOGUS=UnfortunatelyYes</span><br><span class="line">else</span><br><span class="line">SNPRINTF_RETURNS_BOGUS=</span><br><span class="line">fi</span><br><span class="line">GIT_CONF_SUBST([SNPRINTF_RETURNS_BOGUS])</span><br></pre></td></tr></table></figure><p>观察源码结构，可以发现并没有<code>configure</code>文件，但存在<code>configure.ac</code>，所以我们可以<strong>make</strong>一个<code>configure</code>。</p><p><strong>cd</strong>到源码<strong>根目录</strong>，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make configure</span><br></pre></td></tr></table></figure><p>此时即可生成<code>configure</code>。</p><p><strong>git</strong>编译时会默认编译<strong>pthread</strong>，而<strong>Android由于性能及安全原因</strong>，放弃了<strong>glibc</strong>在其平台上的支持，所以相应地交叉编译链也不含有这个库。</p><p><strong>Android</strong>有其<strong>替代方案</strong>，所以我们在<code>make</code>时将<code>NEEDS_LIBRT</code>赋值为空从而不编译它即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifdef NEEDS_LIBRT</span><br><span class="line">EXTLIBS += -lrt</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>而在<code>configure.ac</code>中可以发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">AC_ARG_ENABLE([pthreads],</span><br><span class="line"> [AS_HELP_STRING([--enable-pthreads=FLAGS],</span><br><span class="line">  [FLAGS is the value to pass to the compiler to enable POSIX Threads.]</span><br><span class="line">  [The default if FLAGS is not specified is to try first -pthread]</span><br><span class="line">  [and then -lpthread.]</span><br><span class="line">  [--disable-pthreads will disable threading.])],</span><br><span class="line">[</span><br><span class="line">if test &quot;x$enableval&quot; = &quot;xyes&quot;; then</span><br><span class="line">   AC_MSG_NOTICE([Will try -pthread then -lpthread to enable POSIX Threads])</span><br><span class="line">elif test &quot;x$enableval&quot; != &quot;xno&quot;; then</span><br><span class="line">   PTHREAD_CFLAGS=$enableval</span><br><span class="line">   AC_MSG_NOTICE([Setting &#x27;$PTHREAD_CFLAGS&#x27; as the FLAGS to enable POSIX Threads])</span><br><span class="line">else</span><br><span class="line">   AC_MSG_NOTICE([POSIX Threads will be disabled.])</span><br><span class="line">   NO_PTHREADS=YesPlease</span><br><span class="line">   USER_NOPTHREAD=1</span><br><span class="line">fi],</span><br><span class="line">[</span><br><span class="line">   AC_MSG_NOTICE([Will try -pthread then -lpthread to enable POSIX Threads.])</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>所以我们可以使用 <strong>–disable-pthreads</strong> 参数来<strong>取消</strong>编译 <strong>phread</strong> 相关部分。</p><p>于是接下来我们输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export NDK=~/NDK                                      # NDK根目录绝对路径</span><br><span class="line"></span><br><span class="line">export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/linux-x86_64     # 交叉编译链路径</span><br><span class="line"></span><br><span class="line">export TARGET=aarch64-linux-android                             # 交叉编译目标</span><br><span class="line"></span><br><span class="line">export API=26                                                   # 最小目标SDK版本配置(26 即为 Android 8.0)</span><br><span class="line"></span><br><span class="line">export AR=$TOOLCHAIN/bin/llvm-ar</span><br><span class="line"></span><br><span class="line">export CC=$TOOLCHAIN/bin/$TARGET$API-clang</span><br><span class="line"></span><br><span class="line">export AS=$CC</span><br><span class="line"></span><br><span class="line">export CXX=$TOOLCHAIN/bin/$TARGET$API-clang++</span><br><span class="line"></span><br><span class="line">export LD=$TOOLCHAIN/bin/ld</span><br><span class="line"></span><br><span class="line">export RANLIB=$TOOLCHAIN/bin/llvm-ranlib</span><br><span class="line"></span><br><span class="line">export READELF=$TOOLCHAIN/bin/readelf</span><br><span class="line"></span><br><span class="line">export STRIP=$TOOLCHAIN/bin/llvm-strip</span><br><span class="line"></span><br><span class="line">./configure --host=$TARGET --prefix=/data/local/tmp --disable-pthreads</span><br></pre></td></tr></table></figure><p>注意这里的<code>--prefix</code>，需要定义为<strong>Android</strong>环境下<strong>git运行目录</strong>，否则会出现<strong>找不到templates</strong>等问题。</p><p>然后<strong>编译</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make NEEDS_LIBRT= NO_TCLTK=1 -j128</span><br></pre></td></tr></table></figure><p>注意这里的<code>NO_TCLTK</code>，如果不定义它的话，会默认编译<code>git-gui</code>，这不是我们需要的，所以将其定义为<code>1</code>。</p><h2 id="五、推送并测试"><a href="#五、推送并测试" class="headerlink" title="五、推送并测试"></a>五、推送并测试</h2><p>先安装到宿主机<code>~/git/install</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install NEEDS_LIBRT= NO_TCLTK=1 DESTDIR=~/git/install -j128</span><br></pre></td></tr></table></figure><p>可得如下<strong>产物</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xayah@xayah-virtual-machine:~/git/install/data/local/tmp$ ls</span><br><span class="line">bin  libexec  share</span><br></pre></td></tr></table></figure><p>将<code>~/git/install/data/local/tmp</code> <strong>打包</strong>并<strong>推送</strong>到<strong>Android</strong> <code>/data/local/tmp</code>目录<br>由于一些<strong>魔法因素</strong>，<strong>打包</strong>为<strong>zip</strong>竟足足有<strong>200M+<strong>！可能是因为</strong>压缩算法</strong>不同，<strong>打包</strong>为<strong>tar.xz</strong>就会<strong>小很多</strong>，大概<strong>10M</strong>左右。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Xayah\Desktop&gt; adb push git.zip /data/local/tmp</span><br><span class="line">git.zip: 1 file pushed, 0 skipped. 38.1 MB/s (648532238 bytes in 16.219s)</span><br><span class="line">PS C:\Users\Xayah\Desktop&gt; adb shell</span><br><span class="line">cas:/ $ cd /data/local/tmp</span><br><span class="line">cas:/data/local/tmp $ unzip git.zip &gt;/dev/null</span><br><span class="line">cas:/data/local/tmp $ cd bin</span><br><span class="line">cas:/data/local/tmp/bin $ ls</span><br><span class="line">git  git-cvsserver  git-receive-pack  git-shell  git-upload-archive  git-upload-pack  gitk</span><br></pre></td></tr></table></figure><p>让我们<code>git clone</code>试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cas:/data/local/tmp/bin $ ./git clone https://github.com/git/git mGit</span><br><span class="line">Cloning into &#x27;mGit&#x27;...</span><br><span class="line">remote: Enumerating objects: 311108, done.</span><br><span class="line">remote: Counting objects: 100% (72/72), done.</span><br><span class="line">remote: Compressing objects: 100% (32/32), done.</span><br><span class="line">remote: Total 311108 (delta 41), reused 70 (delta 40), pack-reused 311036</span><br><span class="line">Receiving objects: 100% (311108/311108), 164.19 MiB | 10.32 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (232238/232238), done.</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure><p><strong>Segmentation fault</strong>！这可是个头疼的事。不过没有关系，我们可以使用 <strong>gdbserver</strong> 调试，看看到底是<strong>哪里</strong>出了<strong>问题</strong>。</p><p>首先将<strong>NDK</strong>中相应的<strong>gdbserver</strong>推送到<strong>Android平台</strong>，我的手机是<strong>aarch64</strong>（现在<strong>大多数安卓手机都是这个平台</strong>），也就是<strong>arm64</strong>，所以推送<strong>该文件夹</strong>下的<strong>gdbserver</strong>即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push gdbserver /data/local/tmp/bin</span><br></pre></td></tr></table></figure><p>接下来<strong>新建</strong>一个<strong>终端</strong>并<strong>forward</strong>一个<strong>自定义端口</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:12345 tcp:12345</span><br></pre></td></tr></table></figure><p>接下来在另一个<strong>终端</strong>中进入<strong>adb shell</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gdbserver 0.0.0.0:12345 ./git clone https://github.com/git/git mGit</span><br></pre></td></tr></table></figure><p>现在<strong>gdbserver</strong>已经启动了，我们转向另一个<strong>终端</strong>，启动<strong>gdb</strong>：</p><img                         lazyload                       alt="image"                       data-src="/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/gdb.png"                        class="" title="gdb"                 ><p>现在<strong>gdb</strong>和<strong>gdbserver</strong>均已启动，我们<strong>指定目标端口</strong>：</p><img                         lazyload                       alt="image"                       data-src="/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/remote.png"                        class="" title="remote"                 ><p>输入<code>c</code>继续运行</p><img                         lazyload                       alt="image"                       data-src="/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/sigsegv.png"                        class="" title="sigsegv"                 ><p>段错误出现了！可以看出错误是出在<code>copy_gecos()</code>这个函数。<br>在源码中搜索这个函数，可以在<code>ident.c</code>中找到。<br>定位至相应位置</p><img                         lazyload                       alt="image"                       data-src="/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/copy_gecos.png"                        class="" title="copy_gecos"                 ><p>这个函数看起来貌似和<code>git config</code>有一丝关系，难道是因为我们没有定义<strong>git用户信息</strong>？<br>让我们试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./git config --global user.name &quot;Xayah&quot;</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/config.png"                        class="" title="config"                 ><p>果然报错了！看来是<code>.gitconfig</code>没有创建成功，在源码中搜索<code>.gitconfig</code>，可以发现<strong>git</strong>获取<code>.gitconfig</code>的路径是<code>$HOME/.gitconfig</code></p><p>那么我们试试把<code>$HOME</code>定义为<strong>当前目录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export HOME=/data/local/tmp/bin</span><br></pre></td></tr></table></figure><p>再配置用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./git config --global user.name &quot;Xayah&quot;</span><br><span class="line">./git config --global user.email zds1249475336@gmail.com</span><br></pre></td></tr></table></figure><p>这次没有报错了，并且当前目录也成功生成了<code>.gitconfig</code></p><img                         lazyload                       alt="image"                       data-src="/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/config2.png"                        class="" title="config2"                 ><p>这次我们再试试<code>git clone</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./git clone https://github.com/git/git mGit</span><br></pre></td></tr></table></figure><img                         lazyload                       alt="image"                       data-src="/2021/08/02/Git%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/success.png"                        class="" title="success"                 ><p>成功！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这是一个很久之前的想法了，但是之前一直编译不成功。&lt;/p&gt;
&lt;p&gt;这两天仔细研究了下，证明还是可行的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Android" scheme="https://acmezone.top/tags/Android/"/>
    
    <category term="Git" scheme="https://acmezone.top/tags/Git/"/>
    
    <category term="交叉编译" scheme="https://acmezone.top/tags/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Python3.9交叉编译到Android平台</title>
    <link href="https://acmezone.top/2021/08/01/Python3-9%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/"/>
    <id>https://acmezone.top/2021/08/01/Python3-9%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E5%88%B0Android%E5%B9%B3%E5%8F%B0/</id>
    <published>2021-08-01T07:56:29.000Z</published>
    <updated>2024-03-23T15:29:59.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>手机上也能运行<strong>Python</strong>？当然，我们只需要将其<strong>交叉编译</strong>到<strong>Android平台</strong>就可以了！</p><p>本次笔记将使用NDK的交叉编译链，为<strong>AArch64</strong>平台交叉编译<strong>Python3.9</strong>。</p><blockquote><p>Android NDK 版本：r21e</p><p>编译环境：Ubuntu 21.04</p></blockquote><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h3 id="一、下载交叉编译所需源码"><a href="#一、下载交叉编译所需源码" class="headerlink" title="一、下载交叉编译所需源码"></a>一、下载交叉编译所需源码</h3><p><a class="link"   href="https://www.python.org/downloads/release/python-396/" >Python3.9<i class="fas fa-external-link-alt"></i></a></p><h3 id="二、交叉编译Python3-9"><a href="#二、交叉编译Python3-9" class="headerlink" title="二、交叉编译Python3.9"></a>二、交叉编译Python3.9</h3><p>解压<strong>Python3.9的源码</strong></p><p>然后在<strong>根目录</strong>输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">export NDK=/home/xayah/NDK                              # NDK根目录绝对路径</span><br><span class="line"></span><br><span class="line">export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/linux-x86_64     # 交叉编译链路径</span><br><span class="line"></span><br><span class="line">export TARGET=aarch64-linux-android                             # 交叉编译目标</span><br><span class="line"></span><br><span class="line">export API=24                                                   # 最小目标SDK版本配置(24 即为 Android 7.0)</span><br><span class="line"></span><br><span class="line">export AR=$TOOLCHAIN/bin/llvm-ar</span><br><span class="line"></span><br><span class="line">export CC=$TOOLCHAIN/bin/$TARGET$API-clang</span><br><span class="line"></span><br><span class="line">export AS=$CC</span><br><span class="line"></span><br><span class="line">export CXX=$TOOLCHAIN/bin/$TARGET$API-clang++</span><br><span class="line"></span><br><span class="line">export LD=$TOOLCHAIN/bin/ld</span><br><span class="line"></span><br><span class="line">export RANLIB=$TOOLCHAIN/bin/llvm-ranlib</span><br><span class="line"></span><br><span class="line">export STRIP=$TOOLCHAIN/bin/llvm-strip</span><br><span class="line"></span><br><span class="line">./configure --host=$TARGET --build=aarch64 --disable-ipv6 ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no --prefix=/home/xayah/py/install</span><br></pre></td></tr></table></figure><p>然而，我们遇到了一个<strong>错误</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure: error: readelf for the host is required for cross builds</span><br></pre></td></tr></table></figure><p>看来是<strong>工具链</strong>没有配置完整，还差一个<strong>readelf</strong>，NDK的<strong>交叉编译链</strong>里已经<strong>集成</strong>了它，我们只需要加上去即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export READELF=$TOOLCHAIN/bin/readelf</span><br></pre></td></tr></table></figure><p>再配置一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --host=$TARGET --build=aarch64 --disable-ipv6 ac_cv_file__dev_ptmx=no ac_cv_file__dev_ptc=no --prefix=/home/xayah/py/install</span><br></pre></td></tr></table></figure><p>这次配置<strong>成功</strong>了！</p><p>让我们进行接下来的<strong>编译</strong>吧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j128 &amp;&amp; make install -j128</span><br></pre></td></tr></table></figure><p>稍加等待，编译<strong>成功</strong>！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xayah@xayah-virtual-machine:~/py/install$ pwd</span><br><span class="line">/home/xayah/py/install</span><br><span class="line">xayah@xayah-virtual-machine:~/py/install$ ls</span><br><span class="line">bin  include  lib  share</span><br><span class="line">xayah@xayah-virtual-machine:~/py/install$ cd bin</span><br><span class="line">xayah@xayah-virtual-machine:~/py/install/bin$ ls</span><br><span class="line">2to3      idle3    pydoc3    python3    python3.9-config</span><br><span class="line">2to3-3.9  idle3.9  pydoc3.9  python3.9  python3-config</span><br></pre></td></tr></table></figure><h3 id="在Android平台上测试"><a href="#在Android平台上测试" class="headerlink" title="在Android平台上测试"></a>在Android平台上测试</h3><p>首先将<strong>编译产物打包</strong>再将其<strong>推送</strong>到<strong>Android平台</strong>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push py.zip /data/local/tmp/</span><br></pre></td></tr></table></figure><p>由于<strong>Android</strong>对<strong>权限</strong>的<strong>限制</strong>，我们不能推送到任意目录，但可以将其推送到<code>/data/local/tmp/</code>目录，因为它具有<strong>完整的文件操作权限</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xayah@xayah-virtual-machine:~/py/install$ adb push py.zip /data/local/tmp/</span><br><span class="line">py.zip: 1 file pushed, 0 skipped. 37.2 MB/s (56531714 bytes in 1.450s)</span><br></pre></td></tr></table></figure><p><strong>推送</strong>成功，接下来我们进入<code>adb shell</code>操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">xayah@xayah-virtual-machine:~/py/install$ adb shell</span><br><span class="line">cas:/ $ cd /data/local/tmp</span><br><span class="line">cas:/data/local/tmp $ ls</span><br><span class="line">py.zip</span><br><span class="line">cas:/data/local/tmp $ unzip py.zip &gt; /dev/null</span><br><span class="line">cas:/data/local/tmp $ ls</span><br><span class="line">bin  include  lib  py.zip  share</span><br><span class="line">cas:/data/local/tmp $ cd bin</span><br><span class="line">cas:/data/local/tmp/bin $ ls</span><br><span class="line">2to3      idle3    pydoc3    python3         python3.9</span><br><span class="line">2to3-3.9  idle3.9  pydoc3.9  python3-config  python3.9-config</span><br><span class="line">cas:/data/local/tmp/bin $ ./python3.9</span><br><span class="line">Python 3.9.6 (default, Aug  1 2021, 16:27:01) </span><br><span class="line">[Clang 9.0.9 (https://android.googlesource.com/toolchain/llvm-project a2a1e703c on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; print(&quot;Hello World!&quot;)</span><br><span class="line">Hello World!</span><br><span class="line">&gt;&gt;&gt; </span><br></pre></td></tr></table></figure><p>可以看到<strong>Python3.9</strong>成功的<strong>运行</strong>起来，并且输出<strong>Hello World!</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;手机上也能运行&lt;strong&gt;Python&lt;/strong&gt;？当然，我们只需要将其&lt;strong&gt;交叉编译&lt;/strong&gt;到&lt;strong</summary>
      
    
    
    
    
    <category term="Python" scheme="https://acmezone.top/tags/Python/"/>
    
    <category term="Android" scheme="https://acmezone.top/tags/Android/"/>
    
    <category term="交叉编译" scheme="https://acmezone.top/tags/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>GitLab搭建Hexo博客笔记</title>
    <link href="https://acmezone.top/2021/07/24/GitLab%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2021/07/24/GitLab%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-24T14:23:33.000Z</published>
    <updated>2024-03-23T15:29:59.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h2><p>GitHub Page国内访问实在是太慢了！早就有了换地的想法，正好 <strong><a class="link"   href="https://www.seaeye.cn/" >B1ue1nWh1te<i class="fas fa-external-link-alt"></i></a></strong> 提醒了我， <strong><a class="link"   href="https://gitlab.com/" >GitLab<i class="fas fa-external-link-alt"></i></a></strong> 和 <strong><a class="link"   href="https://gitee.com/" >Gitee<i class="fas fa-external-link-alt"></i></a></strong> 在国内的访问速度都不错，但是我实在不喜欢 <strong>Gitee</strong> 的UI，索性就换 <strong><a class="link"   href="https://gitlab.com/" >GitLab<i class="fas fa-external-link-alt"></i></a></strong> 吧！</p><h3 id="一、在GitLab创建一个仓库"><a href="#一、在GitLab创建一个仓库" class="headerlink" title="一、在GitLab创建一个仓库"></a>一、在GitLab创建一个仓库</h3><p>如果你没有自己的域名，那么可以创建一个名为<code>$&#123;你的GitLab ID&#125;.gitlab.io</code>的仓库，比如我的ID是 <strong>Xayah</strong> ：</p><img                         lazyload                       alt="image"                       data-src="/2021/07/24/GitLab%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/username.png"                        class="" title="我的ID"                 ><p>那么我可以新建一个名为<code>xayah.gitlab.io</code>的仓库</p><img                         lazyload                       alt="image"                       data-src="/2021/07/24/GitLab%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/create.png"                        class="" title="创建仓库"                 ><h3 id="二、上传Hexo项目到仓库"><a href="#二、上传Hexo项目到仓库" class="headerlink" title="二、上传Hexo项目到仓库"></a>二、上传Hexo项目到仓库</h3><p>创建好后，我们先把仓库 <strong>Clone</strong> 下来，然后把 <strong>Hexo项目</strong> 放进去。<br><strong>public</strong> 文件夹是 <strong>Hexo</strong> 构建 <strong>静态页面</strong> 生成的，我们在服务器上不需要它，所以请检查你的<code>.gitignore</code>中是否忽略了<code>/public</code>，如果没有，请将其加入 <strong>忽略名单</strong> 。<br>配置好后，将本地仓库 <strong>Push</strong> 到 <strong>GitLab</strong> 。</p><p>&emsp;&emsp;&emsp;&emsp;●此处需要<a class="link"   href="https://www.runoob.com/git/git-tutorial.html" >Git基础<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="https://hexo.io/zh-cn/docs/" >Hexo基础<i class="fas fa-external-link-alt"></i></a>，如果不会可以学习一下</p><h3 id="三、使用CI构建静态页面"><a href="#三、使用CI构建静态页面" class="headerlink" title="三、使用CI构建静态页面"></a>三、使用CI构建静态页面</h3><p>接下来，我们要利用 <strong>GitLab</strong> 的 <strong>CI</strong> 为我们 <strong>构建静态网页</strong> 了。<br>在 <strong>Hexo项目根目录</strong> 新建一个名为<code>.gitlab-ci.yml</code>的文件，<br>然后编辑该文件，复制并粘贴以下构建代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">image: node:14-alpine # use nodejs v14 LTS</span><br><span class="line">cache:</span><br><span class="line">  paths:</span><br><span class="line">    - node_modules/</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">pages:</span><br><span class="line">  script:</span><br><span class="line">    - hexo generate</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - public</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br></pre></td></tr></table></figure><p><strong>保存</strong> 后 <strong>Push</strong> 到仓库，正常情况下 <strong>GitLab CI</strong> 已经开始为我们进行 <strong>第一次构建</strong> 了，你可以在 <strong>仓库左侧 - CI/CD - Pipelines</strong> 里看到构建情况<br>稍等片刻，正常情况下即可构建成功。</p><img                         lazyload                       alt="image"                       data-src="/2021/07/24/GitLab%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/success.png"                        class="" title="成功构建"                 ><p>那么此时访问<code>$&#123;你的GitLab ID&#125;.gitlab.io</code>就可以看到 <strong>构建成功</strong> 后的 <strong>博客页面</strong> 。</p><img                         lazyload                       alt="image"                       data-src="/2021/07/24/GitLab%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/blog.png"                        class="" title="博客页面"                 ><p>以后每次在本地<strong>创建文章</strong>、<strong>修改文章</strong>，<strong>Push</strong>到<strong>远程仓库</strong>后<strong>GitLab CI</strong>将会<strong>自动</strong>为你<strong>构建</strong>，<strong>几分钟后即可生效</strong>。</p><h3 id="四、绑定域名"><a href="#四、绑定域名" class="headerlink" title="四、绑定域名"></a>四、绑定域名</h3><p>如果购买了 <strong>自己的域名</strong> ，那么可以在 <strong>仓库左侧 - Settings - Pages</strong> 配置自己的 <strong>域名</strong> 。</p><img                         lazyload                       alt="image"                       data-src="/2021/07/24/GitLab%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/domain.png"                        class="" title="PagesDomain"                 ><p>点击右侧 <strong>New Domain</strong> 添加 <strong>域名</strong> ，再根据提示在 <strong>域名提供商处</strong> 配置 <strong>DNS</strong> ，稍等片刻，访问 <strong>域名</strong> ，即可访问 <strong>博客页面</strong> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;源起&quot;&gt;&lt;a href=&quot;#源起&quot; class=&quot;headerlink&quot; title=&quot;源起&quot;&gt;&lt;/a&gt;源起&lt;/h2&gt;&lt;p&gt;GitHub Page国内访问实在是太慢了！早就有了换地的想法，正好 &lt;strong&gt;&lt;a class=&quot;link&quot;   href=&quot;htt</summary>
      
    
    
    
    
    <category term="GitHub" scheme="https://acmezone.top/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://acmezone.top/tags/Hexo/"/>
    
    <category term="GitLab" scheme="https://acmezone.top/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Git 笔记</title>
    <link href="https://acmezone.top/2021/07/09/Git-%E7%AC%94%E8%AE%B0/"/>
    <id>https://acmezone.top/2021/07/09/Git-%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-08T16:18:18.000Z</published>
    <updated>2024-03-23T15:29:59.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Notes（GitHub地址）"><a href="#Git-Notes（GitHub地址）" class="headerlink" title="Git-Notes（GitHub地址）"></a><a class="link"   href="https://github.com/XayahSuSuSu/Git-Notes" >Git-Notes（GitHub地址）<i class="fas fa-external-link-alt"></i></a></h1><ol><li><p>删除Commit(删除当前分支最新的一条Commit):</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) 本地删除Commit记录</span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line">2) 向远程仓库提交强制申请</span><br><span class="line">git push origin HEAD -f</span><br></pre></td></tr></table></figure></li><li><p>从其他远程仓库导入项目</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1) 首先将导入仓库克隆到本地</span><br><span class="line">git clone &lt;gitUrl(导入仓库)&gt;</span><br><span class="line"></span><br><span class="line">2) cd 到该项目根目录</span><br><span class="line"></span><br><span class="line">3) 将该项目强制导入到被导入项目</span><br><span class="line">git push --mirror &lt;gitUrl(被导入仓库)&gt;</span><br></pre></td></tr></table></figure></li><li><p>导入其他仓库的Commit记录</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1) cd 到被导入项目根目录</span><br><span class="line"></span><br><span class="line">2) 将该库加为远程仓库</span><br><span class="line">git remote add target &lt;gitUrl(导入仓库)&gt;</span><br><span class="line"></span><br><span class="line">3) 将远程代码抓取到本地</span><br><span class="line">git fetch target</span><br><span class="line"></span><br><span class="line">4) 使用cherry-pick命令提交转移</span><br><span class="line">git cherry-pick &lt;commitHash&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改最新的一条Commit记录信息</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1) cd 到被导入项目根目录</span><br><span class="line"></span><br><span class="line">2) git commit --amend</span><br><span class="line"></span><br><span class="line">3) 输入i进入插入模式</span><br><span class="line"></span><br><span class="line">4) 修改Commit记录信息</span><br><span class="line"></span><br><span class="line">5) 按Esc退出</span><br><span class="line"></span><br><span class="line">6) 输入:wq保存</span><br><span class="line"></span><br><span class="line">7) git push -f</span><br></pre></td></tr></table></figure></li><li><p>导入其他仓库的分支</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1) cd 到被导入项目根目录</span><br><span class="line"></span><br><span class="line">2) 将该库加为远程仓库</span><br><span class="line">git remote add target &lt;gitUrl(导入仓库)&gt;</span><br><span class="line"></span><br><span class="line">3) 将远程代码抓取到本地</span><br><span class="line">git fetch target</span><br><span class="line"></span><br><span class="line">4) 切换到远程仓库对应分支</span><br><span class="line">git checkout &lt;对应分支名称&gt;</span><br><span class="line"></span><br><span class="line">5) 基于该分支创建本地分支</span><br><span class="line">git checkout -b &lt;本地分支名称&gt;</span><br><span class="line"></span><br><span class="line">6) 推送当前分支并建立与远程上游的跟踪</span><br><span class="line">git push --set-upstream origin &lt;本地分支名称&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改历史Commit记录</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1) 列出历史Commit列表(n为项数)</span><br><span class="line">git rebase -i HEAD~n</span><br><span class="line"></span><br><span class="line">2) 输入i进入插入模式</span><br><span class="line"></span><br><span class="line">3) 将被修改Commit前面的 &quot;pick&quot; 修改为 &quot;edit&quot;</span><br><span class="line"></span><br><span class="line">4) 按Esc退出</span><br><span class="line"></span><br><span class="line">5) 输入:wq保存</span><br><span class="line"></span><br><span class="line">6) git commit --amend</span><br><span class="line"></span><br><span class="line">7) 输入i进入插入模式</span><br><span class="line"></span><br><span class="line">8) 修改Commit记录信息</span><br><span class="line"></span><br><span class="line">9) 按Esc退出</span><br><span class="line"></span><br><span class="line">10) 输入:wq保存</span><br><span class="line"></span><br><span class="line">11) git rebase --continue</span><br><span class="line"></span><br><span class="line">12) git push -f</span><br></pre></td></tr></table></figure></li><li><p>修改历史Commit提交时间</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1) 列出历史Commit列表(n为项数)</span><br><span class="line">git rebase -i HEAD~n</span><br><span class="line"></span><br><span class="line">2) 输入i进入插入模式</span><br><span class="line"></span><br><span class="line">3) 将被修改Commit前面的 &quot;pick&quot; 修改为 &quot;edit&quot;</span><br><span class="line"></span><br><span class="line">4) 按Esc退出</span><br><span class="line"></span><br><span class="line">5) 输入:wq保存</span><br><span class="line"></span><br><span class="line">6) GIT_COMMITTER_DATE=&quot;2021-04-29T11:00:00&quot; git commit --amend --date=&quot;2021-04-29T11:00:00&quot;</span><br><span class="line"></span><br><span class="line">7) 输入:wq保存</span><br><span class="line"></span><br><span class="line">8) git rebase --continue</span><br><span class="line"></span><br><span class="line">9) git push -f</span><br></pre></td></tr></table></figure></li><li><p>撤回上次Commit并保留修改的文件(在Commit时恢复上次Commit信息):</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) 撤回上次Commit</span><br><span class="line">git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line">2) Commit并恢复上次Commit信息</span><br><span class="line">git commit -C HEAD@&#123;1&#125;</span><br><span class="line"></span><br><span class="line">3) 向远程仓库提交强制申请</span><br><span class="line">git push origin HEAD -f</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-Notes（GitHub地址）&quot;&gt;&lt;a href=&quot;#Git-Notes（GitHub地址）&quot; class=&quot;headerlink&quot; title=&quot;Git-Notes（GitHub地址）&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot;   href=&quot;https</summary>
      
    
    
    
    
    <category term="Git" scheme="https://acmezone.top/tags/Git/"/>
    
    <category term="GitHub" scheme="https://acmezone.top/tags/GitHub/"/>
    
    <category term="笔记" scheme="https://acmezone.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>利用清华和科大镜像源全程国内同步Android源码</title>
    <link href="https://acmezone.top/2021/07/08/%E5%88%A9%E7%94%A8%E6%B8%85%E5%8D%8E%E5%92%8C%E7%A7%91%E5%A4%A7%E9%95%9C%E5%83%8F%E6%BA%90%E5%85%A8%E7%A8%8B%E5%9B%BD%E5%86%85%E5%90%8C%E6%AD%A5Android%E6%BA%90%E7%A0%81/"/>
    <id>https://acmezone.top/2021/07/08/%E5%88%A9%E7%94%A8%E6%B8%85%E5%8D%8E%E5%92%8C%E7%A7%91%E5%A4%A7%E9%95%9C%E5%83%8F%E6%BA%90%E5%85%A8%E7%A8%8B%E5%9B%BD%E5%86%85%E5%90%8C%E6%AD%A5Android%E6%BA%90%E7%A0%81/</id>
    <published>2021-07-08T14:36:46.000Z</published>
    <updated>2024-03-23T15:30:00.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原CSDN博客地址"><a href="#原CSDN博客地址" class="headerlink" title="原CSDN博客地址"></a><a class="link"   href="https://blog.csdn.net/weixin_43267515/article/details/112528652?spm=1001.2014.3001.5501" >原CSDN博客地址<i class="fas fa-external-link-alt"></i></a></h1><blockquote><p>环境： 2021-1-12</p><p>系统： Ubuntu 20.04.1 LTS</p></blockquote><p>网上类似的资料已经很多了，但由于 <strong>时效性</strong> 或多或少会有一些问题，我在这里记录下 <strong>当前环境</strong> 下成功同步的方法</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li><p>安装必要工具</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></li><li><p>在 <strong>~/bin</strong> 目录下载 <strong>repo</strong> ：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/bin</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o repo</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x repo</span><br></pre></td></tr></table></figure></li><li><p>配置 <strong>repo</strong> 环境变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><ol><li><p>输入 <code>i</code> 进入编辑模式</p></li><li><p>在 <strong>末尾</strong> 添加：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=~/bin:$PATH</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br></pre></td></tr></table></figure></li><li><p>按 <code>Esc</code> 退出编辑模式，输入 <code>:wq</code> 保存并退出</p></li><li><p>使环境变量生效： <code>source ~/.bashrc</code></p></li></ol></li><li><p>在 <strong>清华/科大镜像源</strong> 下载 <strong>初始包</strong> 到 <strong>工作目录</strong> （90GB左右）：</p><p> <a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar" >清华源初始包<i class="fas fa-external-link-alt"></i></a></p><p> <a class="link"   href="https://mirrors.ustc.edu.cn/aosp-monthly/" >科大源初始包<i class="fas fa-external-link-alt"></i></a></p></li><li><p>在工作目录下解压： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf aosp-latest.tar</span><br></pre></td></tr></table></figure><ol><li><p>经测试清华源下载的初始包直接 <code>repo sync</code> 会出现奇奇怪怪的问题，解决办法是：</p><p> 显示隐藏文件 → 打开 <code>aosp/.repo/manifests.git/config</code></p></li><li><p>修改其中的 <strong>url</strong> 为：</p><p> <code>url = git://mirrors.ustc.edu.cn/aosp/platform/manifest</code></p></li></ol></li><li><p>修改 <strong>符号链接</strong> 将 <strong>python3</strong> 默认指向 <strong>python</strong> 命令：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/bin/python</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure></li><li><p>设置账号的 <strong>缺省身份标识</strong> ：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure></li><li><p>回到 <strong>aosp</strong> 目录下同步源码： <code>repo sync</code> </p></li><li><p> 成功 <strong>同步源码</strong> !</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原CSDN博客地址&quot;&gt;&lt;a href=&quot;#原CSDN博客地址&quot; class=&quot;headerlink&quot; title=&quot;原CSDN博客地址&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/weixin_432675</summary>
      
    
    
    
    
    <category term="Android" scheme="https://acmezone.top/tags/Android/"/>
    
    <category term="Git" scheme="https://acmezone.top/tags/Git/"/>
    
    <category term="Ubuntu" scheme="https://acmezone.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Android 6.0+ 动态权限获取(包含对Android 10+Android11+的支持)</title>
    <link href="https://acmezone.top/2021/07/08/Android-6-0-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E8%8E%B7%E5%8F%96-%E5%8C%85%E5%90%AB%E5%AF%B9Android-10-Android11-%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>https://acmezone.top/2021/07/08/Android-6-0-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E8%8E%B7%E5%8F%96-%E5%8C%85%E5%90%AB%E5%AF%B9Android-10-Android11-%E7%9A%84%E6%94%AF%E6%8C%81/</id>
    <published>2021-07-08T14:11:07.000Z</published>
    <updated>2024-03-23T15:29:59.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原CSDN博客地址"><a href="#原CSDN博客地址" class="headerlink" title="原CSDN博客地址"></a><a class="link"   href="https://blog.csdn.net/weixin_43267515/article/details/111239279?spm=1001.2014.3001.5501" >原CSDN博客地址<i class="fas fa-external-link-alt"></i></a></h1><p>从 <strong>Android6.0</strong> 开始，权限获取不再是简单地在 <strong>AndroidManifest.xml</strong> 添加几行代码了， <strong>Google</strong> 引入了 <strong>动态权限</strong> 的概念，需要在代码中添加。</p><h1 id="添加步骤（以读取和写入权限为例）："><a href="#添加步骤（以读取和写入权限为例）：" class="headerlink" title="添加步骤（以读取和写入权限为例）："></a>添加步骤（以读取和写入权限为例）：</h1><ol><li><p><strong>AndroidManifest.xml</strong> 中添加权限</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>从 <strong>Android10</strong> 开始，还需要添加：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:requestLegacyExternalStorage</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <strong>Activity</strong> 相应位置调用：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 没有Write权限，动态获取</span></span><br><span class="line">        ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class="number">1</span>);</span><br><span class="line">        Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;onCreate: 申请获得Write权限！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;onCreate: 已获得Write权限！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然而在 <strong>Android11</strong> 开始，** WRITE_EXTERNAL_STORAGE** 等特殊权限的获取又发生了变化…</p> <img                         lazyload                       alt="image"                       data-src="/2021/07/08/Android-6-0-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E8%8E%B7%E5%8F%96-%E5%8C%85%E5%90%AB%E5%AF%B9Android-10-Android11-%E7%9A%84%E6%94%AF%E6%8C%81/WRITE_EXTERNAL_STORAGE.png"                        class="" title="Android11+的特殊权限变化"                 ><p> 当仍沿用 <strong>Android10-</strong> 的权限获取方式时，会在调用权限时 <strong>抛出异常</strong> </p><p> 因为在 <strong>Andorid11+</strong> 中， <strong>Google</strong> 添加了一个新的权限： <strong>MANAGE_EXTERNAL_STORAGE</strong></p><p> 当 <strong>APP</strong> 动态请求权限时，会引导用户进入一个 <strong>权限设置界面</strong></p> <img                         lazyload                       alt="image"                       data-src="/2021/07/08/Android-6-0-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E8%8E%B7%E5%8F%96-%E5%8C%85%E5%90%AB%E5%AF%B9Android-10-Android11-%E7%9A%84%E6%94%AF%E6%8C%81/BuildPropHelper.png"                        class="" title="文件所有权设置界面"                 ><p> 所以，在Android11+中：</p><p> AndroidManifest.xml中添加权限：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure> <img                         lazyload                       alt="image"                       data-src="/2021/07/08/Android-6-0-%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E8%8E%B7%E5%8F%96-%E5%8C%85%E5%90%AB%E5%AF%B9Android-10-Android11-%E7%9A%84%E6%94%AF%E6%8C%81/MANAGE_EXTERNAL_STORAGE.png"                        class="" title="该权限仅支持Android11+"                 ><p> 该权限仅支持 <strong>Android11+</strong> </p></li><li><p>在Activity相应位置调用：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) &#123;</span><br><span class="line">    <span class="comment">// new一个intent转到系统设置界面</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);</span><br><span class="line">    intent.setData(Uri.parse(<span class="string">&quot;package:&quot;</span> + mContext.getPackageName()));</span><br><span class="line">    <span class="comment">// 1024为REQUEST_CODE</span></span><br><span class="line">    startActivityForResult(intent, <span class="number">1024</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>所以合并起来的代码是：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWriteRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) &#123;</span><br><span class="line">        <span class="comment">// new一个intent转到系统设置界面</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">&quot;package:&quot;</span> + mContext.getPackageName()));</span><br><span class="line">        <span class="comment">// 1024为REQUEST_CODE</span></span><br><span class="line">        startActivityForResult(intent, <span class="number">1024</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ActivityCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有Write权限，动态获取</span></span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                    Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;, <span class="number">1</span>);</span><br><span class="line">            Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;onCreate: 申请获得Write权限！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;onCreate: 已获得Write权限！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原CSDN博客地址&quot;&gt;&lt;a href=&quot;#原CSDN博客地址&quot; class=&quot;headerlink&quot; title=&quot;原CSDN博客地址&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/weixin_432675</summary>
      
    
    
    
    
    <category term="Android" scheme="https://acmezone.top/tags/Android/"/>
    
    <category term="权限" scheme="https://acmezone.top/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse/Idea(Android Studio) 最舒服的字体配置</title>
    <link href="https://acmezone.top/2021/07/08/Eclipse-Idea-Android-Studio-%E6%9C%80%E8%88%92%E6%9C%8D%E7%9A%84%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE/"/>
    <id>https://acmezone.top/2021/07/08/Eclipse-Idea-Android-Studio-%E6%9C%80%E8%88%92%E6%9C%8D%E7%9A%84%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE/</id>
    <published>2021-07-08T12:07:39.000Z</published>
    <updated>2024-03-23T15:29:59.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原CSDN博客地址"><a href="#原CSDN博客地址" class="headerlink" title="原CSDN博客地址"></a><a class="link"   href="https://blog.csdn.net/weixin_43267515/article/details/83043555?spm=1001.2014.3001.5501" >原CSDN博客地址<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p>2021-7-8 更新： 新版Jetbrains系列IDE已不需要再将字体复制到其安装目录中~</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p><strong>舒服的字体是快乐编程的首要条件~</strong></p><p>我推荐的是 <strong>Mac OS</strong> 的 <a href="Monaco.ttf"><strong>Monaco</strong></a> 字体~</p><img                         lazyload                       alt="image"                       data-src="/2021/07/08/Eclipse-Idea-Android-Studio-%E6%9C%80%E8%88%92%E6%9C%8D%E7%9A%84%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE/IDEA.png"                        class="" title="Monaco"                 ><p>这个字体是我从官方 <strong>Mac OS</strong> 提取出来然后转换成 <strong>TTF</strong> 格式的。</p><p>以下是 <strong>Jetbrains系列IDE</strong> 的配置教程（以Clion为例）：</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h2><ol><li><p>下载好 <a href="Monaco.ttf"><strong>Monaco</strong></a> 字体。</p></li><li><p>双击打开字体，然后点击安装。</p><img                         lazyload                       alt="image"                       data-src="/2021/07/08/Eclipse-Idea-Android-Studio-%E6%9C%80%E8%88%92%E6%9C%8D%E7%9A%84%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE/Monaco.png"                        class="" title="Monaco"                 ></li><li><p>打开 <strong>Clion</strong> ,依次点击 <strong>左上角</strong> <strong>File</strong> -  <strong>Settings</strong> - <strong>Editor</strong> - <strong>Font</strong></p><p>如图配置即可</p><img                         lazyload                       alt="image"                       data-src="/2021/07/08/Eclipse-Idea-Android-Studio-%E6%9C%80%E8%88%92%E6%9C%8D%E7%9A%84%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE/Clion.png"                        class="" title="Clion"                 ></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原CSDN博客地址&quot;&gt;&lt;a href=&quot;#原CSDN博客地址&quot; class=&quot;headerlink&quot; title=&quot;原CSDN博客地址&quot;&gt;&lt;/a&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/weixin_432675</summary>
      
    
    
    
    
    <category term="IDE" scheme="https://acmezone.top/tags/IDE/"/>
    
    <category term="Jetbrains" scheme="https://acmezone.top/tags/Jetbrains/"/>
    
    <category term="美化" scheme="https://acmezone.top/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
</feed>
